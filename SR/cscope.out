cscope 16 $HOME/toy1               0000474919
	@chunk.h

21 #i‚de‡
_CHUNK_H_


22 
	#_CHUNK_H_


	)

24 #ifde‡
__˝lu•lus


29 #i‚de‡
BOOL


30 
	#BOOL
 

	)

33 
	s_aChunkCñl


35 
_aChunkCñl
 *
√xtCñl
;

36 }
	taChunkCñl
;

38 
	s_aMemChunkHódî


40 
_aMemChunkHódî
 *
√xt
;

41 
_aMemChunkHódî
 *
¥ev
;

42 
nCñls
;

43 *
memD©a
;

44 }
	taMemChunk
;

46 *
MÆloc
(
sz
,
BOOL
 
˛ór
 );

50 *
MÆloc32
(
sz
,
BOOL
 
˛ór
 );

52 
Fªe
(*
±r
);

53 
Fªe32
(*
±r
);

62 
	s_CMemChunk


64 
aMemChunk
 *
mcHód
, *
mcTaû
;

65 
_aChunkCñl
 *
fcHód
, *
fcTaû
;

67 
au
;

68 
˚ŒSize
;

69 
öc
;

72 
BOOL
 
CMemChunk_AddChunk
(
CMemChunk
 *
£lf
, BOOL 
˛ór
 );

73 *
CMemChunk_New
(
CMemChunk
 *
£lf
, 
BOOL
 
˛ór
 );

74 
CMemChunk_Dñëe_P2
(
CMemChunk
 *
£lf
, *
±r
);

75 
BOOL
 
CMemChunk_Inô
(
CMemChunk
 *
£lf
, BOOL 
˛ór
 );

76 
CMemChunk_Re£tMem
(
CMemChunk
 *
£lf
);

77 
CMemChunk_CheckMem
(
CMemChunk
 *
£lf
);

79 
CMemChunk
 *
CMemChunk_New_P3
(
au
 , 
˚ŒSize
 , 
öc
 );

80 
CMemChunk_Dñëe
(
CMemChunk
 *
£lf
);

82 #ifde‡
__˝lu•lus


	@common.h

8 #i‚de‡
__FXP_COMMON_H__


9 
	#__FXP_COMMON_H__


	)

11 
	~"ty≥defs.h
"

13 #i‚de‡
_CONSOLE


14 
	#_EPSON_C33


	)

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

20 #i‚de‡ 
_EPSON_C33


21 
	~<mem‹y.h
>

24 
	~<°rög.h
>

25 
	~<m©h.h
>

28 
	~"m§_≠i.h
"

30 #i‚de‡
boﬁ


31 
	#boﬁ
 

	)

32 
	#åue
 1

	)

33 
	#Ál£
 0

	)

35 #i‚de‡
BOOL


36 
	#BOOL
 

	)

39 #i‚de‡
FALSE


40 
	#FALSE
 0

	)

42 #i‚de‡
TRUE


43 
	#TRUE
 1

	)

55 #ifde‡
_GëCM_


56 
	#SENONE_SEG


	)

58 
	#_MEM_OPTIMAL_


	)

60 
	#_P4_PLATFORM_


	)

64 
	#TOP_N_BEST
 10

	)

66 
	#MAX_PRONS_PER_WORD
 128

	)

67 
	#MAX_PRONS_HALF_WORD
 (
MAX_PRONS_PER_WORD
 / 2)

	)

68 
	#MAX_MP_NUMBER_PER_WORD
 32

	)

70 
	#fxpRndZîo
 0x0

	)

71 
	#fxpRndNór
 0x1

	)

74 #ifde‡
_CONSOLE


91 
	tph√nc
;

94 
	#OBVTYPE
 
W‹d16


	)

95 
	#ACCOBVTYPE
 
W‹d32


	)

97 
	#PROBTYPE
 
W‹d16


	)

98 
	#ACCPROBTYPE
 
W‹d32


	)

100 
	#INTTYPE
 
ush‹t


	)

102 
	#FXP_MAX_8U
 ( 0xFF )

	)

103 
	#FXP_MAX_16U
 ( 0xFFFF )

	)

104 
	#FXP_MAX_32U
 ( 0xFFFFFFFF )

	)

105 
	#FXP_MIN_8S
 (-128 )

	)

106 
	#FXP_MAX_8S
 ( 127 )

	)

107 
	#FXP_MIN_16S
 (-32768 )

	)

108 
	#FXP_MAX_16S
 ( 32767 )

	)

109 
	#FXP_MIN_32S
 (-2147483647 - 1 )

	)

110 
	#FXP_MAX_32S
 ( 2147483647 )

	)

112 
	#LW_SIGN
 ()0x80000000

	)

113 
	#LW_MIN
 ()0x80000000

	)

114 
	#LW_MAX
 ()0x7fffffff

	)

118 
	s_aGVQHódî


120 
	mfvqcbkSize
;

121 
	mcbkSize
;

122 
	m°ªamNum
;

123 
	m°ªamLí
;

124 
	msˇÀFa˘‹
;

125 
OBVTYPE
 *
	mcode
;

126 } 
	taGVQHódî
;

129 
	#SDCHMM_MIXTURE_NUM
 8

	)

130 
	#SDCHMM_STREAM_NUM
 24

	)

132 
ush‹t
 
	taHMMSèã
 ;

133 
	s_SDCHMMPARAM


135 
uch¨
 
	mvecSize
;

136 
uch¨
 
	mmaxSèãNum
;

137 
ush‹t
 
	mexSèãNum
;

138 
ush‹t
 
	mwgtNum
;

139 
ush‹t
 
	mmixNum
;

140 
aHMMSèã
 *
	mexSèãSë
;

141 
uch¨
 *
	meIdxSë
;

142 
PROBTYPE
 *
	mwgtSë
;

143 } 
	tSDCHMMPARAM
;

147 
	s_aHMMDcsTªeNode


149 
	mÀ·
,
	mright
;

150 
	mque°
;

151 
	mex°©e
;

152 } 
	taHMMDcsTªeNode
;

154 
	s_Decisi⁄TªeHódî


156 
	mnm⁄o
;

157 
	mmaxSèãNum
;

158 
	mnodeNum
;

159 
	mqNum
;

160 
	msubqNum
;

161 }
	tDecisi⁄TªeHódî
;

164 
	#MAPFORONE2ONE
 0x1

	)

165 
	#MAPFORDECISION
 0x2

	)

166 
	#MAPONEONONETSK
 0x3

	)

167 
	s_CMM≠


169 
ush‹t
 
	mm≠Ty≥
;

170 
ush‹t
 
	mm⁄oLí
;

171 
ush‹t
 
	mm⁄oTì
;

172 
ush‹t
 
	mèskSèãNum
;

173 
ush‹t
 *
	mm⁄oM≠Tbl
;

175 } 
	tCMM≠
;

178 
	s_aLexTªeHódî


180 
INTTYPE
 
	msûSèπSèãIdx
;

181 
INTTYPE
 
	mãeSèãIdx
;

182 
	mw‹dSëNum
;

183 
	mw‹dNum
;

184 
	mnodeNum
;

185 
	mmaxchûdªn
;

186 
	mSèãPh⁄eNum
;

187 } 
	taLexTªeHódî
;

190 
	e_Pr⁄Di˘Ty≥


192 
	mf‹GøphDecodî
 = 0,

193 
	mf‹TªeDecodî
,

194 
	mf‹LookupO∆y
,

195 
	mUNKNOWN


196 } 
	tPr⁄Di˘Ty≥
;

198 
	s_Pr⁄Di˘Hódî


200 
	mw‹dNum
;

201 
	mw‹dSëNum
;

202 
	mw‹dSèπIdx
;

203 
	mídSèπIdx
;

204 
	mphnS≥cNum
;

205 
	mw‹dPhnNum
;

206 
	mbyãPhnNum
;

207 
Pr⁄Di˘Ty≥
 
	mty≥
;

208 } 
	tPr⁄Di˘Hódî
;

211 #ifde‡
SENONE_SEG


212 
	s_aSí⁄eTø˚


214 
_aSí⁄eTø˚
 *
	m√xt
;

215 
	mtime
;

216 
INTTYPE
 
	mu£
;

217 
INTTYPE
 
	m£n⁄eIdx
;

218 
PROBTYPE
 
	mp
;

219 } 
	taSí⁄eTø˚
;

222 
	s_aT˚Tokí


224 
_aTø˚
 *
	måa˚
;

225 #ifde‡
SENONE_SEG


226 
aSí⁄eTø˚
 *
	m£n⁄eTø˚
;

228 
PROBTYPE
 
	mp
;

229 } 
	taT˚Tokí
;

231 
	s_aTø˚


233 
	mtime
;

234 
INTTYPE
 
	mu£
;

235 
INTTYPE
 
	mwidx
;

236 
INTTYPE
 
	m«âach
;

237 
_aT˚Tokí
 
	m©èchs
[1];

238 } 
	taTø˚
;

240 
	s_aTokíLnk


242 
_aTokíLnk
 *
	m√xt
;

243 
_aTø˚
 *
	måa˚
;

244 #ifde‡
SENONE_SEG


245 
aSí⁄eTø˚
 *
	m£n⁄eTø˚
;

247 
PROBTYPE
 
	mp
;

248 }
	taTokíLnk
;

250 
	s_aTªeNode


252 
_aTªeNode
 *
	m k
;

253 
_aTokíLnk
 *
	mtk k
;

258 
INTTYPE
 
	måùhnIdx
;

259 
INTTYPE
 
	mnsucc
;

260 
_aTªeNode
 **
	msuccs
;

261 } 
	mnode
;

264 
INTTYPE
 
	mœâ
;

265 } 
	mw‹d
;

266 } 
	mis
;

268 #i‚de‡
_MEM_OPTIMAL_


269 
INTTYPE
 
	mwíum
;

270 
INTTYPE
 
	m∫um
;

273 
INTTYPE
 
	mdïth
;

274 
INTTYPE
 
	m›ti⁄
;

275 }
	taTªeNode
;

279 
	s_aPr⁄SèãDi˘


281 
INTTYPE
 *
	msidx
;

282 
INTTYPE
 
	mn°©e
;

283 
INTTYPE
 *
	m›ti⁄
;

284 } 
	taPr⁄SèãDi˘
;

286 
	s_⁄eSåm


288 
	m°rmLí
;

289 *
	m°rmSåu˘
;

290 } 
	t⁄eSåm
;

292 
	s_aTøns


294 
_aTøns
 *
	m√xt
;

295 
INTTYPE
 
	mwidx
;

296 
ush‹t
 
	mt
;

297 
INTTYPE
 
	mu£
;

298 
PROBTYPE
 
	mp
;

299 
PROBTYPE
 
	mdp
;

300 #ifde‡
SENONE_SEG


301 
_aSí⁄eTø˚
 *
	m£n⁄eTø˚
;

303 }
	taTøns
;

305 
	s_aTønsSë


307 
_aTø˚
 *
	m¥ev
;

308 
_aTøns
 *
	m√xt
;

309 
PROBTYPE
 
	mp
;

310 }
	taTønsSë
;

312 
	s_NodeCou¡s


314 
	mn˙t
;

315 
	mwí˙t
;

316 
	mn¢˙t
;

317 }
	tNodeCou¡s
;

320 
	s_LabÀName


322 
	m«me
[
MAX_WORD_LENGTH
];

323 
uch¨
 
	m¥⁄s
[
MAX_PRONS_PER_WORD
];

324 } 
	tLabÀName
;

327 
	s_aSí⁄eHypo


329 
	mtime
;

330 
	mdur
;

331 
	m£n⁄eIdx
;

332 
	mcsv
;

333 
_aSí⁄eHypo
 *
	m√xt
;

334 }
	taSí⁄eHypo
;

336 
	s_aW‹dHypo


338 
	mtime
;

339 
	mdur
;

340 
	mwidx
;

341 
	mcsv
;

342 
_aSí⁄eHypo
 *
	msHypo
;

343 }
	taW‹dHypo
;

345 
	s_WORDLINK


347 
	mw‹d
[
MAX_WORD_LENGTH
];

348 
	mc⁄fidí˚
;

349 
aW‹dHypo
 *
	mwHypo
;

350 
_WORDLINK
 *
	m√xt
;

351 } 
	tWORDLINK
;

355 
	mNBe°
;

356 
WORDLINK
 **
	m£n
;

357 } 
	tMSR_SENRESULT
;

359 
_TªeDecodî
 
	tTªeDecodî
;

360 
_CMemChunk
 
	tCMemChunk
;

361 
_SDTBóm
 
	tSDTBóm
;

362 
_iLexTªe
 
	tiLexTªe
;

363 
_iTªeDecodî
 
	tiTªeDecodî
;

366 
	#ownC›y_16s
(
§c
, 
desc
, 
Àn
Ë
	`mem˝y
(desc, src, (ÀnË* (
W‹d16
))

	)

367 
	#ownZîo_16s
(
§c
, 
Àn
Ë
	`mem£t
(§c, 0, (ÀnË* (
W‹d16
))

	)

368 
	#ownZîo_32s
(
§c
, 
Àn
Ë
	`mem£t
(§c, 0, (ÀnË* (
W‹d32
))

	)

369 
	#ownZîo_8u
(
§c
,
Àn
Ë
	`mem£t
(§c, 0, (ÀnË* (
W‹d8u
))

	)

372 
uœw2löór
(
uœwbyã
);

373 
Æaw2löór
(
uœwbyã
);

376 
Exô
(
x
);

377 
GëTimeLog
(* 
szMsg
);

379 
	#CAL_MALLOC_SPACE


	)

380 #ifde‡ 
CAL_MALLOC_SPACE


381 
	#MAX_MALLOC_SIZE
 (1024 * 1024 * 32)

	)

382 
g_iTŸÆMÆloc
;

385 
my°ricmp
(*
s
, *
t
);

386 
	~"chunk.h
"

388 
	#SEG_LEN
 4

	)

	@convert.c

1 
	~<°ddef.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<î∫o.h
>

7 
	~"c⁄vît.h
"

18 
	$bö¨ySórch
(c⁄° *
èbÀ
,

19 
èbÀn
,

20 
code
)

22 
hód
,
èû
,
middÀ
;

24 
hód
 = 0;

25 
èû
 = 
èbÀn
-1;

26 i‡((
code
 < 
èbÀ
[
hód
])||(codê>ÅabÀ[
èû
]))

29 
hód
 <
èû
)

31 
middÀ
 = (
hód
+
èû
)/2;

32 i‡(
code
 =
èbÀ
[
middÀ
])

33  (
middÀ
);

34 i‡(
code
 > 
èbÀ
[
middÀ
])

35 
hód
 = 
middÀ
+1;

37 
èû
 = 
middÀ
-1;

40  (
NOT_SUPPORTED
);

41 
	}
}

45 
	$gbc2uc
–
gbc
 )

47 
ödex
 = 
	`bö¨ySórch
(
gbkAGbkcode
, 
CODE_NUM
, 
gbc
);

49 i‡–
ödex
 =
NOT_SUPPORTED
 ) {

53  
gbkAUnicode
[
ödex
];

55 
	}
}

57 
	$gëUniLíOfGbSå
–c⁄° *
p
 )

59 
Àn
 = 0;

61  *
p
 ) {

62 i‡–*
p
 & 0x80 ) {

63 
p
 += 2;

66 
p
 += 1;

68 
Àn
++;

70  
Àn
;

71 
	}
}

83 
	$gb2uni
–c⁄° *
gb°r
, *
unibuf
, 
buÊí
 )

85 
unûí
, 
i
;

86 
unûí
 = 
	`gëUniLíOfGbSå
(
gb°r
)+2;

87 i‡–!
unibuf
 || ( 
buÊí
 <= 0 ) ) {

88  
unûí
;

91 i‡–
unûí
 > 
buÊí
 ) {

92 
unûí
 = 
buÊí
;

95  
i
 = 0; i < 
unûí
; i++ ) {

96 i‡–*
gb°r
 & 0x80 ) {

98 
gbc
 = ( 
gb°r
[0] << 8 ) + gbstr[1];

99 
unibuf
[
i
] = 
	`gbc2uc
(
gbc
);

100 
gb°r
 += 2;

103 
unibuf
[
i
] = *
gb°r
;

104 
gb°r
 += 1;

108  
unûí
;

109 
	}
}

113 
	$uc2gbc
–
uc
 )

115 
ödex
 = 
	`bö¨ySórch
(
uniAUnicode
, 
CODE_NUM
, 
uc
);

117 i‡–
ödex
 =
NOT_SUPPORTED
 ) {

121  
uniAGbkcode
[
ödex
];

123 
	}
}

125 
	$gëGbLíOfUniSå
–c⁄° *
p
 )

127 
Àn
 = 0;

129  *
p
 ) {

130 i‡–*
p
 < 0x80 ) {

131 
Àn
 += 1;

134 
Àn
 += 2;

136 
p
++;

138  
Àn
;

139 
	}
}

151 
	$uni2gb
(c⁄° *
uni°r
, *
gbbuf
, 
buÊí
 )

153 
gbÀn
, 
i
;

154 
gbÀn
 = 
	`gëGbLíOfUniSå
(
uni°r
)+2;

155 i‡–!
gbbuf
 || ( 
buÊí
 <= 0 ) ) {

156  
gbÀn
;

159 i‡–
gbÀn
 > 
buÊí
 ) {

160 
gbÀn
 = 
buÊí
;

163 
i
 = 0;

164  
i
 < 
gbÀn
 ) {

165 i‡–*
uni°r
 < 0x80 ) {

166 
gbbuf
[
i
] = ()(*
uni°r
);

167 
i
++;

171 
t
 = 
	`uc2gbc
(*
uni°r
);

172 
gbbuf
[
i
++] = ()–
t
 >> 8 );

173 
gbbuf
[
i
++] = ()–
t
 & 0xff );

175 
uni°r
++;

178  
gbÀn
;

179 
	}
}

181 
	t__u8
;

182 
	t__u16
;

190 
	sutf8_èbÀ
 {

191 
	mcmask
;

192 
	mcvÆ
;

193 
	mshi·
;

194 
	mlmask
;

195 
	mlvÆ
;

198 
utf8_èbÀ
 
	gutf8_èbÀ
[] =

210 
	$utf8_mbtowc
(
wch¨_t
 *
p
, c⁄° 
__u8
 *
s
, 
n
)

212 
l
;

213 
c0
, 
c
, 
nc
;

214 
utf8_èbÀ
 *
t
;

216 
nc
 = 0;

217 
c0
 = *
s
;

218 
l
 = 
c0
;

219 
t
 = 
utf8_èbÀ
;Å->
cmask
;Å++) {

220 
nc
++;

221 i‡((
c0
 & 
t
->
cmask
Ë=t->
cvÆ
) {

222 
l
 &
t
->
lmask
;

223 i‡(
l
 < 
t
->
lvÆ
)

225 *
p
 = 
l
;

226  
nc
;

228 i‡(
n
 <
nc
)

230 
s
++;

231 
c
 = (*
s
 ^ 0x80) & 0xFF;

232 i‡(
c
 & 0xC0)

234 
l
 = (»<< 6Ë| 
c
;

237 
	}
}

240 
	$utf8_mb°owcs
(
wch¨_t
 *
pwcs
, c⁄° 
__u8
 *
s
, 
n
)

242 
__u16
 *
›
;

243 
wch¨_t
 
v_›
;

244 c⁄° 
__u8
 *
ù
;

245 
size
;

247 
›
 = (
__u16
 *)
pwcs
;

248 
ù
 = 
s
;

249 *
ù
 && 
n
 > 0) {

250 i‡(*
ù
 & 0x80) {

251 
size
 = 
	`utf8_mbtowc
(&
v_›
, 
ù
, 
n
);

252 *
›
=
v_›
;

253 i‡(
size
 == -1) {

255 
ù
++;

256 
n
--;

258 
›
++;

259 
ù
 +
size
;

260 
n
 -
size
;

263 *
›
++ = *
ù
++;

264 
n
--;

267  (
›
 - (
__u16
 *)
pwcs
);

268 
	}
}

271 
	$utf8_w˘omb
(
__u8
 *
s
, 
wch¨_t
 
wc
, 
maxÀn
)

273 
l
;

274 
c
, 
nc
;

275 
utf8_èbÀ
 *
t
;

277 i‡(
s
 == 0)

280 
l
 = 
wc
;

281 
nc
 = 0;

282 
t
 = 
utf8_èbÀ
;Å->
cmask
 && 
maxÀn
;Å++, maxlen--) {

283 
nc
++;

284 i‡(
l
 <
t
->
lmask
) {

285 
c
 = 
t
->
shi·
;

286 *
s
 = 
t
->
cvÆ
 | (
l
 >> 
c
);

287 
c
 > 0) {

288 
c
 -= 6;

289 
s
++;

290 *
s
 = 0x80 | ((
l
 >> 
c
) & 0x3F);

292  
nc
;

296 
	}
}

299 
	$utf8_wc°ombs
(
__u8
 *
s
, c⁄° 
wch¨_t
 *
pwcs
, 
maxÀn
)

301 c⁄° 
__u16
 *
ù
;

302 
__u8
 *
›
;

303 
size
;

305 
›
 = 
s
;

306 
ù
 = (
__u16
 *)
pwcs
;

307 *
ù
 && 
maxÀn
 > 0) {

308 i‡(*
ù
 > 0x7f) {

309 
size
 = 
	`utf8_w˘omb
(
›
, *
ù
, 
maxÀn
);

310 i‡(
size
 == -1) {

312 
maxÀn
--;

314 
›
 +
size
;

315 
maxÀn
 -
size
;

318 *
›
++ = (
__u8
Ë*
ù
;

320 
ù
++;

322  (
›
 - 
s
);

323 
	}
}

325 
wch¨_t
 *
	gpw
;

326 * 
	gps
;

327 *
	gpc
;

329 
	gutf16
[100];

331 
	$utf8_to_gb2312
(* 
utf8
,* 
gb2312
,
size
)

333 
i
;

335 if(!
utf8
||!
gb2312
)

338 
	`mem£t
(
utf16
,0,(utf16));

341 
pc
=(*)
utf8
;

342 
pw
=(
wch¨_t
 *)
utf16
;

344 
	`utf8_mb°owcs
(
pw
, 
pc
, (
utf16
));

347 
ps
=(*)
utf16
;

348 
pc
=(*)
gb2312
;

350 
	`uni2gb
(
ps
, 
pc
, 
size
);

353 
	}
}

355 
	$gb2312_to_utf8
(* 
gb2312
,* 
utf8
,
size
)

357 if(!
utf8
||!
gb2312
)

360 
	`mem£t
(
utf16
,0,(utf16));

363 
ps
=(*)
utf16
;

364 
pc
=(*)
gb2312
;

366 
	`gb2uni
(
pc
, 
ps
, (
utf16
));

369 
	`mem£t
(
utf8
,0,
size
);

370 
pw
=(
wch¨_t
 *)
utf16
;

371 
pc
=(*)
utf8
;

373 
	`utf8_wc°ombs
(
pc
, 
pw
, 
size
);

376 
	}
}

	@convert.h

1 #i‚de‡ 
__CONVERT


2 
	#__CONVERT


	)

4 
	#NOT_SUPPORTED
 -1

	)

5 
	#HZ_NUM
 6763

	)

6 
	#SYM_NUM
 717

	)

7 
	#CODE_NUM
 (
HZ_NUM
+
SYM_NUM
)

	)

11 c⁄° 
	guniAUnicode
[
CODE_NUM
] =

765 c⁄° 
	guniAGbkcode
[
CODE_NUM
] =

1519 c⁄° 
	ggbkAGbkcode
[
CODE_NUM
] =

2273 c⁄° 
	ggbkAUnicode
[
CODE_NUM
] =

3025 
utf8_to_gb2312
(* 
utf8
,* 
gb2312
,
size
);

3026 
gb2312_to_utf8
(* 
gb2312
,* 
utf8
,
size
);

	@file_server.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<î∫o.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/sockë.h
>

9 
	~<sys/waô.h
>

10 
	~<f˙é.h
>

11 
	~<°d¨g.h
>

12 
	~<uni°d.h
>

14 
	~"fûe_£rvî.h
"

15 
	~"mp3_∂ay.h
"

16 
	~"vîsi⁄.h
"

18 
	#DEBUG_TTY


	)

19 #i‡
deföed
(
DEBUG_TTY
)

20 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<logÇë>:\t" s , ##¨g )

	)

21 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏√t>:\t" s , ##¨g )

	)

22 #ñi‡
deföed
 (
DEBUG_NET
)

23 
	#DP
–
s
, 
¨g
... ) do{
	`•rötf
("<logÇë>:\t" s , ##¨g );}0);

	)

24 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏√t>:\t" s , ##¨g )

	)

26 
	#DP
–
x
... )

	)

27 
	#DE
–
x
... )

	)

30 
	gmy_«me
[
FNAME_MAX_LEN
];

32 
	glök_up
=0;

34 
√t_buf_t
 
	g√t_buf
;

36 * 
	gp_d©a
=
√t_buf
.
buf
;

38 
	gsockfd
,
	g√w_fd
;

40 
	gfûe_«me
[
FNAME_MAX_LEN
];

42 
FILE
 * 
	gfûe_fd
;

44 
fûe_°¨t
()

46 
°r˝y
(
fûe_«me
,
p_d©a
);

47 
DP
("%s\n",
fûe_«me
);

48 if(
°æí
(
fûe_«me
)==0||°æí(fûe_«me)>
FNAME_MAX_LEN
)

50 
DE
("Invalid fileÇame\n");

54 if(!(
	gfûe_fd
=
f›í
(
fûe_«me
,"w+")))

56 
DE
("C™ÇŸ wrôêfûê%s\n",
fûe_«me
);

63 
fûe_d©a
(
size
)

65 if(
	gsize
<=0)

67 
DE
("File data size is %d\n");

71 if(
fwrôe
(
p_d©a
,1,
size
,
fûe_fd
)!=size)

73 
DE
("Faûed wrôêtÿfûê%s\n",
fûe_«me
);

80 
fûe_íd
()

82 if(
f˛o£
(
fûe_fd
))

84 
DP
("Eº‹ occuªd whí closög fûê%s\n",
fûe_«me
);

91 
ª°¨t_nﬂâr
()

93 
put_ªs_∂ayî
();

94 
exe˛e
(
my_«me
,my_«me,
NULL
,NULL);

97 
dñë_Æl
()

99 
pid_t
 
	gpid
;

100 if(!(
	gpid
=
f‹k
()))

102 
exe˛e
("em±y","em±y",
NULL
,NULL);

105 
¶ìp
(2);

107  
	gpid
>0?0:-1;

110 
√t_£nd
(
ty≥
,
size
)

112 
	gªt
;

114 
	g√t_buf
.
	gty≥
=
ty≥
;

116 
	gsize
+=
NET_HEAD_LEN
;

118 if((
	gªt
=
£nd
(
√w_fd
,(*)&
√t_buf
,
size
,
MSG_DONTWAIT
 | 
MSG_NOSIGNAL
))==-1)

120 
DP
("Send failed\n");

121 
≥º‹
("send:");

122 
	glök_up
=0;

125  
	gªt
;

128 
√t_îr
()

130 
DP
("NET ERROR\n");

131 if(!
	glök_up
)

134 
√t_£nd
(
ERR
,0);

138 
√t_ack
()

140 
DP
("NET ACK\n");

141 if(!
	glök_up
)

144 
√t_£nd
(
ACK
,0);

147 
√t_¥ötf
(c⁄° *
fmt
, ...)

149 
va_li°
 
	g¨gs
;

150 
	gr
;

152 if(!
	glök_up
)

155 
va_°¨t
(
¨gs
, 
fmt
);

156 
	gr
 = 
v•rötf
(
p_d©a
,
fmt
, 
¨gs
);

157 
va_íd
(
¨gs
);

160  
√t_£nd
(
LOG
,
r
);

163 
√t_vîsi⁄
()

165 
mem˝y
(
p_d©a
,
HW_VERSION
,
VERSION_STRLEN
);

166 
mem˝y
(
p_d©a
+
VERSION_STRLEN
,
KERNEL_VERSION
,VERSION_STRLEN);

167 
mem˝y
(
p_d©a
+2*
VERSION_STRLEN
,
SOFT_VERSION
,VERSION_STRLEN);

169 
√t_£nd
(
VERSION
,3*
VERSION_STRLEN
);

172 * 
	$fûe_£rvî
(* 
©å
){

173 
sockfd
;

174 
sockaddr_ö
 
my_addr
;

175 
sockaddr_ö
 
theú_addr
;

176 
sö_size
;

178 
numbyãs
;

181 if((
sockfd
 = 
	`sockë
(
AF_INET
,
SOCK_STREAM
,0))==-1)

183 
	`≥º‹
("socket");

184  
NULL
;

186 
my_addr
.
sö_Ámûy
 = 
AF_INET
;my_addr.
sö_p‹t
 = 
	`ht⁄s
(5000);

187 
my_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;
	`bzîo
(&(my_addr.
sö_zîo
),8);

189 
	`böd
(
sockfd
,(
sockaddr
 *)&
my_addr
,(sockaddr))==-1)

191 
	`≥º‹
("bind");

192 
	`¶ìp
(1);

195 if(
	`li°í
(
sockfd
,10)==-1)

197 
	`≥º‹
("listen");

198  
NULL
;

202 
sö_size
 = (
sockaddr_ö
);

203 
	`≥º‹
("server isÑun");

204 if((
√w_fd
 = 
	`ac˚±
(
sockfd
,(
sockaddr
 *)&
theú_addr
,&
sö_size
))==-1)

206 
	`≥º‹
("accept");

209 
lök_up
=1;

210 
lök_up
)

212 if((
numbyãs
 = 
	`ªcv
(
√w_fd
,&
√t_buf
,“ë_buf),0))<
NET_HEAD_LEN
)

214 
	`≥º‹
("recv");

217 
√t_buf
.
ty≥
)

219 
HALT
:

220 
	`DP
("TryingÅo stopÅargetápplication\n");

221 if(
	`°›_∂ay
(10)<0)

222 
	`√t_îr
();

224 
	`√t_vîsi⁄
();

226 
TRANS_PREPARE
:

227 
	`DP
("Prepare forÅrasmitimg file\n");

228 if(
	`dñë_Æl
()<0)

229 
	`√t_îr
();

231 
	`√t_ack
();

233 
FILE_START
:

234 
	`DP
("StartingÅrasmiting file\n");

235 if(
	`fûe_°¨t
()<0)

236 
	`√t_îr
();

238 
	`√t_ack
();

240 
FILE_DATA
:

241 
	`DP
("Geting file data\n");

242 if(
	`fûe_d©a
(
numbyãs
-
NET_HEAD_LEN
)<0)

243 
	`√t_îr
();

245 
	`√t_ack
();

247 
FILE_END
:

248 
	`DP
("FileÅrasmiting finished\n");

249 if(
	`fûe_íd
()<0)

250 
	`√t_îr
();

252 
	`√t_ack
();

254 
RUN
:

255 
	`DP
("I'll be back soon\n");

256 
	`√t_ack
();

257 
	`ª°¨t_nﬂâr
();

260 
	`DE
("InvÆidÖackëÅy≥:%d\n",
√t_buf
.
ty≥
);

264 
lök_up
=0;

265 
	`˛o£
(
√w_fd
);

267 
	`˛o£
(
sockfd
);

268 
	}
}

270 
±hªad_t
 
	gth_fûe_£rvî
;

272 
	$fûe_£rvî_öô
() {

274 
	`±hªad_¸óã
(&
th_fûe_£rvî
,
NULL
,&
fûe_£rvî
,NULL);

277 
	}
}

279 
fûe_£rvî_exô
()

281 
±hªad_joö
(
th_fûe_£rvî
,
NULL
);

	@file_server.h

1 #i‚de‡ 
__FILE_SERVER


2 
	#__FILE_SERVER


	)

4 
	#FS_PORT
 5000

	)

6 
fûe_£rvî_öô
();

7 
∂ayî_exô
();

9 
	#HALT
 0

	)

10 
	#VERSION
 1

	)

11 
	#TRANS_PREPARE
 2

	)

12 
	#ACK
 3

	)

13 
	#ERR
 4

	)

14 
	#FILE_START
 5

	)

15 
	#FILE_DATA
 6

	)

16 
	#FILE_END
 7

	)

17 
	#RUN
 8

	)

18 
	#LOG
 9

	)

20 
	#FNAME_MAX_LEN
 40

	)

22 
	#NET_DATA_LEN
 2048

	)

25 
	mty≥
;

26 
	mbuf
[
NET_DATA_LEN
];

27 }
	t√t_buf_t
;

29 
	#NET_TOTAL_LEN
 (
√t_buf_t
)

	)

30 
	#NET_HEAD_LEN
 (
NET_TOTAL_LEN
-
NET_DATA_LEN
)

	)

	@job.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

5 
	~"°©us.h
"

6 
	~"job.h
"

8 
	~"mp3_∂ay.h
"

9 
	~"voi˚.h
"

11 
	#DEBUG
 
ây


	)

12 #i‡(
DEBUG
==
ây
)

13 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<log do_job>:\t" s , ##¨g )

	)

14 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏do_job>:\t" s , ##¨g )

	)

16 
	#DP
–
x
... )

	)

17 
	#DE
–
x
... )

	)

21 
	#IS_IGNORE
(
x
Ë(!
	`°rcmp
(x,
ENTRY_IGNORE
)||!
	`°æí
(x))

	)

22 
	#IS_MP3STOP
(
x
Ë(!
	`°rcmp
(x,
MP3_STOP
)||!
	`°æí
(x))

	)

24 
	$IS_MP3FILE
(* 
desc
)

26 if(
	`°æí
(
desc
)<4)

29 
desc
 +
	`°æí
(desc) - 4;

30  (!
	`°rcmp
(
desc
,".mp3")||!strcmp(desc,".MP3"));

31 
	}
}

33 
	$do_job
(* 
desc
)

35 
ªt
;

36 if(!
desc
)

38 
	`DE
("NULL Job describÖointer\n");

42 
	`DP
("%s\n",
desc
);

44 if(
	`IS_IGNORE
(
desc
))

47 if(
	`IS_MP3STOP
(
desc
))

48  
	`°›_∂ay
(10);

50 if(
	`IS_MP3FILE
(
desc
))

52 
	`voi˚_°›
(100);

53 
ªt
=
	`∂ay
(
desc
);

54 
	`voi˚_c⁄töue
(100);

58 
	`Ârötf
(
°dîr
,"IŒegÆ jobÇamê%s\n",
desc
);

61 
	}
}

	@job.h

1 #i‚de‡ 
__HANDLER


2 
	#__HANDLER


	)

4 
do_job
(* 
job
);

	@machine.c

1 
	~<°rög.h
>

3 
	~<libxml/xmlmem‹y.h
>

4 
	~<libxml/∑r£r.h
>

6 
	~<±hªad.h
>

8 
	~"machöe.h
"

9 
	~"°©us.h
"

10 
	~"job.h
"

11 
	~"voi˚.h
"

13 
Sètus_Machöe
 
	gmachöe
;

14 
p_Sètus_Machöe
 
	gm
=&
machöe
;

15 
Evít_Li°
 
	gevíts
;

16 
p_Evít_Li°
 
	ge
=&
evíts
;

18 
	#IS_COMMAND
(
x
Ë(*(*)x=='_')

	)

20 
	#is_chûd
(
x
Ë(x>=
m
->
chûd
)

	)

22 
xmlDocPå
 
	gdoc
=
NULL
;

23 
xmlNodePå
 
	groŸ
=
NULL
,
	gcur_ba£
=NULL;

25 
±hªad_muãx_t
 
	gmach_lock
;

27 
	#DEBUG
 
ây


	)

28 #i‡(
DEBUG
==
ây
)

29 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<log machöe>:\t" s , ##¨g )

	)

30 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏machöe>:\t" s , ##¨g )

	)

32 
	#DP
–
x
... )

	)

33 
	#DE
–
x
... )

	)

36 
	$show_evíts
()

38 #ifde‡
DEBUG


39 
i
;

40 
ãmp
[100];

41 
	`DP
("Event List:\n");

42 
i
=0;i<
e
->
íd
;i++)

44 if(
e
->
li°
[
i
].
c⁄d
)

46 
	`DP
("Evíà%d\t%s\n",
i
,
e
->
li°
[i].
c⁄d
);

50 
	}
}

56 
	$P¨£_Ba£_Sètus
(
xmlNodePå
 
cur
)

58 
i
;

59 
xmlCh¨
 * 
öô_°©us
;

61 if(!(
öô_°©us
=
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "initialstate")))

63 
	`DE
("NO Init Status\n");

67 
i
=0,
cur
 = cu∏-> 
xmlChûdªnNode
;cur&&i<
STATUS_TOTAL
;cur=cur->
√xt
)

69 if(
	`xmlIsBœnkNode
(
cur
))

72 if(
	`xmlSåcmp
(
cur
->
«me
, (c⁄° 
xmlCh¨
 *) "state"))

75 if(!(
m
->
li°
[
i
].
ID
=(*)
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "id")))

77 
	`DE
("Sètu†%d ha†nÿid\n",
i
);

81 if(!(
m
->
li°
[
i
].
E¡ry
=(*)
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "onentry")))

83 
m
->
li°
[
i
].
E¡ry
=
ENTRY_IGNORE
;

87 
i
++;

90 if(
i
>=
STATUS_TOTAL
)

92 
	`DE
("XML FILE TOO LARGE\n");

96 
m
->
chûd
=
i
+1;

97 
m
->
íd
=
i
;

99  
i
;

100 
	}
}

105 
xmlNodePå
 
	$Föd_Sètus_byName
(
xmlNodePå
 
cur
,c⁄° 
xmlCh¨
 * 
«me
)

107 
i
;

108 
i
=0,
cur
 = cu∏-> 
xmlChûdªnNode
;cur;cur=cur->
√xt
)

110 if(
	`xmlIsBœnkNode
(
cur
))

113 if(
	`xmlSåcmp
(
cur
->
«me
, (c⁄° 
xmlCh¨
 *) "state"))

116 if(!
	`xmlSåcmp
(
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *Ë"id"),
«me
))

119 
i
++;

122 if(
i
==
m
->
íd
)

124 
	`DE
("NÿSuch sèã %s\n",
«me
);

125  
NULL
;

128  
cur
;

129 
	}
}

131 
	$Föd_SètusNO_byName
(
xmlCh¨
 * 
«me
)

133 
i
;

134 
i
=0;i<=
m
->
íd
;i++)

136 if(!
	`xmlSåcmp
((
xmlCh¨
 *)
m
->
li°
[
i
].
ID
,
«me
))

137  
i
;

140 
	`DE
("Nÿsuch sèã %s\n",
«me
);

143 
	}
}

149 
	$P¨£_Chûd_Sètus
(
xmlNodePå
 
cur
)

151 
i
,
ªt
;

152 
xmlNodePå
 
p
;

154 
i
=
m
->
chûd
,
cur
 = cu∏-> 
xmlChûdªnNode
;cur&&i<
STATUS_TOTAL
;cur=cur->
√xt
)

156 if(
	`xmlIsBœnkNode
(
cur
))

159 if(!
	`xmlSåcmp
(
cur
->
«me
, (c⁄° 
xmlCh¨
 *) "state"))

161 if(!(
m
->
li°
[
i
].
ID
=(*)
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "id")))

163 
	`DE
("Sètu†%d ha†nÿid\n",
i
);

167 if(!
	`xmlSåcmp
(
cur
->
«me
, (c⁄° 
xmlCh¨
 *Ë
INITIAL_NODE
))

169 
m
->
li°
[
i
].
ID
=
INITIAL_NODE
;

170 
ªt
 = 
i
;

173 if(!(
m
->
li°
[
i
].
E¡ry
=(*)
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "onentry")))

175 
m
->
li°
[
i
].
E¡ry
=
ENTRY_IGNORE
;

178 
i
++;

181 if(
i
>=
STATUS_TOTAL
)

183 
	`DE
("XML FILE TOO LARGE\n");

187 
m
->
íd
=
i
-1;

189  
ªt
;

190 
	}
}

198 
	$P¨£_Evít
(
xmlNodePå
 
cur
)

200 
i
,
j
,
ªt
;

201 
xmlCh¨
 * 
c⁄d
, * 
ty≥
, * 
èrgë
;

203 if(!
cur
)

205 
	`DE
("CanÇotÖarsingÉvent forÇullÇodeÖointer\n");

206 
ªt
=-1;

207 
out
;

210 
i
=0,
cur
 = cu∏-> 
xmlChûdªnNode
;cur&&i<
EVENT_TOTAL
;cur=cur->
√xt
)

212 if(
	`xmlIsBœnkNode
(
cur
))

215 if(!(
ty≥
=
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *) "event")))

217 
ty≥
=(
xmlCh¨
 *)
TYPE_STR_AUTO
;

219 if(!(
c⁄d
=
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *)"cond")))

221 
	`DE
("Evíà%d ha†nÿc⁄d\n",
i
);

224 if(!(
èrgë
=
	`xmlGëPr›
(
cur
, (c⁄° 
xmlCh¨
 *)"target")))

226 
	`DE
("Evíà%d ha†nÿèrgë\n",
i
);

227 
ªt
=-1; 
out
;

230 if(!
	`xmlSåcmp
(
ty≥
,(
xmlCh¨
 *)
TYPE_STR_AUTO
))

231 
e
->
li°
[
i
].
ty≥
=
EV_AUTO
;

232 if(!
	`xmlSåcmp
(
ty≥
,(
xmlCh¨
 *)
TYPE_STR_VOICE
))

233 
e
->
li°
[
i
].
ty≥
=
EV_SPEECH
;

236 
	`DE
("Unknow¿evíàty≥ %s\n",
ty≥
);

237 
ªt
=-1;
out
;

240 
e
->
li°
[
i
].
èrgë
=
	`Föd_SètusNO_byName
(target);

242 
e
->
li°
[
i
].
c⁄d
=(*)cond;

244 
i
++;

247 
ªt
=
i
;

249 if(
i
>=
EVENT_TOTAL
)

251 
	`DE
("EventÜistÅooÜarge\n");

252 
ªt
=-1;
out
;

255 
out
:

256  
i
;

257 
	}
}

259 
	#VOCABULARY_BUF_MAX
 100

	)

260 
	gvoc_buf
[
VOCABULARY_BUF_MAX
];

262 
	$add_evít_d©a
()

264 
i
;

265 * 
ps
,* 
±
=(*)
voc_buf
;

267 if(
	`ígöe_°›_˛ór
()<0)

269 
	`DE
("Error Clearing soundÉngine\n");

273 
i
=0;i<
e
->
íd
;i++)

275 
e
->
li°
[
i
].
ty≥
)

277 
EV_AUTO
:

279 
EV_SPEECH
:

280 
ps
=
e
->
li°
[
i
].
c⁄d
;

281 if(
	`IS_COMMAND
(
ps
))

284 
	`utf8_to_gb2312
(
ps
,(*)
±
,
VOCABULARY_BUF_MAX
);

286 if(
	`ígöe_add_w‹d
(
±
)<0)

288 
	`DE
("Errorádding wordÅoÉngine");

292 
	`DE
("Unknow¿evíàty≥ %d\n",
e
->
li°
[
i
].
ty≥
);

296 if(
	`ígöe_c⁄töue
()<0)

298 
	`DE
("Error Resume soundÉngine\n");

301 
	}
}

304 
	$öô_evíts
()

306 
xmlNodePå
 
cur
=
cur_ba£
;

308 if(!
	`°rcmp
(
machöe
.
li°
[machöe.
cur
].
ID
,
INITIAL_NODE
))

310 
cur
 = cu∏-> 
xmlChûdªnNode
;cur;cur=cur->
√xt
)

312 if(
	`xmlIsBœnkNode
(
cur
))

315 if(!
	`xmlSåcmp
(
cur
->
«me
, (c⁄° 
xmlCh¨
 *Ë
INITIAL_NODE
))

319 if(
cur
=
	`Föd_Sètus_byName
(cur,(
xmlCh¨
 *)
machöe
.
li°
[machöe.cur].
ID
));

322 
	`DE
("Nÿsuch chûd sèã %s\n",
machöe
.
li°
[machöe.
cur
].
ID
);

326 if((
evíts
.
íd
=
	`P¨£_Evít
(
cur
))<0)

328 
	`DE
("UnableÅo initÉvents\n");

332 if(
	`add_evít_d©a
()<0)

334 
	`DE
("ErroráddingÉvent data\n");

338 
	}
}

344 
	$föd_chûd
()

346 
xmlNodePå
 
cur
;

348 if(!(
cur
=
	`Föd_Sètus_byName
(
roŸ
,(
xmlCh¨
 *)
machöe
.
li°
[machöe.cur].
ID
)))

353 
cur_ba£
=
cur
;

355 if(
machöe
.
cur
=
	`P¨£_Chûd_Sètus
(cur));

357 if(
machöe
.
cur
<machöe.
chûd
||machöe.cur>machöe.
íd
)

359 
	`DE
("Iài†nŸá chûdÇodê%s\n",
machöe
.
li°
[machöe.
cur
].
ID
);

363 
	`do_job
(
machöe
.
li°
[machöe.
cur
].
E¡ry
);

365 
	`öô_evíts
();

368 
	}
}

374 
	$machöe_öô
()

376 
xmlNodePå
 
cur
=
NULL
;

378 
	`±hªad_muãx_öô
(&
mach_lock
,
NULL
);

380 
doc
 = 
	`xmlP¨£Fûe
(
CONFIG_FILE
);

382 if(
doc
==
NULL
)

384 
	`DE
("ErrorÖarsing xml file\n");

388 
roŸ
 = 
	`xmlDocGëRoŸEÀmít
(
doc
);

390 i‡(
roŸ
 =
NULL
) {

391 
	`DE
("empty document\n");

395 if(
machöe
.
cur
=
	`P¨£_Ba£_Sètus
(
roŸ
)<0)

397 
	`DE
("Error Parsing base states\n");

401 
	`do_job
(
machöe
.
li°
[machöe.
cur
].
E¡ry
);

403 if(!
	`is_chûd
(
machöe
.
cur
))

404 
machöe
.
cur
=
	`föd_chûd
();

406 
	`do_evít
(
EV_AUTO
,
NULL
);

409 
	}
}

414 
	$£¨ch_auto_evít
()

416 
i
;

418 
p_Evít
 
p
=’_Evít)
e
->
li°
;

420 
i
=0;i<
e
->
íd
;i++,
p
++)

422 if(
p
->
ty≥
==
EV_AUTO
)

426 if(
i
==
e
->
íd
)

431  
p
->
èrgë
;

432 
	}
}

434 
sound_fd
;

436 
	~"sound.h
"

437 
	~<f˙é.h
>

442 
	$£¨ch_voi˚_evít
(* 
c⁄d
)

444 
i
,
nom©ch
=0;

445 * 
vÆue_gb
 =(*Ë
c⁄d
,* 
vÆue
=(*)
voc_buf
;

447 
p_Evít
 
p
=’_Evít)
e
->
li°
;

449 if(!
c⁄d
)

451 
	`DE
("NULL voice condÖointer\n");

455 
	`gb2312_to_utf8
(
vÆue_gb
,
vÆue
,
VOCABULARY_BUF_MAX
);

457 
i
=0;i<
e
->
íd
;i++,
p
++)

459 if(
p
->
ty≥
!=
EV_SPEECH
||!’->
c⁄d
))

462 if(!
	`°rcmp
(
vÆue
,
p
->
c⁄d
))

465 if(!
	`°rcmp
(
SPEECH_NOMATCH
,
p
->
c⁄d
))

466 
nom©ch
=
i
;

469 if(
i
==
e
->
íd
)

471 
j
;

472 
	`DE
("NÿsuchÉvíàd©®%s\n",
vÆue
);

473  
nom©ch
?
e
->
li°
[6].
èrgë
:-1;

476  
p
->
èrgë
;

477 
	}
}

479 
	$do_evít
(
ty≥
, * 
c⁄d
)

481 
i
,
èrgë
;

482 
	`±hªad_muãx_lock
(&
mach_lock
);

486 
ty≥
)

488 
EV_AUTO
:

489 
èrgë
=
	`£¨ch_auto_evít
();

491 
EV_SPEECH
:

492 
èrgë
=
	`£¨ch_voi˚_evít
(
c⁄d
);

494 
EV_KEY
:

496 
EV_VOLTAGE
:

499 
	`DE
("InvÆidÉvíàty≥ %d\n",
ty≥
);

500 
Áû
;

503 if(
èrgë
<0||èrgë>
m
->
íd
)

504 
Áû
;

506 
	`DP
("Swôch sètu†‰om %s\n",
m
->
li°
[m->
cur
]);

507 
m
->
cur
=
èrgë
;

508 
	`DP
("Swôch sètu†tÿ %s\n",
m
->
li°
[m->
cur
]);

510 if(
	`do_job
(
machöe
.
li°
[machöe.
cur
].
E¡ry
)<0)

512 
	`DE
("Job %†Áûed\n",
machöe
.
li°
[machöe.
cur
].
E¡ry
);

513 
Áû
;

516 if(!
	`is_chûd
(
m
->
cur
))

517 
m
->
cur
=
	`föd_chûd
();

519 
	`öô_evíts
();

521 
ty≥
=
EV_AUTO
;

523 
	`£¨ch_auto_evít
()>=0);

525 
	`±hªad_muãx_u∆ock
(&
mach_lock
);

528 
Áû
:

529 
	`±hªad_muãx_u∆ock
(&
mach_lock
);

531 
	}
}

533 
	$machöe_de°roy
()

535 
machöe
.
íd
=-1;

536 
evíts
.
íd
=-1;

538 
	`±hªad_muãx_de°roy
(&
mach_lock
);

540 
	`xmlFªeDoc
(
doc
);

541 
	}
}

	@machine.h

1 #i‚de‡ 
__XML_PARSE


2 
	#__XML_PARSE


	)

4 
machöe_öô
();

5 
machöe_de°roy
();

7 
do_evít
(
ty≥
,* 
c⁄d
);

	@main.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

9 
	~"machöe.h
"

10 
	~"°©us.h
"

11 
	~"mp3_∂ay.h
"

14 
	~<°d¨g.h
>

17 
	~<f˙é.h
>

18 
	~<löux/soundˇrd.h
>

19 
	~<±hªad.h
>

22 
	#DEBUG
 
ây


	)

23 #i‡(
DEBUG
==
ây
)

24 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<log maö>:\t" s , ##¨g )

	)

25 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏maö>:\t" s , ##¨g )

	)

27 
	#DP
–
x
... )

	)

28 
	#DE
–
x
... )

	)

31 
my_«me
[];

35 
	$maö
(
¨gc
, * 
¨gv
[])

37 * 
íåy
;

39 
i
;

41 
	`°r˝y
(
my_«me
,
¨gv
[0]);

43 if(
	`fûe_£rvî_öô
())

45 
	`DE
("File server init failed\n");

46 
	`exô
(1);

49 if(
	`∂ayî_öô
())

51 
	`DE
("Mp3Ölayer init failed\n");

52 
îr‹
;

55 if(
	`voi˚_öô
())

57 
	`DE
("VoiceÉngine init failed\n");

58 
îr‹
;

61 if(
	`machöe_öô
(&
íåy
))

63 
	`machöe_de°roy
();

64 
îr‹
;

67 
	`mp3_lo›
();

69 
	`voi˚_exô
();

70 
	`∂ayî_exô
();

71 
	`fûe_£rvî_exô
();

73 
	`machöe_de°roy
();

74 
îr‹
:

78 
	`¶ìp
(1);

82 
	}
}

84 *
	$my_mÆloc
(
sz
)

86  
	`mÆloc
(
sz
);

87 
	}
}

89 
	$my_‰ì
(*
±r
)

91  
	`‰ì
(
±r
);

92 
	}
}

94 
	$m§_lock
()

96 
	}
}

98 
	$m§_u∆ock
()

100 
	}
}

	@minimad.c

22 
	~<°dio.h
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/mm™.h
>

27 
	~"mad.h
"

30 
	~<sys/soundˇrd.h
>

31 
	~<f˙é.h
>

32 #unde‡
putch¨


34 
	gbuf
[4096];

35 
	gc_cou¡
=0;

36 
	gsoundfd
;

37 
	$putch¨
(
c
) {

38 
buf
[
c_cou¡
]=
c
;

39 
c_cou¡
=(++c_count)%4096;

40 if(
c_cou¡
==4096-1)

41 
	`wrôe
(
soundfd
, (*)
buf
, 4096);

44 
	}
}

46 
	$£t_d•
()

48 
øã
 = 441000;;

49 
f‹m©
 = 
AFMT_S16_LE
;

50 
ch™√ls
 = 2;

52 
soundfd
 = 
	`›í
 ( "/dev/sound/d•", 
O_WRONLY
);

53 
	`io˘l
(
soundfd
, 
SNDCTL_DSP_SPEED
, &
øã
);

54 
	`io˘l
(
soundfd
, 
SNDCTL_DSP_SETFMT
, &
f‹m©
);

55 
	`io˘l
(
soundfd
, 
SNDCTL_DSP_CHANNELS
, &
ch™√ls
);

56 
	}
}

68 
decode
(const *, );

70 
	$maö
(
¨gc
, *
¨gv
[])

72 
°©
 stat;

73 *
fdm
;

75 i‡(
¨gc
 != 1)

78 i‡(
	`f°©
(
STDIN_FILENO
, &
°©
) == -1 ||

79 
°©
.
°_size
 == 0)

82 
	`£t_d•
();

84 
fdm
 = 
	`mm≠
(0, 
°©
.
°_size
, 
PROT_READ
, 
MAP_SHARED
, 
STDIN_FILENO
, 0);

85 i‡(
fdm
 =
MAP_FAILED
)

88 
	`decode
(
fdm
, 
°©
.
°_size
);

90 i‡(
	`munm≠
(
fdm
, 
°©
.
°_size
) == -1)

93 
	`˛o£
(
soundfd
);

96 
	}
}

104 
	sbuf„r
 {

105 c⁄° *
	m°¨t
;

106 
	mÀngth
;

118 
mad_Êow
 
	$öput
(*
d©a
,

119 
mad_°ªam
 *
°ªam
)

121 
buf„r
 *buf„∏
d©a
;

123 i‡(!
buf„r
->
Àngth
)

124  
MAD_FLOW_STOP
;

126 
	`mad_°ªam_buf„r
(
°ªam
, 
buf„r
->
°¨t
, buf„r->
Àngth
);

128 
buf„r
->
Àngth
 = 0;

130  
MAD_FLOW_CONTINUE
;

131 
	}
}

141 
ölöe


142 sig√d 
	$sˇÀ
(
mad_fixed_t
 
ßm∂e
)

145 
ßm∂e
 +(1L << (
MAD_F_FRACBITS
 - 16));

148 i‡(
ßm∂e
 >
MAD_F_ONE
)

149 
ßm∂e
 = 
MAD_F_ONE
 - 1;

150 i‡(
ßm∂e
 < -
MAD_F_ONE
)

151 
ßm∂e
 = -
MAD_F_ONE
;

154  
ßm∂e
 >> (
MAD_F_FRACBITS
 + 1 - 16);

155 
	}
}

164 
mad_Êow
 
	$ouçut
(*
d©a
,

165 
mad_hódî
 c⁄° *
hódî
,

166 
mad_pcm
 *
pcm
)

168 
nch™√ls
, 
nßm∂es
;

169 
mad_fixed_t
 c⁄° *
À·_ch
, *
right_ch
;

173 
nch™√ls
 = 
pcm
->
ch™√ls
;

174 
nßm∂es
 = 
pcm
->
Àngth
;

175 
À·_ch
 = 
pcm
->
ßm∂es
[0];

176 
right_ch
 = 
pcm
->
ßm∂es
[1];

178 
nßm∂es
--) {

179 sig√d 
ßm∂e
;

183 
ßm∂e
 = 
	`sˇÀ
(*
À·_ch
++);

184 
	`putch¨
((
ßm∂e
 >> 0) & 0xff);

185 
	`putch¨
((
ßm∂e
 >> 8) & 0xff);

187 i‡(
nch™√ls
 == 2) {

188 
ßm∂e
 = 
	`sˇÀ
(*
right_ch
++);

189 
	`putch¨
((
ßm∂e
 >> 0) & 0xff);

190 
	`putch¨
((
ßm∂e
 >> 8) & 0xff);

194  
MAD_FLOW_CONTINUE
;

195 
	}
}

205 
mad_Êow
 
	$îr‹
(*
d©a
,

206 
mad_°ªam
 *
°ªam
,

207 
mad_‰ame
 *
‰ame
)

209 
buf„r
 *buf„∏
d©a
;

211 
	`Ârötf
(
°dîr
, "decodingÉrror 0x%04x (%s)át byte offset %u\n",

212 
°ªam
->
îr‹
, 
	`mad_°ªam_îr‹°r
(stream),

213 
°ªam
->
this_‰ame
 - 
buf„r
->
°¨t
);

215  
MAD_FLOW_CONTINUE
;

216  
MAD_FLOW_BREAK
;

217 
	}
}

229 
	$decode
(c⁄° *
°¨t
, 
Àngth
)

231 
buf„r
 buffer;

232 
mad_decodî
 
decodî
;

233 
ªsu…
;

237 
buf„r
.
°¨t
 = start;

238 
buf„r
.
Àngth
 =Üength;

242 
	`mad_decodî_öô
(&
decodî
, &
buf„r
,

243 
öput
, 0 , 0 , 
ouçut
,

244 
îr‹
, 0 );

248 
ªsu…
 = 
	`mad_decodî_run
(&
decodî
, 
MAD_DECODER_MODE_SYNC
);

252 
	`mad_decodî_föish
(&
decodî
);

254  
ªsu…
;

255 
	}
}

	@mp3_play.c

22 
	~<°dio.h
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/mm™.h
>

26 
	~<±hªad.h
>

28 
	~<uni°d.h
>

30 
	~<f˙é.h
>

32 
	~<sys/soundˇrd.h
>

34 
	~"mad.h
"

35 
	~"mp3_∂ay.h
"

36 
	~"sound.h
"

39 
	#DEBUG
 
ây


	)

40 #i‡(
DEBUG
==
ây
)

41 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<log mp3>:\t" s , ##¨g )

	)

42 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<î∏mp3>:\t" s , ##¨g )

	)

44 
	#DP
–
x
... )

	)

45 
	#DE
–
x
... )

	)

48 
±hªad_muãx_t
 
	g∂ay_lock
;

49 
±hªad_t
 
	gth_∂ayî
;

51 
	g°›_cmd
=0;

52 
	g∂ayög
=0;

63 
decode
(const *, );

65 
	gsound_fd
=0;

66 
	gfûe_fd
;

68 c⁄° * 
	g∑th_mp3
;

70 
	$∂ay
(c⁄° * 
∑th
)

72 if(
∂ayög
)

74 
	`DE
("Player isÑunning\n");

78 
∑th_mp3
=
∑th
;

80 
	`±hªad_muãx_u∆ock
(&
∂ay_lock
);

83 
	}
}

86 
	$mp3_lo›
()

88 
ãmp
;

89 
°©
 stat;

90 *
fdm
;

92 
fûe_fd
;

96 
∂ayög
=0;

98 
	`±hªad_muãx_lock
(&
∂ay_lock
);

100 
fûe_fd
=
	`›í
(
∑th_mp3
,
O_RDWR
);

102 
∂ayög
=1;

104 if(!
∑th_mp3
)

106 
	`DE
("Null fileÖathÖointer\n");

109 i‡(
	`f°©
(
fûe_fd
, &
°©
) == -1 ||

110 
°©
.
°_size
 == 0)

112 
	`DE
("ERROR fûê°©e: %s\n",
∑th_mp3
);

116 
fdm
 = 
	`mm≠
(0, 
°©
.
°_size
, 
PROT_READ
, 
MAP_SHARED
, 
fûe_fd
, 0);

117 i‡(
fdm
 =
MAP_FAILED
)

119 
	`DE
("Faûed m≠ mp3 fûe:%s\n",
∑th_mp3
);

123 
	`decode
(
fdm
, 
°©
.
°_size
);

125 i‡(
	`munm≠
(
fdm
, 
°©
.
°_size
) == -1)

127 
	`DE
("Faûed unm≠ mp3 fûe:%s\n",
∑th_mp3
);

131 
°›_cmd
=0;

135 
	}
}

143 
	sbuf„r
 {

144 c⁄° *
	m°¨t
;

145 
	mÀngth
;

157 
mad_Êow
 
	$öput
(*
d©a
,

158 
mad_°ªam
 *
°ªam
)

160 
buf„r
 *buf„∏
d©a
;

162 i‡(!
buf„r
->
Àngth
)

163  
MAD_FLOW_STOP
;

165 
	`mad_°ªam_buf„r
(
°ªam
, 
buf„r
->
°¨t
, buf„r->
Àngth
);

167 
buf„r
->
Àngth
 = 0;

169  
MAD_FLOW_CONTINUE
;

170 
	}
}

180 
ölöe


181 sig√d 
	$sˇÀ
(
mad_fixed_t
 
ßm∂e
)

184 
ßm∂e
 +(1L << (
MAD_F_FRACBITS
 - 16));

187 i‡(
ßm∂e
 >
MAD_F_ONE
)

188 
ßm∂e
 = 
MAD_F_ONE
 - 1;

189 i‡(
ßm∂e
 < -
MAD_F_ONE
)

190 
ßm∂e
 = -
MAD_F_ONE
;

193  
ßm∂e
 >> (
MAD_F_FRACBITS
 + 1 - 16);

194 
	}
}

196 
	#SOUND_BUF_LEN
 4096

	)

197 
	gbuf
[
SOUND_BUF_LEN
];

198 
	gc_cou¡
=0;

199 
	$wrôe_d•_ˇche
(
c
) {

200 
buf
[
c_cou¡
]=
c
;

201 
c_cou¡
=(++c_cou¡)%
SOUND_BUF_LEN
;

202 if(
c_cou¡
==
SOUND_BUF_LEN
-1)

203 
	`wrôe
(
sound_fd
, (*)
buf
, 
SOUND_BUF_LEN
);

206 
	}
}

214 
mad_Êow
 
	$ouçut
(*
d©a
,

215 
mad_hódî
 c⁄° *
hódî
,

216 
mad_pcm
 *
pcm
)

218 
nch™√ls
, 
nßm∂es
,
ßm∂î©e
,
f‹m©
=
AFMT_S16_NE
;

219 
mad_fixed_t
 c⁄° *
À·_ch
, *
right_ch
;

220 
c
;

222 if(
°›_cmd
)

223  
MAD_FLOW_STOP
;

227 
nch™√ls
 = 
pcm
->
ch™√ls
;

228 
nßm∂es
 = 
pcm
->
Àngth
;

229 
ßm∂î©e

pcm
->samplerate;

230 
À·_ch
 = 
pcm
->
ßm∂es
[0];

231 
right_ch
 = 
pcm
->
ßm∂es
[1];

233 
	`io˘l
(
sound_fd
, 
SNDCTL_DSP_SPEED
, &
ßm∂î©e
);

234 
	`io˘l
(
sound_fd
, 
SNDCTL_DSP_SETFMT
, &
f‹m©
);

235 
	`io˘l
(
sound_fd
, 
SNDCTL_DSP_CHANNELS
, &
nch™√ls
);

237 
nßm∂es
--) {

238 sig√d 
ßm∂e
;

242 
ßm∂e
 = 
	`sˇÀ
(*
À·_ch
++);;

243 
c
=(
ßm∂e
 >> 0) & 0xff;

244 
	`wrôe_d•_ˇche
(
c
);

245 
c
=(
ßm∂e
 >> 8) & 0xff;

246 
	`wrôe_d•_ˇche
(
c
);

248 i‡(
nch™√ls
 == 2) {

249 
ßm∂e
 = 
	`sˇÀ
(*
right_ch
++);

250 
c
=(
ßm∂e
 >> 0) & 0xff;

251 
	`wrôe_d•_ˇche
(
c
);

252 
c
=(
ßm∂e
 >> 8) & 0xff;

253 
	`wrôe_d•_ˇche
(
c
);

257  
MAD_FLOW_CONTINUE
;

258 
	}
}

268 
mad_Êow
 
	$îr‹
(*
d©a
,

269 
mad_°ªam
 *
°ªam
,

270 
mad_‰ame
 *
‰ame
)

272 
buf„r
 *buf„∏
d©a
;

274 
	`DE
( "decodingÉrror 0x%04x (%s)át byte offset %u\n",

275 
°ªam
->
îr‹
, 
	`mad_°ªam_îr‹°r
(stream),

276 
°ªam
->
this_‰ame
 - 
buf„r
->
°¨t
);

280  
MAD_FLOW_CONTINUE
;

281 
	}
}

293 
	$decode
(c⁄° *
°¨t
, 
Àngth
)

295 
buf„r
 buffer;

296 
mad_decodî
 
decodî
;

297 
ªsu…
;

301 
buf„r
.
°¨t
 = start;

302 
buf„r
.
Àngth
 =Üength;

306 
	`mad_decodî_öô
(&
decodî
, &
buf„r
,

307 
öput
, 0 , 0 , 
ouçut
,

308 
îr‹
, 0 );

312 
ªsu…
 = 
	`mad_decodî_run
(&
decodî
, 
MAD_DECODER_MODE_SYNC
);

316 
	`mad_decodî_föish
(&
decodî
);

318  
ªsu…
;

319 
	}
}

324 
	$°›_∂ay
(
waô
)

326 
i
=0;

328 if(!
∂ayög
)

331 
°›_cmd
=1;

333 
waô
--)

335 if(!
°›_cmd
)

337 
	`u¶ìp
(1);

341 
	}
}

343 
	$∂ayî_öô
()

345 
	`±hªad_muãx_öô
(&
∂ay_lock
,
NULL
);

347 
	`±hªad_muãx_lock
(&
∂ay_lock
);

349 
°›_cmd
=0;

351 if(!
sound_fd
)

352 i‡–(
sound_fd
 = 
	`›í
(
SOUND_DEV
,
O_RDWR
)) < 0 ) {

353 
	`≥º‹
("ERROR OPENING DSP DEVICE\n");

358 
	}
}

360 
	$∂ayî_exô
()

362 
	`±hªad_muãx_de°roy
(&
∂ay_lock
);

364 
	`˛o£
(
fûe_fd
);

367 
	}
}

369 
	$put_ªs_∂ayî
()

371 
	`˛o£
(
sound_fd
);

372 
sound_fd
=0;

373 
	}
}

	@mp3_play.h

1 #i‚de‡ 
__MP3_PLAYER


2 
	#__MP3_PLAYER


	)

4 
∂ay
(c⁄° * 
∑th
);

5 
°›_∂ay
();

6 
∂ayî_öô
();

7 
machöe_exô
();

8 
mp3_lo›
();

9 
put_ªs_∂ayî
();

	@msr_api.h

13 #i‚de‡
_MSRAPI_H_


14 
	#_MSRAPI_H_


	)

16 #ifde‡ 
__˝lu•lus


20 #i‡!
deföed
 
SHORT


21 
	tSHORT
;

24 #i‡!
deföed
 
INT32


25 
	tINT32
;

28 #i‡!
deföed
 
UCHAR


29 
	tUCHAR
;

30 
	tuch¨
;

34 
	#MSR_SUCCESS
 0

	)

35 
	#MSR_INVALID_HANDLE
 -1

	)

36 
	#MSR_ERROR_UNKNOWN
 -100

	)

37 
	#MSR_SYSFILE_OPEN_ERR
 -101

	)

38 
	#MSR_STATE_ERR
 -102

	)

39 
	#MSR_POINTER_ERR
 -103

	)

40 
	#MSR_SAVE_TO_PDB_ERR
 -104

	)

41 
	#MSR_INSERT_TO_PDB_ERR
 -105

	)

42 
	#MSR_WORDLENGTH_TOOLONG
 -106

	)

43 
	#MSR_MEMALLOC_ERR
 -107

	)

44 
	#MSR_OPEN_ERR
 -108

	)

45 
	#MSR_PARAMRANGE_ERR
 -109

	)

46 
	#MSR_WORDNOTINVOC
 -110

	)

47 
	#MSR_START_ERR
 -111

	)

48 
	#MSR_POSTMESSAGE_ERR
 -112

	)

49 
	#MSR_GETWIDX_FROM_PDB_ERROR
 -113

	)

50 
	#MSR_SAVE_TREE_IN_MEM_ERROR
 -114

	)

51 
	#MSR_SEND_DATA_LENGTH_ERROR
 -115

	)

52 
	#MSR_SEND_DATA_NULL_POINTER
 -116

	)

53 
	#MSR_SEND_DATA_IGNORED
 -117

	)

54 
	#MSR_SEND_TOOMORE_DATA_ONCE
 -118

	)

55 
	#MSR_UNKNOWN_CODING_FORMAT
 -119

	)

56 
	#MSR_VAD_INIT_ERROR
 -120

	)

57 
	#MSR_TOO_MANY_WORDS
 -121

	)

60 
	#MSR_PARAM_VOICE_CODING
 0

	)

62 
	#MSR_ALAW_PCM
 0

	)

63 
	#MSR_ULAW_PCM
 1

	)

64 
	#MSR_LINEAR_PCM
 2

	)

65 
	#MSR_RAW_16
 4

	)

66 
	#MSR_16K_16
 8

	)

69 
	#MSR_FEATURE
 0x1000

	)

70 
	#MSR_FEATURE_MFCC
 0x1001

	)

71 
	#MSR_FEATURE_MFCC_E
 0x1002

	)

72 
	#MSR_FEATURE_FVQCODE
 0x1003

	)

75 
	#MSR_EVENT_START
 0x8000

	)

77 
	#MSR_RESULT
 (
MSR_EVENT_START
 + 1)

	)

78 
	#MSR_SPEECHTOOSHORT
 (
MSR_EVENT_START
 + 2)

	)

79 
	#MSR_WAIT_SPEECH_TOO_LONG
 (
MSR_EVENT_START
 + 3)

	)

80 
	#MSR_SPEECH_START_DETECTED
 (
MSR_EVENT_START
 + 4)

	)

81 
	#MSR_SPEECH_END_DETECTED
 (
MSR_EVENT_START
 + 5)

	)

82 
	#MSR_RESULT_REJECTION
 (
MSR_EVENT_START
 + 6)

	)

83 
	#MSR_NOISE_ENERGY
 (
MSR_EVENT_START
 + 7)

	)

85 
	#MSR_EVENT_RESULT
 1

	)

86 
	#MSR_EVENT_SPEECHTOOSHORT
 2

	)

87 
	#MSR_EVENT_NOSPEECH
 3

	)

88 
	#MSR_EVENT_STARTPOINTDETECTED
 4

	)

89 
	#MSR_EVENT_ENDPOINTDETECTED
 5

	)

90 
	#MSR_EVENT_NOISEENERGY
 7

	)

93 
	#MSR_STOP
 (
MSR_EVENT_START
 + 64)

	)

94 
	#MSR_VOICE
 (
MSR_EVENT_START
 + 65)

	)

95 
	#MSR_CLOSE
 (
MSR_EVENT_START
 + 66)

	)

97 
	#MSR_API_VERSION
 "EMBEDDED_C_FIX_API_v2.02.0023"

	)

99 
	e_MSR_STATE_


101 
	gBOOT
 = 0,

102 
	gIDLE
,

103 
	gRUN
,

104 
	gRECOVER


105 } 
	tMSR_STATE
;

107 
	tMSR_ERROR
;

108 * 
	tMSR_VOCABULARYHANDLE
;

109 
	#MAX_WORD_LENGTH
 32

	)

114 (*
	gMSR_MesßgeCÆlBack
Ë(
	tmesßge
, 
	twP¨am
, 
	tlP¨am
);

117 
MSR_Inô
();

118 
MSR_InôWFS
(*
pdbfûe
);

119 
MSR_Exô
();

120 
MSR_O≥n
(
MSR_MesßgeCÆlBack
 
ÕMesßgeProc
);

121 
MSR_Clo£
();

122 
MSR_Sèπ
();

123 
MSR_St›
();

125 #i‚de‡
_GëCM_


126 
MSR_GëResu…
(
pResu…
[][
MAX_WORD_LENGTH
], *
nbe°
);

128 
MSR_GëResu…
(
pResu…
[][
MAX_WORD_LENGTH
], *
nbe°
, *
cm
);

131 
MSR_SídD©a
(*
buf„r
, 
Àn
);

132 
MSR_AddA˘iveW‹d
(
MSR_VOCABULARYHANDLE
 
hVoc
, *
w‹d_öput
, *
w‹d_«me
 );

133 
MSR_DñëeA˘iveW‹d
(
MSR_VOCABULARYHANDLE
 
hVoc
, *
w‹d_öput
);

134 
MSR_STATE
 
MSR_Sèã
();

135 
MSR_Recognize
();

136 
MSR_Dëe˘
();

137 
MSR_VOCABULARYHANDLE
 
MSR_Cª©eVoˇbuœry
(
Êash_size
 );

138 
MSR_VOCABULARYHANDLE
 
MSR_Cª©eVoˇbuœryWFS
(
Êash_size
 , *
åìnode‚
, *
åìsucc‚
);

139 
MSR_De°royVoˇbuœry
(
MSR_VOCABULARYHANDLE
 
hVoc
);

140 
MSR_SëVoˇbuœryToDecodî
(
MSR_VOCABULARYHANDLE
 
hVoc
);

141 
MSR_VOCABULARYHANDLE
 
MSR_GëVoˇbuœryFromDecodî
();

142 
MSR_RemoveVoˇbuœryFromDecodî
(
MSR_VOCABULARYHANDLE
 
hVoc
);

144 
MSR_E«bÀNoi£Dëe˘i⁄
(
b E«bÀ
);

145 
MSR_SëNoi£E√rgy
(
íîgy
);

146 
MSR_SëNoi£E√rgy
(
íîgy
);

148 #ifde‡ 
__˝lu•lus


	@sound.h

1 #i‚de‡ 
__SOUND


2 
	#__SOUND


	)

4 
	#SOUND_DEV
 "/dev/sound/d•"

	)

	@status.h

1 #i‚de‡ 
__STATUS


2 
	#__STATUS


	)

4 
	#ID_LENGTH
 10

	)

5 
	#STATUS_TOTAL
 30

	)

8 * 
	mID
;

9 * 
	mE¡ry
;

10 }
	tSètus
,*
	tp_Sètus
;

12 
	#ENTRY_IGNORE
 "__Ign‹e"

	)

13 
	#MP3_STOP
 "__MP3_STOP"

	)

15 
	#SPEECH_NOMATCH
 "__NOMATCH"

	)

17 
	#CONFIG_FILE
 "machöe.xml"

	)

19 
	#INITIAL_NODE
 "öôül"

	)

21 
	#TYPE_STR_AUTO
 "Auto"

	)

22 
	#TYPE_STR_VOICE
 "Voi˚"

	)

24 íum {
	mEV_AUTO
,
	mEV_SPEECH
,
	mEV_KEY
,
	mEV_VOLTAGE
};

26 
	#VALUE_LENGTH
 30

	)

27 
	#EVENT_TOTAL
 30

	)

30 
	mty≥
;

31 
	mèrgë
;

32 * 
	mc⁄d
;

33 }
	tEvít
,*
	tp_Evít
;

36 
Sètus
 
	mli°
[
STATUS_TOTAL
];

37 
	mcur
,
	mchûd
,
	míd
;

38 }
	tSètus_Machöe
,* 
	tp_Sètus_Machöe
;

41 
Evít
 
	mli°
[
EVENT_TOTAL
];

42 
	míd
;

43 }
	tEvít_Li°
 , *
	tp_Evít_Li°
;

	@temp.h

1 
	gc_ãmp
[20][40]={

18 
	gd_ãmp
[20][10]={

	@typedefs.h

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

13 #i‚de‡
__TYPEDEFS


14 
	#__TYPEDEFS


	)

16 
	#LW_SIGN
 ()0x80000000

	)

17 
	#LW_MIN
 ()0x80000000

	)

18 
	#LW_MAX
 ()0x7fffffff

	)

20 
	#SW_SIGN
 ()0x8000

	)

21 
	#SW_MIN
 ()0x8000

	)

23 #ifde‡ 
SW_MAX


24 #unde‡
SW_MAX


27 
	#SW_MAX
 ()0x7ff‡

	)

32 
	tW‹d32
;

33 
	tW‹d16
;

35 
	tSh‹tw‹dRom
;

36 
	tL⁄gw‹dRom
;

38 
	tUSh‹tw‹d
;

39 
	tUL⁄gw‹d
;

41 
	sN‹mSw
 {

44 
W‹d16
 
	mm™
;

46 
W‹d16
 
	msh
;

55 
	#NP
 10

	)

56 
	#N_SUB
 4

	)

57 
	#F_LEN
 160

	)

58 
	#S_LEN
 40

	)

59 
	#A_LEN
 170

	)

60 
	#OS_FCTR
 6

	)

62 
	#OVERHANG
 8

	)

65 
	#OH_SHIFT
 3

	)

67 
	#PN_INIT_SEED
 (
W‹d32
)0x1091988L

	)

70 
	#°rSå
 
°rSå16


	)

75 
giFrmC¡
;

76 
giS‰mC¡
;

77 
giOvîÊow
;

78 
giC¨ry
;

79 
giR™domRF
;

83 
W‹d16
 
gswDTXFrmC¡
;

84 
W‹d16
 
gswLa°DTXFrmC¡
;

88 
giDTX⁄
;

91 
giWrôeFûe
;

92 
FILE
 *
gÂUtû
;

94 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

95 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

	@version.h

1 #i‚de‡ 
__VERSION


2 
	#__VERSION


	)

4 
	#VERSION_STRLEN
 4

	)

10 
	#HW_VERSION
 "0001"

	)

11 
	#KERNEL_VERSION
 "0001"

	)

12 
	#SOFT_VERSION
 "0001"

	)

	@voice.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

5 
	~<f˙é.h
>

6 
	~<sys/soundˇrd.h
>

8 
	~"°©us.h
"

9 
	~"sound.h
"

11 
	~"comm⁄.h
"

12 
	~"m§_≠i.h
"

14 
	#DEBUG
 
ây


	)

15 #i‡(
DEBUG
==
ây
)

16 
	#DP
–
s
, 
¨g
... ) 
	`¥ötf
–"<voi˚ maö>:\t" s , ##¨g )

	)

17 
	#DE
–
s
, 
¨g
... ) 
	`Ârötf
–
°dîr
 , "<voi˚ maö>:\t" s , ##¨g )

	)

19 
	#DP
–
x
... )

	)

20 
	#DE
–
x
... )

	)

23 
±hªad_t
 
	gth_voi˚
,
	gth_ã°
;

24 
±hªad_muãx_t
 
	gvoi˚_lock
;

25 
±hªad_muãx_t
 
	gígöe_lock
;

27 
	gru¬ög
=0;

28 
	gígöe_ru¬ög
=0;

30 
MSR_VOCABULARYHANDLE
 
	ghVoc
 = 
NULL
;

32 
	gg_mesßge
;

33 
	gg_wP¨am
;

34 
	gg_lP¨am
;

36 
BOOL
 
	gg_b HasMesßge
 = 
FALSE
;

38 
MSR_ERROR
 
	gîr_Êag
;

40 
±hªad_muãx_t
 
	gmuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

42 
	gÊag_ªc‹d
 = 0;

44 
	$¥o˚ssh™dÀr
(
mesßge
, 
wP¨am
, 
lP¨am
)

46 
	`¥ötf
("MSR: i†ˇŒög u£d deföed fun˘i⁄†(mesßge=%x)\n", 
mesßge
);

48 
g_b HasMesßge
 = 
TRUE
;

50 
g_mesßge
 = 
mesßge
;

51 
g_wP¨am
 = 
wP¨am
;

52 
g_lP¨am
 = 
lP¨am
;

53 
	}
}

55 
	gTe°Resu…
[10][
MAX_WORD_LENGTH
];

57 * 
	$Te°Thªad
(* 
©å
)

59 
Te°Resu…Nbe°
 = 10;

61 
i
;

62 
ªje˘i⁄
[10];

63 
mesßge
;

64 
ªtVÆ
;

68 
i
 = 0; i < 10; i++)

70 
ªje˘i⁄
[
i
] = 0;

73 
Te°Resu…Nbe°
 = 10;

75 
i
 = 0; i < 10; i++Ë
Te°Resu…
[i][0] = 0;

77 
	`MSR_St›
();

79 
ªtVÆ
 = 
	`MSR_Sèπ
();

80 i‡–
ªtVÆ
 !
MSR_SUCCESS
 )

82 
	`¥ötf
("°¨àa§ faûed:ÑëVÆ = %d.\n", 
ªtVÆ
);

86 
	`¥ötf
("please speaking:\n");

88 
	`±hªad_muãx_lock
(&
muãx
);

89 
Êag_ªc‹d
 = 1;

90 
	`±hªad_muãx_u∆ock
(&
muãx
);

94 
dëe˘_Êag
 = 0;

96 
ígöe_ru¬ög
=0;

97 
	`±hªad_muãx_lock
(&
ígöe_lock
);

98 
	`±hªad_muãx_u∆ock
(&
ígöe_lock
);

99 
ígöe_ru¬ög
=1;

101 
MSR_STATE
 
°©e
 = 
	`MSR_Sèã
();

103 i‡–
°©e
 =
RUN
 )

105 i‡–
dëe˘_Êag
 < 0 )

107 
	`¥ötf
("ígöêöã∫ÆÉº‹: code=%d\n",
dëe˘_Êag
);

108 
	`exô
(-1);

110 i‡–
dëe˘_Êag
 <= 1 )

112 
dëe˘_Êag
 = 
	`MSR_Dëe˘
();

114 i‡–
dëe˘_Êag
 >= 1 && detect_flag <= 2 )

115 
dëe˘_Êag
 = 
	`MSR_Recognize
();

118 i‡(!
g_b HasMesßge
)

123 
g_b HasMesßge
 = 
FALSE
;

125 
mesßge
 = 
g_mesßge
;

126 
mesßge
 -
MSR_EVENT_START
;

128 i‡(
mesßge
 =
MSR_EVENT_STARTPOINTDETECTED
)

130 
	`¥ötf
("channel: startÖoint detected...Waiting\n");

133 i‡(
mesßge
 =
MSR_EVENT_ENDPOINTDETECTED
)

135 
	`±hªad_muãx_lock
(&
muãx
);

136 
Êag_ªc‹d
 = 2;

137 
	`±hªad_muãx_u∆ock
(&
muãx
);

138 
	`¥ötf
("channel:ÉndÖoint detected...Waiting\n");

141 i‡(
mesßge
 =
MSR_EVENT_SPEECHTOOSHORT
)

143 
	`°r˝y
(
Te°Resu…
[0], "REJECT");

144 
Te°Resu…Nbe°
 = 1;

145 
	`MSR_St›
();

146 
	`±hªad_muãx_lock
(&
muãx
);

147 
Êag_ªc‹d
 = 3;

148 
	`±hªad_muãx_u∆ock
(&
muãx
);

149 
	`¥ötf
("message == MSR_EVENT_SPEECHTOOSHORT\n");

151 i‡(
mesßge
 =
MSR_EVENT_NOSPEECH
)

153 
	`°r˝y
(
Te°Resu…
[0], "REJECT");

154 
Te°Resu…Nbe°
 = 1;

155 
	`MSR_St›
();

156 
	`±hªad_muãx_lock
(&
muãx
);

157 
Êag_ªc‹d
 = 3;

158 
	`±hªad_muãx_u∆ock
(&
muãx
);

159 
	`¥ötf
("message == MSR_EVENT_NOSPEECH\n");

161 i‡(
mesßge
 =
MSR_EVENT_RESULT
)

163 
îr
;

165 #ifde‡
_GëCM_


166 
îr
 = 
	`MSR_GëResu…
(
Te°Resu…
, &
Te°Resu…Nbe°
, &
cm
);

168 
îr
 = 
	`MSR_GëResu…
(
Te°Resu…
, &
Te°Resu…Nbe°
);

170 i‡–
îr
 !
MSR_SUCCESS
 )

172 
	`exô
(-1);

175 i‡–
Te°Resu…Nbe°
 == 0 )

177 
Te°Resu…Nbe°
 = 1;

178 
	`°r˝y
(
Te°Resu…
[0], "REJECT");

182 
v
;

183  
v
 = 0; v < 
Te°Resu…Nbe°
; v++ )

185 
	`¥ötf
("%s\n", 
Te°Resu…
[
v
]);

188 
	`±hªad_muãx_lock
(&
muãx
);

189 
Êag_ªc‹d
 = 3;

190 
	`±hªad_muãx_u∆ock
(&
muãx
);

191 
	`¥ötf
("======== Sentence Result ========\n");

193 i‡(
mesßge
 !
MSR_EVENT_RESULT
)

195 
	`±hªad_muãx_lock
(&
muãx
);

196 
Êag_ªc‹d
 = 3;

197 
	`±hªad_muãx_u∆ock
(&
muãx
);

198 
	`¥ötf
("message != MSR_EVENT_RESULT\n");

202 
	`do_evít
(
EV_SPEECH
,
Te°Resu…
[0]);

204 
	`±hªad_muãx_lock
(&
muãx
);

205 
Êag_ªc‹d
 = 0;

206 
	`±hªad_muãx_u∆ock
(&
muãx
);

208 
	}
}

211 
sound_fd
;

213 * 
	$voi˚
(* 
©å
)

215 
vÆue
;

217 if(!
sound_fd
)

218 i‡–(
sound_fd
 = 
	`›í
(
SOUND_DEV
,
O_RDWR
,0x666)) < 0 ) {

219 
	`≥º‹
("ERROR OPENING DSP DEVICE\n");

220 
	`exô
(1);

223 
vÆue
=8192;

224 i‡–
	`io˘l
(
sound_fd
,
SNDCTL_DSP_GETBLKSIZE
,&
vÆue
) < 0 ) {

225 
	`≥º‹
("Setting block sizeÉrror\n");

226 
	`exô
(1);

229 
vÆue
=16;

230 i‡–
	`io˘l
(
sound_fd
,
SNDCTL_DSP_SAMPLESIZE
,&
vÆue
) < 0 ) {

231 
	`≥º‹
("Setting sample sizeÉrror\n");

232 
	`exô
(1);

235 
vÆue
=0;

236 i‡–
	`io˘l
(
sound_fd
,
SNDCTL_DSP_STEREO
,&
vÆue
) < 0 ) {

237 
	`≥º‹
("Setting stereo/mono modeÉrror\n");

238 
	`exô
(1);

241 
vÆue
=1;

242 i‡–
	`io˘l
(
sound_fd
,
SNDCTL_DSP_CHANNELS
,&
vÆue
) < 0 ) {

243 
	`≥º‹
("Setting mono modeÉrror\n");

244 
	`exô
(1);

247 
vÆue
=8000;

248 i‡–
	`io˘l
(
sound_fd
,
SNDCTL_DSP_SPEED
,&
vÆue
) < 0 ) {

249 
	`≥º‹
("Setting speedÉrror\n");

250 
	`exô
(1);

255 
n
=0;

257 
ãmp_buf
[1024];

258 
m§_buf
[512];

259 
zîobuf
[80];

260 
Êag_ªc‹d2
=0;

262 
	`mem£t
(
zîobuf
,0,(zerobuf));

268 
ru¬ög
=0;

269 
	`±hªad_muãx_lock
(&
voi˚_lock
);

270 
	`±hªad_muãx_u∆ock
(&
voi˚_lock
);

271 
ru¬ög
=1;

273 
	`±hªad_muãx_lock
(&
muãx
);

274 
Êag_ªc‹d2
 = 
Êag_ªc‹d
;

275 
	`±hªad_muãx_u∆ock
(&
muãx
);

277 if(
Êag_ªc‹d2
 == 4)

279 if(
Êag_ªc‹d2
 == 0)

281 if((
n
=
	`ªad
(
sound_fd
,(*)
ãmp_buf
,(temp_buf))) < 0)

282 
	`≥º‹
("read /dev/sound/dsp may beÉrrori1\n");

285 if(
Êag_ªc‹d2
 == 1)

287 if((
n
=
	`ªad
(
sound_fd
,(*)
ãmp_buf
,(temp_buf))) < 0)

288 
	`≥º‹
("read /dev/sound/dsp may beÉrror\n");

291 
i
 = 0;

292 
ödex
;

293 
ödex
 = 0;ödex < 
n
/2;index++)

295 
m§_buf
[
i
++]=
ãmp_buf
[
ödex
++];

297 
	`MSR_SídD©a
((*)
m§_buf
, 2*
i
);

302 if(
Êag_ªc‹d2
 == 2)

304 if((
n
=
	`ªad
(
sound_fd
,(*)
ãmp_buf
,(temp_buf))) < 0)

305 
	`≥º‹
("read /dev/sound/dev may beÉrror3\n");

306 
	`MSR_SídD©a
(
zîobuf
, (zerobuf));

310 if(
Êag_ªc‹d2
 == 3)

313 if((
n
=
	`ªad
(
sound_fd
,(*)
ãmp_buf
,(temp_buf))) < 0)

314 
	`≥º‹
("read /dev/sound/dev may beÉrror3\n");

319 
	`¥ötf
("ªc‹dÅhªad sètu†maybêîr‹,%d\n",
Êag_ªc‹d2
);

326  
NULL
;

327 
	}
}

329 * 
Te°Thªad
(* 
©å
);

332 
	$voi˚_öô
()

334 
îr_Êag
 = 
	`MSR_Inô
();

336 i‡–
îr_Êag
 !
MSR_SUCCESS
 )

338 
	`¥ötf
("SYS initial fail.\n");

342 
	`¥ötf
("---- System Initial OK. ----\n");

344 
hVoc
 = 
	`MSR_Cª©eVoˇbuœry
(512);

345 i‡–
hVoc
 =
NULL
 )

348 i‡–
	`MSR_O≥n
 (
¥o˚ssh™dÀr
Ë!
MSR_SUCCESS
 )

350 
	`¥ötf
("Invalid msr handle.\n");

351 
	`exô
(-1);

353 
	`¥ötf
("---- Open MSR OK ----\n");

355 
îr_Êag
 = 
	`MSR_SëVoˇbuœryToDecodî
(
hVoc
);

356 i‡–
îr_Êag
 !
MSR_SUCCESS
 )

358 
	`DE
("Set vocabularyÅo decoder fail.\n");

362 
	`±hªad_muãx_öô
(&
voi˚_lock
,
NULL
);

363 
	`±hªad_muãx_öô
(&
ígöe_lock
,
NULL
);

365 
	`±hªad_¸óã
(&
th_voi˚
,
NULL
,&
voi˚
,NULL);

367 
	`±hªad_¸óã
(&
th_ã°
,
NULL
,&
Te°Thªad
,NULL);

369 
	}
}

371 
	$voi˚_exô
()

373 
	`±hªad_joö
(
th_voi˚
,
NULL
);

375 
	`±hªad_muãx_de°roy
(&
voi˚_lock
);

376 
	`±hªad_muãx_de°roy
(&
ígöe_lock
);

379 
	}
}

381 
	$ígöe_add_w‹d
(* 
°r
)

383 
i
=0;

385 if(!
°r
)

388 
	`MSR_AddA˘iveW‹d
(
hVoc
,
°r
,
NULL
);

391 
	}
}

394 
	$ígöe_°›_˛ór
()

396 if(
	`MSR_Sèã
()==
RUN
)

397 
	`MSR_St›
();

398 
îr_Êag
 = 
	`MSR_RemoveVoˇbuœryFromDecodî
(
hVoc
);

400 i‡–
îr_Êag
 !
MSR_SUCCESS
 )

402 
	`DE
("Remove vocabulary from decoder fail.\n");

406 
	`MSR_De°royVoˇbuœry
(
hVoc
);

407 
hVoc
 = 
	`MSR_Cª©eVoˇbuœry
(512);

408 i‡–
hVoc
 =
NULL
 )

410 
	`DE
("Failed creatingáÇew vocabulary");

414 
	`DP
("Sound Engine cleared\n");

417 
	}
}

419 
	$ígöe_c⁄töue
()

421 
îr_Êag
 = 
	`MSR_SëVoˇbuœryToDecodî
(
hVoc
);

422 i‡–
îr_Êag
 !
MSR_SUCCESS
 )

424 
	`DE
("Set vocabularyÅo decoder fail.\n");

428 if(
	`MSR_Sèã
()!=
RUN
)

429 
	`MSR_Sèπ
();

431 
	`DP
("Sound Engine Restarted\n");

434 
	}
}

436 
	$voi˚_°›
(
waô
)

438 
i
=0;

440 
	`±hªad_muãx_åylock
(&
voi˚_lock
);

442 
i
=0;
ru¬ög
&&(i<
waô
);i++)

444 
	`u¶ìp
(1);

447 if(!(
waô
-=
i
))

450 
waô
-=
i
;

452 
	`±hªad_muãx_åylock
(&
ígöe_lock
);

454 
i
=0;
ígöe_ru¬ög
&&(i<
waô
);i++)

456 
	`u¶ìp
(1);

459 if(!(
waô
-=
i
))

462 if(
	`MSR_Sèã
()==
RUN
)

463 
	`MSR_St›
();

466 
	}
}

468 
	$voi˚_c⁄töue
(
waô
)

470 
i
;

472 if(
	`MSR_Sèã
()!=
RUN
)

473 
	`MSR_Sèπ
();

475 
	`±hªad_muãx_u∆ock
(&
ígöe_lock
);

477 
i
=0;(!
ígöe_ru¬ög
)&&(i<
waô
);i++)

479 
	`u¶ìp
(1);

482 if(!(
waô
-=
i
))

485 
	`±hªad_muãx_u∆ock
(&
voi˚_lock
);

487 
i
=0;(!
ru¬ög
)&&(i<
waô
);i++)

489 if(
ru¬ög
)

491 
	`u¶ìp
(1);

494 if(!(
waô
-=
i
))

498 
	}
}

	@voice.h

1 #i‚de‡ 
__VOICE


2 
	#__VOICE


	)

4 
voi˚_öô
();

5 
voi˚_exô
();

6 
voi˚_°›
(
waô
);

7 
voi˚_c⁄töue
(
waô
);

9 
ígöe_°›_˛ór
();

10 
ígöe_c⁄töue
();

	@voice_i386.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

5 
	~<f˙é.h
>

7 
	~"voi˚.h
"

8 
	~"°©us.h
"

10 
±hªad_t
 
	gth_voi˚
,
	gth_ã°
;

11 
±hªad_muãx_t
 
	gvoi˚_lock
;

13 * 
	$voi˚
(* 
©å
)

15 
ãmp
[100];

18 
	`sˇnf
("%s",
ãmp
);

19 
	`do_evít
(
EV_SPEECH
,
ãmp
[0]);

22  
NULL
;

23 
	}
}

25 
	$voi˚_öô
()

27 
	`±hªad_muãx_öô
(&
voi˚_lock
,
NULL
);

29 
	`±hªad_¸óã
(&
th_voi˚
,
NULL
,&
voi˚
,NULL);

31 
	`±hªad_¸óã
(&
th_ã°
,
NULL
,&
Te°Thªad
,NULL);

33 
	}
}

35 
	$voi˚_exô
()

37 
	`±hªad_joö
(
th_voi˚
,
NULL
);

39 
	`±hªad_muãx_de°roy
(&
voi˚_lock
);

42 
	}
}

44 
	$voi˚_°›
(
waô
)

46 
i
=0;

48 
	`±hªad_muãx_lock
(&
voi˚_lock
);

50 
i
=0;i<
waô
;i++)

52 if(!
ru¬ög
)

54 
	`u¶ìp
(1);

57 if(!(
waô
-=
i
))

61 
	}
}

63 
	$voi˚_c⁄töue
(
waô
)

65 
i
;

67 
	`±hªad_muãx_u∆ock
(&
voi˚_lock
);

69 
i
=0;i<
waô
;i++)

71 if(
ru¬ög
)

73 
	`u¶ìp
(1);

76 if(!(
waô
-=
i
))

80 
	}
}

	@voice_test.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

5 
	~<f˙é.h
>

7 
	~"voi˚.h
"

8 
	~"°©us.h
"

10 
±hªad_t
 
	gth_voi˚
,
	gth_ã°
;

11 
±hªad_muãx_t
 
	gvoi˚_lock
;

13 * 
	$voi˚
(* 
©å
)

15 
ãmp
[100];

18 
	`sˇnf
("%s",
ãmp
);

19 
	`do_evít
(
EV_SPEECH
,
ãmp
);

22  
NULL
;

23 
	}
}

25 
	$voi˚_öô
()

27 
	`±hªad_muãx_öô
(&
voi˚_lock
,
NULL
);

29 
	`±hªad_¸óã
(&
th_voi˚
,
NULL
,&
voi˚
,NULL);

32 
	}
}

34 
	$voi˚_exô
()

36 
	`±hªad_joö
(
th_voi˚
,
NULL
);

38 
	`±hªad_muãx_de°roy
(&
voi˚_lock
);

41 
	}
}

43 
	$voi˚_°›
(
waô
)

45 
i
=0;

47 
	`±hªad_muãx_lock
(&
voi˚_lock
);

50 
	}
}

52 
	$voi˚_c⁄töue
(
waô
)

54 
i
;

56 
	`±hªad_muãx_u∆ock
(&
voi˚_lock
);

59 
	}
}

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

23 #i‚def 
_FCNTL_H


24 
	#_FCNTL_H
 1

	)

26 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/f˙é.h
>

36 #ifde‡
__USE_XOPEN


37 
	~<sys/°©.h
>

40 #ifdef 
__USE_MISC


41 #i‚de‡
R_OK


44 
	#R_OK
 4

	)

45 
	#W_OK
 2

	)

46 
	#X_OK
 1

	)

47 
	#F_OK
 0

	)

52 #ifde‡
__USE_XOPEN


53 
	#SEEK_SET
 0

	)

54 
	#SEEK_CUR
 1

	)

55 
	#SEEK_END
 2

	)

63 
f˙é
 (
__fd
, 
__cmd
, ...);

71 #i‚de‡
__USE_FILE_OFFSET64


72 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__REDIRECT


75 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

76 
	`__n⁄nuŒ
 ((1));

78 
	#›í
 
›í64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

93 #ifde‡
__REDIRECT


94 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

95 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

97 
	#¸ót
 
¸ót64


	)

100 #ifde‡
__USE_LARGEFILE64


101 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

104 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

105 && !
deföed
 
__USE_POSIX
))

114 
	#F_ULOCK
 0

	)

115 
	#F_LOCK
 1

	)

116 
	#F_TLOCK
 2

	)

117 
	#F_TEST
 3

	)

119 #i‚de‡
__USE_FILE_OFFSET64


120 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

122 #ifde‡
__REDIRECT


123 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

125 
	#lockf
 
lockf64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

133 #ifde‡
__USE_XOPEN2K


136 #i‚de‡
__USE_FILE_OFFSET64


137 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

138 
__advi£
Ë
__THROW
;

140 #ifde‡
__REDIRECT_NTH


141 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

142 
__off64_t
 
__Àn
, 
__advi£
),

143 
posix_Ádvi£64
);

145 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

148 #ifde‡
__USE_LARGEFILE64


149 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

150 
__advi£
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

163 
__off64_t
 
__Àn
),

164 
posix_ÁŒoˇã64
);

166 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

169 #ifde‡
__USE_LARGEFILE64


170 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

174 
__END_DECLS


	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

46 
	#SNDCARD_ADLIB
 1

	)

47 
	#SNDCARD_SB
 2

	)

48 
	#SNDCARD_PAS
 3

	)

49 
	#SNDCARD_GUS
 4

	)

50 
	#SNDCARD_MPU401
 5

	)

51 
	#SNDCARD_SB16
 6

	)

52 
	#SNDCARD_SB16MIDI
 7

	)

53 
	#SNDCARD_UART6850
 8

	)

54 
	#SNDCARD_GUS16
 9

	)

55 
	#SNDCARD_MSS
 10

	)

56 
	#SNDCARD_PSS
 11

	)

57 
	#SNDCARD_SSCAPE
 12

	)

58 
	#SNDCARD_PSS_MPU
 13

	)

59 
	#SNDCARD_PSS_MSS
 14

	)

60 
	#SNDCARD_SSCAPE_MSS
 15

	)

61 
	#SNDCARD_TRXPRO
 16

	)

62 
	#SNDCARD_TRXPRO_SB
 17

	)

63 
	#SNDCARD_TRXPRO_MPU
 18

	)

64 
	#SNDCARD_MAD16
 19

	)

65 
	#SNDCARD_MAD16_MPU
 20

	)

66 
	#SNDCARD_CS4232
 21

	)

67 
	#SNDCARD_CS4232_MPU
 22

	)

68 
	#SNDCARD_MAUI
 23

	)

69 
	#SNDCARD_PSEUDO_MSS
 24

	)

70 
	#SNDCARD_GUSPNP
 25

	)

71 
	#SNDCARD_UART401
 26

	)

78 #i‚de‡
_SIOWR


79 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

81 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

82 
	#SIOC_VOID
 
IOC_VOID


	)

83 
	#SIOC_OUT
 
IOC_OUT


	)

84 
	#SIOC_IN
 
IOC_IN


	)

85 
	#SIOC_INOUT
 
IOC_INOUT


	)

86 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

87 
	#_SIOC_DIR
 
_IOC_DIR


	)

88 
	#_SIOC_NONE
 
_IOC_NONE


	)

89 
	#_SIOC_READ
 
_IOC_READ


	)

90 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

91 
	#_SIO
 
_IO


	)

92 
	#_SIOR
 
_IOR


	)

93 
	#_SIOW
 
_IOW


	)

94 
	#_SIOWR
 
_IOWR


	)

104 
	#SIOCPARM_MASK
 0x1ff‡

	)

105 
	#SIOC_VOID
 0x00000000

	)

106 
	#SIOC_OUT
 0x20000000

	)

107 
	#SIOC_IN
 0x40000000

	)

108 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

110 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

111 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

112 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

114 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

116 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

117 
	#_SIOC_NONE
 
SIOC_VOID


	)

118 
	#_SIOC_READ
 
SIOC_OUT


	)

119 
	#_SIOC_WRITE
 
SIOC_IN


	)

123 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

124 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

125 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

126 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

127 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

128 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

129 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

130 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

131 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

132 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

133 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

134 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

135 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

136 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

137 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

138 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

139 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

140 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

141 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

142 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

143 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

144 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

146 
	ssy¡h_c⁄åﬁ


148 
	mdevno
;

149 
	md©a
[4000];

150 }
	tsy¡h_c⁄åﬁ
;

152 
	sªmove_ßm∂e


154 
	mdevno
;

155 
	mb™kno
;

156 
	mö°∫o
;

157 } 
	tªmove_ßm∂e
;

159 
	s£q_evít_ªc
 {

160 
	m¨r
[8];

161 } 
	t£q_evít_ªc
;

163 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

164 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

165 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

166 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

167 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

168 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

169 
	#TMR_INTERNAL
 0x00000001

	)

170 
	#TMR_EXTERNAL
 0x00000002

	)

171 
	#TMR_MODE_MIDI
 0x00000010

	)

172 
	#TMR_MODE_FSK
 0x00000020

	)

173 
	#TMR_MODE_CLS
 0x00000040

	)

174 
	#TMR_MODE_SMPTE
 0x00000080

	)

175 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

176 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

182 #i‡
deföed
(
_AIX
Ë|| deföed(
AIX
Ë|| deföed(
•¨c
Ë|| deföed(
__•¨c__
Ë|| deföed(
HPPA
Ë|| deföed(
PPC
Ë|| deföed(
__mc68000__
)

184 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

185 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

187 
	#_PATCHKEY
(
id
Ë((id<<8)|0xfd)

	)

188 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

201 
	s∑tch_öfo
 {

202 
	mkey
;

203 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

204 
	#GUS_PATCH
 
WAVE_PATCH


	)

205 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

207 
	mdevi˚_no
;

208 
	mö°r_no
;

210 
	mmode
;

215 
	#WAVE_16_BITS
 0x01

	)

216 
	#WAVE_UNSIGNED
 0x02

	)

217 
	#WAVE_LOOPING
 0x04

	)

218 
	#WAVE_BIDIR_LOOP
 0x08

	)

219 
	#WAVE_LOOP_BACK
 0x10

	)

220 
	#WAVE_SUSTAIN_ON
 0x20

	)

221 
	#WAVE_ENVELOPES
 0x40

	)

222 
	#WAVE_FAST_RELEASE
 0x80

	)

225 
	#WAVE_VIBRATO
 0x00010000

	)

226 
	#WAVE_TREMOLO
 0x00020000

	)

227 
	#WAVE_SCALE
 0x00040000

	)

228 
	#WAVE_FRACTIONS
 0x00080000

	)

230 
	#WAVE_ROM
 0x40000000

	)

231 
	#WAVE_MULAW
 0x20000000

	)

234 
	mÀn
;

235 
	mlo›_°¨t
, 
	mlo›_íd
;

253 
	mba£_‰eq
;

254 
	mba£_nŸe
;

255 
	mhigh_nŸe
;

256 
	mlow_nŸe
;

257 
	m∑¬ög
;

258 
	mdëunög
;

263 
	mív_øã
[ 6 ];

264 
	mív_off£t
[ 6 ];

272 
	måemﬁo_swìp
;

273 
	måemﬁo_øã
;

274 
	måemﬁo_dïth
;

276 
	mvibøto_swìp
;

277 
	mvibøto_øã
;

278 
	mvibøto_dïth
;

280 
	msˇÀ_‰equícy
;

281 
	msˇÀ_Á˘‹
;

283 
	mvﬁume
;

284 
	m‰a˘i⁄s
;

285 
	mª£rved1
;

286 
	m•¨e
[2];

287 
	md©a
[1];

290 
	ssy£x_öfo
 {

291 
	mkey
;

292 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

293 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

294 
	mdevi˚_no
;

295 
	mÀn
;

296 
	md©a
[1];

319 
	#SEQ_NOTEOFF
 0

	)

320 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

321 
	#SEQ_NOTEON
 1

	)

322 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

323 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

324 
	#SEQ_PGMCHANGE
 3

	)

325 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

326 
	#SEQ_SYNCTIMER
 
TMR_START


	)

327 
	#SEQ_MIDIPUTC
 5

	)

328 
	#SEQ_DRUMON
 6

	)

329 
	#SEQ_DRUMOFF
 7

	)

330 
	#SEQ_ECHO
 
TMR_ECHO


	)

331 
	#SEQ_AFTERTOUCH
 9

	)

332 
	#SEQ_CONTROLLER
 10

	)

346 
	#CTL_BANK_SELECT
 0x00

	)

347 
	#CTL_MODWHEEL
 0x01

	)

348 
	#CTL_BREATH
 0x02

	)

350 
	#CTL_FOOT
 0x04

	)

351 
	#CTL_PORTAMENTO_TIME
 0x05

	)

352 
	#CTL_DATA_ENTRY
 0x06

	)

353 
	#CTL_MAIN_VOLUME
 0x07

	)

354 
	#CTL_BALANCE
 0x08

	)

356 
	#CTL_PAN
 0x0a

	)

357 
	#CTL_EXPRESSION
 0x0b

	)

362 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

363 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

364 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

365 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

375 
	#CTL_DAMPER_PEDAL
 0x40

	)

376 
	#CTL_SUSTAIN
 0x40

	)

377 
	#CTL_HOLD
 0x40

	)

378 
	#CTL_PORTAMENTO
 0x41

	)

379 
	#CTL_SOSTENUTO
 0x42

	)

380 
	#CTL_SOFT_PEDAL
 0x43

	)

382 
	#CTL_HOLD2
 0x45

	)

385 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

386 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

387 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

388 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

390 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

391 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

392 
	#CTL_CHORUS_DEPTH
 0x5d

	)

393 
	#CTL_DETUNE_DEPTH
 0x5e

	)

394 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

395 
	#CTL_PHASER_DEPTH
 0x5f

	)

396 
	#CTL_DATA_INCREMENT
 0x60

	)

397 
	#CTL_DATA_DECREMENT
 0x61

	)

398 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

399 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

400 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

401 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

406 
	#CTRL_PITCH_BENDER
 255

	)

407 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

408 
	#CTRL_EXPRESSION
 253

	)

409 
	#CTRL_MAIN_VOLUME
 252

	)

410 
	#SEQ_BALANCE
 11

	)

411 
	#SEQ_VOLMODE
 12

	)

417 
	#VOL_METHOD_ADAGIO
 1

	)

418 
	#VOL_METHOD_LINEAR
 2

	)

429 
	#SEQ_FULLSIZE
 0xfd

	)

450 
	#SEQ_PRIVATE
 0x„

	)

451 
	#SEQ_EXTENDED
 0xf‡

	)

457 
	tsbi_ö°r_d©a
[32];

459 
	ssbi_ö°rumít
 {

460 
	mkey
;

461 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

462 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

463 
	mdevi˚
;

464 
	mch™√l
;

465 
sbi_ö°r_d©a
 
	m›î©‹s
;

468 
	ssy¡h_öfo
 {

469 
	m«me
[30];

470 
	mdevi˚
;

471 
	msy¡h_ty≥
;

472 
	#SYNTH_TYPE_FM
 0

	)

473 
	#SYNTH_TYPE_SAMPLE
 1

	)

474 
	#SYNTH_TYPE_MIDI
 2

	)

476 
	msy¡h_subty≥
;

477 
	#FM_TYPE_ADLIB
 0x00

	)

478 
	#FM_TYPE_OPL3
 0x01

	)

479 
	#MIDI_TYPE_MPU401
 0x401

	)

481 
	#SAMPLE_TYPE_BASIC
 0x10

	)

482 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

483 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

485 
	m≥rc_mode
;

486 
	mƒ_voi˚s
;

487 
	mƒ_drums
;

488 
	mö°r_b™k_size
;

489 
	mˇ∑bûôõs
;

490 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

491 
	#SYNTH_CAP_OPL3
 0x00000002

	)

492 
	#SYNTH_CAP_INPUT
 0x00000004

	)

493 
	mdummõs
[19];

496 
	ssound_timî_öfo
 {

497 
	m«me
[32];

498 
	mˇps
;

501 
	#MIDI_CAP_MPU401
 1

	)

503 
	smidi_öfo
 {

504 
	m«me
[30];

505 
	mdevi˚
;

506 
	mˇ∑bûôõs
;

507 
	mdev_ty≥
;

508 
	mdummõs
[18];

515 
	mcmd
;

516 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

517 
	md©a
[30];

518 } 
	tmpu_comm™d_ªc
;

520 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

521 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

522 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

528 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

529 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

530 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

531 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

532 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

533 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

534 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

535 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

536 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

537 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

538 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

539 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

542 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

543 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

544 
	#AFMT_QUERY
 0x00000000

	)

545 
	#AFMT_MU_LAW
 0x00000001

	)

546 
	#AFMT_A_LAW
 0x00000002

	)

547 
	#AFMT_IMA_ADPCM
 0x00000004

	)

548 
	#AFMT_U8
 0x00000008

	)

549 
	#AFMT_S16_LE
 0x00000010

	)

550 
	#AFMT_S16_BE
 0x00000020

	)

551 
	#AFMT_S8
 0x00000040

	)

552 
	#AFMT_U16_LE
 0x00000080

	)

553 
	#AFMT_U16_BE
 0x00000100

	)

554 
	#AFMT_MPEG
 0x00000200

	)

555 
	#AFMT_AC3
 0x00000400

	)

560 
	saudio_buf_öfo
 {

561 
	m‰agmíts
;

562 
	m‰ag°ŸÆ
;

563 
	m‰agsize
;

565 
	mbyãs
;

567 } 
	taudio_buf_öfo
;

569 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

570 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

571 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

572 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

573 
	#DSP_CAP_REVISION
 0x000000f‡

	)

574 
	#DSP_CAP_DUPLEX
 0x00000100

	)

575 
	#DSP_CAP_REALTIME
 0x00000200

	)

576 
	#DSP_CAP_BATCH
 0x00000400

	)

580 
	#DSP_CAP_COPROC
 0x00000800

	)

583 
	#DSP_CAP_TRIGGER
 0x00001000

	)

584 
	#DSP_CAP_MMAP
 0x00002000

	)

585 
	#DSP_CAP_MULTI
 0x00004000

	)

586 
	#DSP_CAP_BIND
 0x00008000

	)

589 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

590 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

591 
	#PCM_ENABLE_INPUT
 0x00000001

	)

592 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

594 
	scou¡_öfo
 {

595 
	mbyãs
;

596 
	mblocks
;

597 
	m±r
;

598 } 
	tcou¡_öfo
;

600 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

601 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

603 
	sbuffmem_desc
 {

604 *
	mbuf„r
;

605 
	msize
;

606 } 
	tbuffmem_desc
;

607 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

608 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

609 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

610 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

611 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

613 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

614 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

615 
	#DSP_BIND_QUERY
 0x00000000

	)

616 
	#DSP_BIND_FRONT
 0x00000001

	)

617 
	#DSP_BIND_SURR
 0x00000002

	)

618 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

619 
	#DSP_BIND_HANDSET
 0x00000008

	)

620 
	#DSP_BIND_MIC
 0x00000010

	)

621 
	#DSP_BIND_MODEM1
 0x00000020

	)

622 
	#DSP_BIND_MODEM2
 0x00000040

	)

623 
	#DSP_BIND_I2S
 0x00000080

	)

624 
	#DSP_BIND_SPDIF
 0x00000100

	)

626 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

627 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

628 
	#SPDIF_PRO
 0x0001

	)

629 
	#SPDIF_N_AUD
 0x0002

	)

630 
	#SPDIF_COPY
 0x0004

	)

631 
	#SPDIF_PRE
 0x0008

	)

632 
	#SPDIF_CC
 0x07f0

	)

633 
	#SPDIF_L
 0x0800

	)

634 
	#SPDIF_DRS
 0x4000

	)

635 
	#SPDIF_V
 0x8000

	)

648 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

649 
	#APF_NORMAL
 0

	)

650 
	#APF_NETWORK
 1

	)

651 
	#APF_CPUINTENS
 2

	)

653 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

654 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

655 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

656 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

659 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

660 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

661 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

662 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

663 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

664 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

665 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

666 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

667 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

669 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

670 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

671 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

672 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

673 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

674 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

675 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

676 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

677 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

678 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

685 
	sc›r_buf„r
 {

686 
	mcomm™d
;

687 
	mÊags
;

688 
	#CPF_NONE
 0x0000

	)

689 
	#CPF_FIRST
 0x0001

	)

690 
	#CPF_LAST
 0x0002

	)

691 
	mÀn
;

692 
	moffs
;

694 
	md©a
[4000];

695 } 
	tc›r_buf„r
;

697 
	sc›r_debug_buf
 {

698 
	mcomm™d
;

699 
	m∑rm1
;

700 
	m∑rm2
;

701 
	mÊags
;

702 
	mÀn
;

703 } 
	tc›r_debug_buf
;

705 
	sc›r_msg
 {

706 
	mÀn
;

707 
	md©a
[4000];

708 } 
	tc›r_msg
;

710 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

711 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

712 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

713 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

714 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

715 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

716 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

717 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

718 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

719 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

734 
	#SOUND_MIXER_NRDEVICES
 25

	)

735 
	#SOUND_MIXER_VOLUME
 0

	)

736 
	#SOUND_MIXER_BASS
 1

	)

737 
	#SOUND_MIXER_TREBLE
 2

	)

738 
	#SOUND_MIXER_SYNTH
 3

	)

739 
	#SOUND_MIXER_PCM
 4

	)

740 
	#SOUND_MIXER_SPEAKER
 5

	)

741 
	#SOUND_MIXER_LINE
 6

	)

742 
	#SOUND_MIXER_MIC
 7

	)

743 
	#SOUND_MIXER_CD
 8

	)

744 
	#SOUND_MIXER_IMIX
 9

	)

745 
	#SOUND_MIXER_ALTPCM
 10

	)

746 
	#SOUND_MIXER_RECLEV
 11

	)

747 
	#SOUND_MIXER_IGAIN
 12

	)

748 
	#SOUND_MIXER_OGAIN
 13

	)

755 
	#SOUND_MIXER_LINE1
 14

	)

756 
	#SOUND_MIXER_LINE2
 15

	)

757 
	#SOUND_MIXER_LINE3
 16

	)

758 
	#SOUND_MIXER_DIGITAL1
 17

	)

759 
	#SOUND_MIXER_DIGITAL2
 18

	)

760 
	#SOUND_MIXER_DIGITAL3
 19

	)

761 
	#SOUND_MIXER_PHONEIN
 20

	)

762 
	#SOUND_MIXER_PHONEOUT
 21

	)

763 
	#SOUND_MIXER_VIDEO
 22

	)

764 
	#SOUND_MIXER_RADIO
 23

	)

765 
	#SOUND_MIXER_MONITOR
 24

	)

769 
	#SOUND_ONOFF_MIN
 28

	)

770 
	#SOUND_ONOFF_MAX
 30

	)

773 
	#SOUND_MIXER_NONE
 31

	)

779 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

780 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

781 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

784 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

787 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

789 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

792 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

796 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

797 
	#SOUND_MIXER_DEVMASK
 0x„

	)

798 
	#SOUND_MIXER_RECMASK
 0xfd

	)

799 
	#SOUND_MIXER_CAPS
 0xfc

	)

800 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

801 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

802 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

803 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

807 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

808 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

809 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

810 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

811 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

812 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

813 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

814 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

815 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

816 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

817 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

818 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

819 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

820 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

821 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

822 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

823 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

824 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

825 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

826 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

827 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

828 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

829 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

830 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

831 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

834 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

835 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

836 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

838 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

839 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

840 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

841 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

842 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

843 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

844 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

845 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

846 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

847 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

848 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

849 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

850 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

851 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

852 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

853 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

854 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

855 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

858 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

859 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

860 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

862 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

863 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

864 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

865 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

866 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

868 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

869 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

870 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

871 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

872 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

873 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

874 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

875 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

876 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

877 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

878 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

879 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

880 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

881 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

882 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

883 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

884 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

885 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

888 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

889 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

890 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

892 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

894 
	smixî_öfo


896 
	mid
[16];

897 
	m«me
[32];

898 
	mmodify_cou¡î
;

899 
	mfûÀrs
[10];

900 } 
	tmixî_öfo
;

902 
	s_ﬁd_mixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 } 
	t_ﬁd_mixî_öfo
;

908 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

909 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

917 
	tmixî_ªc‹d
[128];

919 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

924 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

925 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

931 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

932 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

933 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

934 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

935 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

945 
	smixî_vﬁ_èbÀ
 {

946 
	mnum
;

947 
	m«me
[32];

948 
	mÀvñs
[32];

949 } 
	tmixî_vﬁ_èbÀ
;

951 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

952 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

960 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

980 
	#EV_SEQ_LOCAL
 0x80

	)

981 
	#EV_TIMING
 0x81

	)

982 
	#EV_CHN_COMMON
 0x92

	)

983 
	#EV_CHN_VOICE
 0x93

	)

984 
	#EV_SYSEX
 0x94

	)

994 
	#MIDI_NOTEOFF
 0x80

	)

995 
	#MIDI_NOTEON
 0x90

	)

996 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1002 
	#MIDI_CTL_CHANGE
 0xB0

	)

1003 
	#MIDI_PGM_CHANGE
 0xC0

	)

1004 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1005 
	#MIDI_PITCH_BEND
 0xE0

	)

1007 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1012 
	#TMR_WAIT_REL
 1

	)

1013 
	#TMR_WAIT_ABS
 2

	)

1014 
	#TMR_STOP
 3

	)

1015 
	#TMR_START
 4

	)

1016 
	#TMR_CONTINUE
 5

	)

1017 
	#TMR_TEMPO
 6

	)

1018 
	#TMR_ECHO
 8

	)

1019 
	#TMR_CLOCK
 9

	)

1020 
	#TMR_SPP
 10

	)

1021 
	#TMR_TIMESIG
 11

	)

1026 
	#LOCL_STARTAUDIO
 1

	)

1034 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1036 
£qbuf_dump
();

1038 
OSS_öô
(
£qfd
, 
buÊí
);

1039 
OSS_£qbuf_dump
(
fd
, *
buf
, 
buÊí
);

1040 
OSS_£q_advbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1041 
OSS_£q_√edbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1042 
OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
,

1043 
fd
, *
buf
, 
buÊí
);

1044 
OSS_drum_ˇchög
(
dev
, 
chn
, 
∑tch
,

1045 
fd
, *
buf
, 
buÊí
);

1046 
OSS_wrôe_∑tch
(
fd
, *
buf
, 
Àn
);

1047 
OSS_wrôe_∑tch2
(
fd
, *
buf
, 
Àn
);

1049 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1050 #ifde‡
OSSLIB


1051 
	#SEQ_USE_EXTBUF
() \

1052 *
_£qbuf
; \

1053 
_£qbuÊí
;
_£qbuÂå


	)

1054 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

1055 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1056 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1057 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1059 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
) \

1060 
	`OSS_∑tch_ˇchög
(
dev
, -1, 
ö°r
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1061 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
) \

1062 
	`OSS_drum_ˇchög
(
dev
, -1, 
drum
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1065 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1066 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1068 
	#SEQ_USE_EXTBUF
() \

1069 
_£qbuf
[]; \

1070 
_£qbuÊí
;
_£qbuÂå


	)

1072 #i‚de‡
USE_SIMPLE_MACROS


1092 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1093 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1094 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1095 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1111 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1115 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1116 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1117 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1118 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1119 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1120 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1121 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1122 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1123 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1124 
	`_SEQ_ADVBUF
(8);}

	)

1130 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1131 {
	`_SEQ_NEEDBUF
(8);\

1132 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1133 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1134 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1135 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1136 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1137 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1138 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1139 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1140 
	`_SEQ_ADVBUF
(8);}

	)

1142 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1143 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1145 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1146 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1148 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1149 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1155 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1156 {
	`_SEQ_NEEDBUF
(8);\

1157 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1158 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1159 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1160 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1161 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1162 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1163 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1164 
	`_SEQ_ADVBUF
(8);}

	)

1180 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1181 {
ii
, 
Œ
=(
Àn
); \

1182 *
buÂ
=
buf
;\

1183 i‡(
Œ
>6)ll=6;\

1184 
	`_SEQ_NEEDBUF
(8);\

1185 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1186 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1187 
ii
=0;ii<
Œ
;ii++)\

1188 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1189 
ii
=
Œ
;ii<6;ii++)\

1190 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1191 
	`_SEQ_ADVBUF
(8);}

	)

1193 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1194 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1196 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1197 #ifde‡
OSSLIB


1198 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1199 {
	`OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); \

1200 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0);}

	)

1202 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1203 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1206 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1207 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1209 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1210 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1213 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1214 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1215 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1216 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1217 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1218 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1219 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1220 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1221 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1222 
	`_SEQ_ADVBUF
(8);}

	)

1227 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1228 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1229 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1230 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1231 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1237 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1238 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1239 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1240 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1241 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1242 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1243 
	`_SEQ_ADVBUF
(8);}

	)

1245 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1246 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1247 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1248 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1249 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1250 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1251 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1252 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1253 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1259 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1260 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1261 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1262 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1263 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1264 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1265 
	`_SEQ_ADVBUF
(8);}

	)

1267 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1272 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1273 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1274 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1275 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1276 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1277 
	`_SEQ_ADVBUF
(4);}

	)

1282 #ifde‡
OSSLIB


1283 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1284 
	`OSS_wrôe_∑tch
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1285 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1286 
	`OSS_wrôe_∑tch2
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1288 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1289 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1290 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1291 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1292 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1293 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/mad.h

23 #ifde‡
__˝lu•lus


27 
	#FPM_DEFAULT


	)

31 
	#SIZEOF_INT
 4

	)

32 
	#SIZEOF_LONG
 8

	)

33 
	#SIZEOF_LONG_LONG
 8

	)

38 #i‚de‡
LIBMAD_VERSION_H


39 
	#LIBMAD_VERSION_H


	)

41 
	#MAD_VERSION_MAJOR
 0

	)

42 
	#MAD_VERSION_MINOR
 15

	)

43 
	#MAD_VERSION_PATCH
 1

	)

44 
	#MAD_VERSION_EXTRA
 " (bëa)"

	)

46 
	#MAD_VERSION_STRINGIZE
(
°r
Ë#°r

	)

47 
	#MAD_VERSION_STRING
(
num
Ë
	`MAD_VERSION_STRINGIZE
“um)

	)

49 
	#MAD_VERSION
 
	`MAD_VERSION_STRING
(
MAD_VERSION_MAJOR
) "." \

50 
	`MAD_VERSION_STRING
(
MAD_VERSION_MINOR
) "." \

51 
	`MAD_VERSION_STRING
(
MAD_VERSION_PATCH
) \

52 
MAD_VERSION_EXTRA


	)

54 
	#MAD_PUBLISHYEAR
 "2000-2004"

	)

55 
	#MAD_AUTHOR
 "Undîbô Technﬁogõs, Inc."

	)

56 
	#MAD_EMAIL
 "öfo@undîbô.com"

	)

58 c⁄° 
mad_vîsi⁄
[];

59 c⁄° 
mad_c›yright
[];

60 c⁄° 
mad_auth‹
[];

61 c⁄° 
mad_buûd
[];

67 #i‚de‡
LIBMAD_FIXED_H


68 
	#LIBMAD_FIXED_H


	)

70 #i‡
SIZEOF_INT
 >= 4

71 sig√d 
	tmad_fixed_t
;

73 sig√d 
	tmad_fixed64hi_t
;

74 
	tmad_fixed64lo_t
;

76 sig√d 
	tmad_fixed_t
;

78 sig√d 
	tmad_fixed64hi_t
;

79 
	tmad_fixed64lo_t
;

82 #i‡
deföed
(
_MSC_VER
)

83 
	#mad_fixed64_t
 sig√d 
__öt64


	)

84 #ñi‡1 || 
deföed
(
__GNUC__
)

85 
	#mad_fixed64_t
 sig√d 

	)

88 #i‡
deföed
(
FPM_FLOAT
)

89 
	tmad_ßm∂e_t
;

91 
mad_fixed_t
 
	tmad_ßm∂e_t
;

117 
	#MAD_F_FRACBITS
 28

	)

119 #i‡
MAD_F_FRACBITS
 == 28

120 
	#MAD_F
(
x
Ë((
mad_fixed_t
Ë(x##
L
))

	)

122 #i‡
MAD_F_FRACBITS
 < 28

124 
	#MAD_F
(
x
Ë((
mad_fixed_t
) \

125 (((
x
##
L
) + \

126 (1L << (28 - 
MAD_F_FRACBITS
 - 1))) >> \

127 (28 - 
MAD_F_FRACBITS
)))

	)

128 #ñi‡
MAD_F_FRACBITS
 > 28

130 
	#MAD_F
(
x
Ë((
mad_fixed_t
) \

131 ((
x
##
L
Ë<< (
MAD_F_FRACBITS
 - 28)))

	)

135 
	#MAD_F_MIN
 ((
mad_fixed_t
Ë-0x80000000L)

	)

136 
	#MAD_F_MAX
 ((
mad_fixed_t
Ë+0x7fffffffL)

	)

138 
	#MAD_F_ONE
 
	`MAD_F
(0x10000000)

	)

140 
	#mad_f_tofixed
(
x
Ë((
mad_fixed_t
) \

141 ((
x
Ë* (Ë(1L << 
MAD_F_FRACBITS
Ë+ 0.5))

	)

142 
	#mad_f_todoubÀ
(
x
) (() \

143 ((
x
Ë/ (Ë(1L << 
MAD_F_FRACBITS
)))

	)

145 
	#mad_f_öç¨t
(
x
Ë((xË>> 
MAD_F_FRACBITS
)

	)

146 
	#mad_f_‰a˝¨t
(
x
Ë((xË& ((1L << 
MAD_F_FRACBITS
Ë- 1))

	)

149 
	#mad_f_‰omöt
(
x
Ë((xË<< 
MAD_F_FRACBITS
)

	)

151 
	#mad_f_add
(
x
, 
y
Ë((xË+ (y))

	)

152 
	#mad_f_sub
(
x
, 
y
Ë((xË- (y))

	)

154 #i‡
deföed
(
FPM_FLOAT
)

157 #unde‡
MAD_F


158 
	#MAD_F
(
x
Ë
	`mad_f_todoubÀ
(x)

	)

160 
	#mad_f_mul
(
x
, 
y
Ë((xË* (y))

	)

161 
	#mad_f_sˇÀ64


	)

163 #unde‡
ASO_ZEROCHECK


165 #ñi‡
deföed
(
FPM_64BIT
)

171 #i‡
deföed
(
OPT_ACCURACY
)

172 
	#mad_f_mul
(
x
, 
y
) \

173 ((
mad_fixed_t
) \

174 ((((
mad_fixed64_t
Ë(
x
Ë* (
y
)) + \

175 (1L << (
MAD_F_SCALEBITS
 - 1))Ë>> MAD_F_SCALEBITS))

	)

177 
	#mad_f_mul
(
x
, 
y
) \

178 ((
mad_fixed_t
Ë(((
mad_fixed64_t
Ë(
x
Ë* (
y
)Ë>> 
MAD_F_SCALEBITS
))

	)

181 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

185 #ñi‡
deföed
(
FPM_INTEL
)

187 #i‡
deföed
(
_MSC_VER
)

188 #¥agm®
w¨nög
(
push
)

189 #¥agm®
w¨nög
(
dißbÀ
: 4035)

190 
__f‹˚ölöe


191 
mad_fixed_t
 
mad_f_mul_ölöe
(mad_fixed_à
x
, mad_fixed_à
y
)

194 
	g‰acbôs
 = 
MAD_F_FRACBITS


197 
	g__asm
 {

198 
mov
 
	góx
, 
x


199 
imul
 
y


200 
shrd
 
	góx
, 
	gedx
, 
	g‰acbôs


205 #¥agm®
w¨nög
(
p›
)

207 
	#mad_f_mul
 
mad_f_mul_ölöe


	)

208 
	#mad_f_sˇÀ64


	)

214 
	#MAD_F_MLX
(
hi
, 
lo
, 
x
, 
y
) \

215 
	`asm
 ("imull %3" \

216 : "˜" (
lo
), "=d" (
hi
) \

217 : "%a" (
x
), "rm" (
y
) \

218 : "cc")

	)

220 #i‡
deföed
(
OPT_ACCURACY
)

224 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
) \

225 ({ 
mad_fixed64hi_t
 
__hi
; \

226 
mad_fixed64lo_t
 
__lo
; \

227 
	`MAD_F_MLX
(
__hi
, 
__lo
, (
x
), (
y
)); \

228 
	`asm
 ("addl %2,%0\n\t" \

230 : "Ùm" (
lo
), "Ùm" (
hi
) \

231 : "r" (
__lo
), "r" (
__hi
), "0" (
lo
), "1" (
hi
) \

233 })

	)

236 #i‡
deföed
(
OPT_ACCURACY
)

240 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

241 ({ 
mad_fixed64hi_t
 
__hi_
; \

242 
mad_fixed64lo_t
 
__lo_
; \

243 
mad_fixed_t
 
__ªsu…
; \

244 
	`asm
 ("addl %4,%2\n\t" \

246 : "Ùm" (
__lo_
), "Ùm" (
__hi_
) \

247 : "0" (
lo
), "1" (
hi
), \

248 "ú" (1L << (
MAD_F_SCALEBITS
 - 1)), "ir" (0) \

250 
	`asm
 ("shrdl %3,%2,%1" \

251 : "Ùm" (
__ªsu…
) \

252 : "0" (
__lo_
), "r" (
__hi_
), "I" (
MAD_F_SCALEBITS
) \

254 
__ªsu…
; \

255 })

	)

256 #ñi‡
deföed
(
OPT_INTEL
)

260 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

261 ({ 
mad_fixed_t
 
__ªsu…
; \

262 
	`asm
 ("shrl %3,%1\n\t" \

265 : "Ùm" (
__ªsu…
) \

266 : "0" (
lo
), "r" (
hi
), \

267 "I" (
MAD_F_SCALEBITS
), "I" (32 - MAD_F_SCALEBITS) \

269 
__ªsu…
; \

270 })

	)

272 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

273 ({ 
mad_fixed_t
 
__ªsu…
; \

274 
	`asm
 ("shrdl %3,%2,%1" \

275 : "Ùm" (
__ªsu…
) \

276 : "0" (
lo
), "r" (
hi
), "I" (
MAD_F_SCALEBITS
) \

278 
__ªsu…
; \

279 })

	)

282 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

287 #ñi‡
deföed
(
FPM_ARM
)

298 
	#mad_f_mul
(
x
, 
y
) \

299 ({ 
mad_fixed64hi_t
 
__hi
; \

300 
mad_fixed64lo_t
 
__lo
; \

301 
mad_fixed_t
 
__ªsu…
; \

302 
	`asm
 ("smull %0, %1, %3, %4\n\t" \

305 : "=&r" (
__lo
), "=&r" (
__hi
), "Ù" (
__ªsu…
) \

306 : "%r" (
x
), "r" (
y
), \

307 "M" (
MAD_F_SCALEBITS
), "M" (32 - MAD_F_SCALEBITS) \

309 
__ªsu…
; \

310 })

	)

313 
	#MAD_F_MLX
(
hi
, 
lo
, 
x
, 
y
) \

314 
	`asm
 ("smull %0, %1, %2, %3" \

315 : "=&r" (
lo
), "=&r" (
hi
) \

316 : "%r" (
x
), "r" (
y
))

	)

318 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
) \

319 
	`asm
 ("smlal %0, %1, %2, %3" \

320 : "+r" (
lo
), "+r" (
hi
) \

321 : "%r" (
x
), "r" (
y
))

	)

323 
	#MAD_F_MLN
(
hi
, 
lo
) \

324 
	`asm
 ("rsbs %0, %2, #0\n\t" \

326 : "Ù" (
lo
), "Ù" (
hi
) \

327 : "0" (
lo
), "1" (
hi
) \

328 : "cc")

	)

330 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

331 ({ 
mad_fixed_t
 
__ªsu…
; \

332 
	`asm
 ("movs %0, %1,Üsr %3\n\t" \

334 : "=&r" (
__ªsu…
) \

335 : "r" (
lo
), "r" (
hi
), \

336 "M" (
MAD_F_SCALEBITS
), "M" (32 - MAD_F_SCALEBITS) \

338 
__ªsu…
; \

339 })

	)

341 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

345 #ñi‡
deföed
(
FPM_MIPS
)

351 
	#MAD_F_MLX
(
hi
, 
lo
, 
x
, 
y
) \

352 
	`asm
 ("mult %2,%3" \

353 : "ˆ" (
lo
), "=h" (
hi
) \

354 : "%r" (
x
), "r" (
y
))

	)

356 #i‡
deföed
(
HAVE_MADD_ASM
)

357 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
) \

358 
	`asm
 ("madd %2,%3" \

359 : "+l" (
lo
), "+h" (
hi
) \

360 : "%r" (
x
), "r" (
y
))

	)

361 #ñi‡
deföed
(
HAVE_MADD16_ASM
)

366 
	#MAD_F_ML0
(
hi
, 
lo
, 
x
, 
y
) \

367 
	`asm
 ("mult %2,%3" \

368 : "ˆ" (
lo
), "=h" (
hi
) \

369 : "%r" ((
x
Ë>> 12), "r" ((
y
Ë>> 16))

	)

370 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
) \

371 
	`asm
 ("madd16 %2,%3" \

372 : "+l" (
lo
), "+h" (
hi
) \

373 : "%r" ((
x
Ë>> 12), "r" ((
y
Ë>> 16))

	)

374 
	#MAD_F_MLZ
(
hi
, 
lo
Ë((
mad_fixed_t
Ë÷o))

	)

377 #i‡
deföed
(
OPT_SPEED
)

378 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

379 ((
mad_fixed_t
Ë((
hi
Ë<< (32 - 
MAD_F_SCALEBITS
)))

	)

380 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

385 #ñi‡
deföed
(
FPM_SPARC
)

391 
	#MAD_F_MLX
(
hi
, 
lo
, 
x
, 
y
) \

392 
	`asm
 ("smul %2, %3, %0\n\t" \

394 : "Ù" (
lo
), "Ù" (
hi
) \

395 : "%r" (
x
), "rI" (
y
))

	)

399 #ñi‡
deföed
(
FPM_PPC
)

405 
	#MAD_F_MLX
(
hi
, 
lo
, 
x
, 
y
) \

407 
	`asm
 ("mullw %0,%1,%2" \

408 : "Ù" (
lo
) \

409 : "%r" (
x
), "r" (
y
)); \

410 
	`asm
 ("mulhw %0,%1,%2" \

411 : "Ù" (
hi
) \

412 : "%r" (
x
), "r" (
y
)); \

414 0)

	)

416 #i‡
deföed
(
OPT_ACCURACY
)

420 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
) \

421 ({ 
mad_fixed64hi_t
 
__hi
; \

422 
mad_fixed64lo_t
 
__lo
; \

423 
	`MAD_F_MLX
(
__hi
, 
__lo
, (
x
), (
y
)); \

424 
	`asm
 ("addc %0,%2,%3\n\t" \

426 : "Ù" (
lo
), "Ù" (
hi
) \

427 : "%r" (
lo
), "r" (
__lo
), \

428 "%r" (
hi
), "r" (
__hi
) \

430 })

	)

433 #i‡
deföed
(
OPT_ACCURACY
)

437 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

438 ({ 
mad_fixed_t
 
__ªsu…
, 
__round
; \

439 
	`asm
 ("rotrwi %0,%1,%2" \

440 : "Ù" (
__ªsu…
) \

441 : "r" (
lo
), "i" (
MAD_F_SCALEBITS
)); \

442 
	`asm
 ("extrwi %0,%1,1,0" \

443 : "Ù" (
__round
) \

444 : "r" (
__ªsu…
)); \

445 
	`asm
 ("insrwi %0,%1,%2,0" \

446 : "+r" (
__ªsu…
) \

447 : "r" (
hi
), "i" (
MAD_F_SCALEBITS
)); \

448 
	`asm
 ("add %0,%1,%2" \

449 : "Ù" (
__ªsu…
) \

450 : "%r" (
__ªsu…
), "r" (
__round
)); \

451 
__ªsu…
; \

452 })

	)

454 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

455 ({ 
mad_fixed_t
 
__ªsu…
; \

456 
	`asm
 ("rotrwi %0,%1,%2" \

457 : "Ù" (
__ªsu…
) \

458 : "r" (
lo
), "i" (
MAD_F_SCALEBITS
)); \

459 
	`asm
 ("insrwi %0,%1,%2,0" \

460 : "+r" (
__ªsu…
) \

461 : "r" (
hi
), "i" (
MAD_F_SCALEBITS
)); \

462 
__ªsu…
; \

463 })

	)

466 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

470 #ñi‡
deföed
(
FPM_DEFAULT
)

481 #i‡
deföed
(
OPT_SPEED
)

482 
	#mad_f_mul
(
x
, 
y
Ë(((xË>> 12Ë* ((yË>> 16))

	)

484 
	#mad_f_mul
(
x
, 
y
) ((((x) + (1L << 11)) >> 12) * \

485 (((
y
Ë+ (1L << 15)Ë>> 16))

	)

496 #i‡!
deföed
(
mad_f_mul
)

497 
	#mad_f_mul
(
x
, 
y
) \

498 ({ 
mad_fixed64hi_t
 
__hi
; \

499 
mad_fixed64lo_t
 
__lo
; \

500 
	`MAD_F_MLX
(
__hi
, 
__lo
, (
x
), (
y
)); \

501 
	`mad_f_sˇÀ64
(
__hi
, 
__lo
); \

502 })

	)

505 #i‡!
deföed
(
MAD_F_MLA
)

506 
	#MAD_F_ML0
(
hi
, 
lo
, 
x
, 
y
Ë(÷oË
	`mad_f_mul
((x), (y)))

	)

507 
	#MAD_F_MLA
(
hi
, 
lo
, 
x
, 
y
Ë(÷oË+
	`mad_f_mul
((x), (y)))

	)

508 
	#MAD_F_MLN
(
hi
, 
lo
Ë(÷oË-÷o))

	)

509 
	#MAD_F_MLZ
(
hi
, 
lo
Ë((Ë(hi), (
mad_fixed_t
Ë÷o))

	)

512 #i‡!
deföed
(
MAD_F_ML0
)

513 
	#MAD_F_ML0
(
hi
, 
lo
, 
x
, 
y
Ë
	`MAD_F_MLX
((hi), (lo), (x), (y))

	)

516 #i‡!
deföed
(
MAD_F_MLN
)

517 
	#MAD_F_MLN
(
hi
, 
lo
Ë((hiË(÷oË-÷o)Ë? ~(hiË: -(hi))

	)

520 #i‡!
deföed
(
MAD_F_MLZ
)

521 
	#MAD_F_MLZ
(
hi
, 
lo
Ë
	`mad_f_sˇÀ64
((hi), (lo))

	)

524 #i‡!
deföed
(
mad_f_sˇÀ64
)

525 #i‡
deföed
(
OPT_ACCURACY
)

526 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

527 ((((
mad_fixed_t
) \

528 (((
hi
Ë<< (32 - (
MAD_F_SCALEBITS
 - 1))) | \

529 ((
lo
Ë>> (
MAD_F_SCALEBITS
 - 1)))Ë+ 1Ë>> 1)

	)

531 
	#mad_f_sˇÀ64
(
hi
, 
lo
) \

532 ((
mad_fixed_t
) \

533 (((
hi
Ë<< (32 - 
MAD_F_SCALEBITS
)) | \

534 ((
lo
Ë>> 
MAD_F_SCALEBITS
)))

	)

536 
	#MAD_F_SCALEBITS
 
MAD_F_FRACBITS


	)

541 
mad_fixed_t
 
mad_f_abs
(mad_fixed_t);

542 
mad_fixed_t
 
mad_f_div
(mad_fixed_t, mad_fixed_t);

548 #i‚de‡
LIBMAD_BIT_H


549 
	#LIBMAD_BIT_H


	)

551 
	smad_bô±r
 {

552 c⁄° *
	gbyã
;

553 
	gˇche
;

554 
	gÀ·
;

557 
mad_bô_öô
(
mad_bô±r
 *, const *);

559 
	#mad_bô_föish
(
bô±r
Ë

	)

561 
mad_bô_Àngth
(
mad_bô±r
 const *,

562 
mad_bô±r
 const *);

564 
	#mad_bô_bô¶e·
(
bô±r
Ë((bô±r)->
À·
)

	)

565 c⁄° *
mad_bô_√xtbyã
(
mad_bô±r
 const *);

567 
mad_bô_skù
(
mad_bô±r
 *, );

568 
mad_bô_ªad
(
mad_bô±r
 *, );

569 
mad_bô_wrôe
(
mad_bô±r
 *, , );

571 
mad_bô_¸c
(
mad_bô±r
, , );

577 #i‚de‡
LIBMAD_TIMER_H


578 
	#LIBMAD_TIMER_H


	)

581 sig√d 
	g£c⁄ds
;

582 
	g‰a˘i⁄
;

583 } 
	tmad_timî_t
;

585 
mad_timî_t
 c⁄° 
mad_timî_zîo
;

587 
	#MAD_TIMER_RESOLUTION
 352800000UL

	)

589 
	emad_unôs
 {

590 
	gMAD_UNITS_HOURS
 = -2,

591 
	gMAD_UNITS_MINUTES
 = -1,

592 
	gMAD_UNITS_SECONDS
 = 0,

596 
	gMAD_UNITS_DECISECONDS
 = 10,

597 
	gMAD_UNITS_CENTISECONDS
 = 100,

598 
	gMAD_UNITS_MILLISECONDS
 = 1000,

602 
	gMAD_UNITS_8000_HZ
 = 8000,

603 
	gMAD_UNITS_11025_HZ
 = 11025,

604 
	gMAD_UNITS_12000_HZ
 = 12000,

606 
	gMAD_UNITS_16000_HZ
 = 16000,

607 
	gMAD_UNITS_22050_HZ
 = 22050,

608 
	gMAD_UNITS_24000_HZ
 = 24000,

610 
	gMAD_UNITS_32000_HZ
 = 32000,

611 
	gMAD_UNITS_44100_HZ
 = 44100,

612 
	gMAD_UNITS_48000_HZ
 = 48000,

616 
	gMAD_UNITS_24_FPS
 = 24,

617 
	gMAD_UNITS_25_FPS
 = 25,

618 
	gMAD_UNITS_30_FPS
 = 30,

619 
	gMAD_UNITS_48_FPS
 = 48,

620 
	gMAD_UNITS_50_FPS
 = 50,

621 
	gMAD_UNITS_60_FPS
 = 60,

625 
	gMAD_UNITS_75_FPS
 = 75,

629 
	gMAD_UNITS_23_976_FPS
 = -24,

630 
	gMAD_UNITS_24_975_FPS
 = -25,

631 
	gMAD_UNITS_29_97_FPS
 = -30,

632 
	gMAD_UNITS_47_952_FPS
 = -48,

633 
	gMAD_UNITS_49_95_FPS
 = -50,

634 
	gMAD_UNITS_59_94_FPS
 = -60

637 
	#mad_timî_ª£t
(
timî
Ë((Ë(*—imîË
mad_timî_zîo
))

	)

639 
mad_timî_com∑ª
(
mad_timî_t
, mad_timer_t);

641 
	#mad_timî_sign
(
timî
Ë
	`mad_timî_com∑ª
(—imî), 
mad_timî_zîo
)

	)

643 
mad_timî_√g©e
(
mad_timî_t
 *);

644 
mad_timî_t
 
mad_timî_abs
(mad_timer_t);

646 
mad_timî_£t
(
mad_timî_t
 *, , , );

647 
mad_timî_add
(
mad_timî_t
 *, mad_timer_t);

648 
mad_timî_mu…ùly
(
mad_timî_t
 *, signed );

650 sig√d 
mad_timî_cou¡
(
mad_timî_t
, 
mad_unôs
);

651 
mad_timî_‰a˘i⁄
(
mad_timî_t
, );

652 
mad_timî_°rög
(
mad_timî_t
, *, const *,

653 
mad_unôs
, mad_units, );

659 #i‚de‡
LIBMAD_STREAM_H


660 
	#LIBMAD_STREAM_H


	)

663 
	#MAD_BUFFER_GUARD
 8

	)

664 
	#MAD_BUFFER_MDLEN
 (511 + 2048 + 
MAD_BUFFER_GUARD
)

	)

666 
	emad_îr‹
 {

667 
	gMAD_ERROR_NONE
 = 0x0000,

669 
	gMAD_ERROR_BUFLEN
 = 0x0001,

670 
	gMAD_ERROR_BUFPTR
 = 0x0002,

672 
	gMAD_ERROR_NOMEM
 = 0x0031,

674 
	gMAD_ERROR_LOSTSYNC
 = 0x0101,

675 
	gMAD_ERROR_BADLAYER
 = 0x0102,

676 
	gMAD_ERROR_BADBITRATE
 = 0x0103,

677 
	gMAD_ERROR_BADSAMPLERATE
 = 0x0104,

678 
	gMAD_ERROR_BADEMPHASIS
 = 0x0105,

680 
	gMAD_ERROR_BADCRC
 = 0x0201,

681 
	gMAD_ERROR_BADBITALLOC
 = 0x0211,

682 
	gMAD_ERROR_BADSCALEFACTOR
 = 0x0221,

683 
	gMAD_ERROR_BADMODE
 = 0x0222,

684 
	gMAD_ERROR_BADFRAMELEN
 = 0x0231,

685 
	gMAD_ERROR_BADBIGVALUES
 = 0x0232,

686 
	gMAD_ERROR_BADBLOCKTYPE
 = 0x0233,

687 
	gMAD_ERROR_BADSCFSI
 = 0x0234,

688 
	gMAD_ERROR_BADDATAPTR
 = 0x0235,

689 
	gMAD_ERROR_BADPART3LEN
 = 0x0236,

690 
	gMAD_ERROR_BADHUFFTABLE
 = 0x0237,

691 
	gMAD_ERROR_BADHUFFDATA
 = 0x0238,

692 
	gMAD_ERROR_BADSTEREO
 = 0x0239

695 
	#MAD_RECOVERABLE
(
îr‹
Ë(”º‹Ë& 0xff00)

	)

697 
	smad_°ªam
 {

698 c⁄° *
	gbuf„r
;

699 c⁄° *
	gbu„nd
;

700 
	gskùÀn
;

702 
	gsync
;

703 
	g‰ìøã
;

705 c⁄° *
	gthis_‰ame
;

706 c⁄° *
	g√xt_‰ame
;

707 
mad_bô±r
 
	g±r
;

709 
mad_bô±r
 
	g™c_±r
;

710 
	g™c_bôÀn
;

712 (*
	gmaö_d©a
)[
MAD_BUFFER_MDLEN
];

714 
	gmd_Àn
;

716 
	g›ti⁄s
;

717 
mad_îr‹
 
	gîr‹
;

721 
	gMAD_OPTION_IGNORECRC
 = 0x0001,

722 
	gMAD_OPTION_HALFSAMPLERATE
 = 0x0002

724 
MAD_OPTION_LEFTCHANNEL
 = 0x0010,

725 
	gMAD_OPTION_RIGHTCHANNEL
 = 0x0020,

726 
	gMAD_OPTION_SINGLECHANNEL
 = 0x0030

730 
mad_°ªam_öô
(
mad_°ªam
 *);

731 
mad_°ªam_föish
(
mad_°ªam
 *);

733 
	#mad_°ªam_›ti⁄s
(
°ªam
, 
›ts
) \

734 ((Ë((
°ªam
)->
›ti⁄s
 = (
›ts
)))

	)

736 
mad_°ªam_buf„r
(
mad_°ªam
 *,

738 
mad_°ªam_skù
(
mad_°ªam
 *, );

740 
mad_°ªam_sync
(
mad_°ªam
 *);

742 c⁄° *
mad_°ªam_îr‹°r
(
mad_°ªam
 const *);

748 #i‚de‡
LIBMAD_FRAME_H


749 
	#LIBMAD_FRAME_H


	)

752 
	emad_œyî
 {

753 
	gMAD_LAYER_I
 = 1,

754 
	gMAD_LAYER_II
 = 2,

755 
	gMAD_LAYER_III
 = 3

758 
	emad_mode
 {

759 
	gMAD_MODE_SINGLE_CHANNEL
 = 0,

760 
	gMAD_MODE_DUAL_CHANNEL
 = 1,

761 
	gMAD_MODE_JOINT_STEREO
 = 2,

762 
	gMAD_MODE_STEREO
 = 3

765 
	emad_emphasis
 {

766 
	gMAD_EMPHASIS_NONE
 = 0,

767 
	gMAD_EMPHASIS_50_15_US
 = 1,

768 
	gMAD_EMPHASIS_CCITT_J_17
 = 3,

769 
	gMAD_EMPHASIS_RESERVED
 = 2

772 
	smad_hódî
 {

773 
mad_œyî
 
	gœyî
;

774 
mad_mode
 
	gmode
;

775 
	gmode_exãnsi⁄
;

776 
mad_emphasis
 
	gemphasis
;

778 
	gbôøã
;

779 
	gßm∂î©e
;

781 
	g¸c_check
;

782 
	g¸c_èrgë
;

784 
	gÊags
;

785 
	g¥iv©e_bôs
;

787 
mad_timî_t
 
	gduøti⁄
;

790 
	smad_‰ame
 {

791 
mad_hódî
 
	ghódî
;

793 
	g›ti⁄s
;

795 
mad_fixed_t
 
	gsbßm∂e
[2][36][32];

796 
mad_fixed_t
 (*
ovîœp
)[2][32][18];

799 
	#MAD_NCHANNELS
(
hódî
Ë((hódî)->
mode
 ? 2 : 1)

	)

800 
	#MAD_NSBSAMPLES
(
hódî
) \

801 ((
hódî
)->
œyî
 =
MAD_LAYER_I
 ? 12 : \

802 (((
hódî
)->
œyî
 =
MAD_LAYER_III
 && \

803 ((
hódî
)->
Êags
 & 
MAD_FLAG_LSF_EXT
)Ë? 18 : 36))

	)

806 
	gMAD_FLAG_NPRIVATE_III
 = 0x0007,

807 
	gMAD_FLAG_INCOMPLETE
 = 0x0008,

809 
	gMAD_FLAG_PROTECTION
 = 0x0010,

810 
	gMAD_FLAG_COPYRIGHT
 = 0x0020,

811 
	gMAD_FLAG_ORIGINAL
 = 0x0040,

812 
	gMAD_FLAG_PADDING
 = 0x0080,

814 
	gMAD_FLAG_I_STEREO
 = 0x0100,

815 
	gMAD_FLAG_MS_STEREO
 = 0x0200,

816 
	gMAD_FLAG_FREEFORMAT
 = 0x0400,

818 
	gMAD_FLAG_LSF_EXT
 = 0x1000,

819 
	gMAD_FLAG_MC_EXT
 = 0x2000,

820 
	gMAD_FLAG_MPEG_2_5_EXT
 = 0x4000

824 
	gMAD_PRIVATE_HEADER
 = 0x0100,

825 
	gMAD_PRIVATE_III
 = 0x001f

828 
mad_hódî_öô
(
mad_hódî
 *);

830 
	#mad_hódî_föish
(
hódî
Ë

	)

832 
mad_hódî_decode
(
mad_hódî
 *, 
mad_°ªam
 *);

834 
mad_‰ame_öô
(
mad_‰ame
 *);

835 
mad_‰ame_föish
(
mad_‰ame
 *);

837 
mad_‰ame_decode
(
mad_‰ame
 *, 
mad_°ªam
 *);

839 
mad_‰ame_muã
(
mad_‰ame
 *);

845 #i‚de‡
LIBMAD_SYNTH_H


846 
	#LIBMAD_SYNTH_H


	)

849 
	smad_pcm
 {

850 
	gßm∂î©e
;

851 
	gch™√ls
;

852 
	gÀngth
;

853 
mad_fixed_t
 
	gßm∂es
[2][1152];

856 
	smad_sy¡h
 {

857 
mad_fixed_t
 
	gfûãr
[2][2][2][16][8];

860 
	gpha£
;

862 
mad_pcm
 
	gpcm
;

867 
	gMAD_PCM_CHANNEL_SINGLE
 = 0

872 
	gMAD_PCM_CHANNEL_DUAL_1
 = 0,

873 
	gMAD_PCM_CHANNEL_DUAL_2
 = 1

878 
	gMAD_PCM_CHANNEL_STEREO_LEFT
 = 0,

879 
	gMAD_PCM_CHANNEL_STEREO_RIGHT
 = 1

882 
mad_sy¡h_öô
(
mad_sy¡h
 *);

884 
	#mad_sy¡h_föish
(
sy¡h
Ë

	)

886 
mad_sy¡h_muã
(
mad_sy¡h
 *);

888 
mad_sy¡h_‰ame
(
mad_sy¡h
 *, 
mad_‰ame
 const *);

894 #i‚de‡
LIBMAD_DECODER_H


895 
	#LIBMAD_DECODER_H


	)

898 
	emad_decodî_mode
 {

899 
	gMAD_DECODER_MODE_SYNC
 = 0,

900 
	gMAD_DECODER_MODE_ASYNC


903 
	emad_Êow
 {

904 
	gMAD_FLOW_CONTINUE
 = 0x0000,

905 
	gMAD_FLOW_STOP
 = 0x0010,

906 
	gMAD_FLOW_BREAK
 = 0x0011,

907 
	gMAD_FLOW_IGNORE
 = 0x0020

910 
	smad_decodî
 {

911 
mad_decodî_mode
 
	gmode
;

913 
	g›ti⁄s
;

916 
	gpid
;

917 
	gö
;

918 
	gout
;

919 } 
	gasync
;

922 
mad_°ªam
 
	g°ªam
;

923 
mad_‰ame
 
	g‰ame
;

924 
mad_sy¡h
 
	gsy¡h
;

925 } *
	gsync
;

927 *
	gcb_d©a
;

929 
mad_Êow
 (*
öput_func
)(*, 
	gmad_°ªam
 *);

930 
mad_Êow
 (*
hódî_func
)(*, 
mad_hódî
 const *);

931 
mad_Êow
 (*
fûãr_func
)(*,

932 
mad_°ªam
 c⁄° *, 
	gmad_‰ame
 *);

933 
mad_Êow
 (*
ouçut_func
)(*,

934 
mad_hódî
 c⁄° *, 
	gmad_pcm
 *);

935 
mad_Êow
 (*
îr‹_func
)(*, 
	gmad_°ªam
 *, 
	gmad_‰ame
 *);

936 
mad_Êow
 (*
mesßge_func
)(*, *, *);

939 
mad_decodî_öô
(
mad_decodî
 *, *,

940 
mad_Êow
 (*)(*, 
mad_°ªam
 *),

941 
mad_Êow
 (*)(*, 
mad_hódî
 const *),

942 
mad_Êow
 (*)(*,

943 
mad_°ªam
 const *,

944 
mad_‰ame
 *),

945 
mad_Êow
 (*)(*,

946 
mad_hódî
 const *,

947 
mad_pcm
 *),

948 
mad_Êow
 (*)(*,

949 
mad_°ªam
 *,

950 
mad_‰ame
 *),

951 
mad_Êow
 (*)(*, *, *));

952 
mad_decodî_föish
(
mad_decodî
 *);

954 
	#mad_decodî_›ti⁄s
(
decodî
, 
›ts
) \

955 ((Ë((
decodî
)->
›ti⁄s
 = (
›ts
)))

	)

957 
mad_decodî_run
(
mad_decodî
 *, 
mad_decodî_mode
);

958 
mad_decodî_mesßge
(
mad_decodî
 *, *, *);

962 #ifde‡
__˝lu•lus


	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 #ifde‡
__STDC__


87 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

89 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

91 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

92 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

93 
	~<bôs/m©hˇŒs.h
>

94 #unde‡
_MdoubÀ_


95 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


96 #unde‡
_MdoubÀ_END_NAMESPACE


97 #unde‡
__MATH_PRECNAME


99 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0Ë&& !
deföed
 
__NO_LONG_DOUBLE_MATH


103 #i‚de‡
_Ml⁄g_doubÀ_


104 
	#_Ml⁄g_doubÀ_
 

	)

106 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

107 #ifde‡
__STDC__


108 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

110 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

112 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

113 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

114 
	~<bôs/m©hˇŒs.h
>

115 #unde‡
_MdoubÀ_


116 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


117 #unde‡
_MdoubÀ_END_NAMESPACE


118 #unde‡
__MATH_PRECNAME


123 #unde‡
__MATHDECL_1


124 #unde‡
__MATHDECL


125 #unde‡
__MATHCALL


128 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


130 
signgam
;

135 #ifde‡
__USE_ISOC99


173 
	mFP_NAN
,

174 
	#FP_NAN
 
FP_NAN


	)

175 
	mFP_INFINITE
,

176 
	#FP_INFINITE
 
FP_INFINITE


	)

177 
	mFP_ZERO
,

178 
	#FP_ZERO
 
FP_ZERO


	)

179 
	mFP_SUBNORMAL
,

180 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

181 
	mFP_NORMAL


182 
	#FP_NORMAL
 
FP_NORMAL


	)

186 #ifde‡
__NO_LONG_DOUBLE_MATH


187 
	#Â˛assify
(
x
) \

188 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

190 
	#Â˛assify
(
x
) \

191 ( (
x
) ==  () \

192 ? 
	`__Â˛assifyf
 (
x
) \

193 :  (
x
) ==  () \

194 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
	#signbô
(
x
) \

200 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

202 
	#signbô
(
x
) \

203 ( (
x
) ==  () \

204 ? 
	`__signbôf
 (
x
) \

205 :  (
x
) ==  () \

206 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#isföôe
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

214 
	#isföôe
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__föôef
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

222 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
	#i¢™
(
x
) \

228 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

230 
	#i¢™
(
x
) \

231 ( (
x
) ==  () \

232 ? 
	`__i¢™f
 (
x
) \

233 :  (
x
) ==  () \

234 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

238 #ifde‡
__NO_LONG_DOUBLE_MATH


239 
	#isöf
(
x
) \

240 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

242 
	#isöf
(
x
) \

243 ( (
x
) ==  () \

244 ? 
	`__isöff
 (
x
) \

245 :  (
x
) ==  () \

246 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

250 
	#MATH_ERRNO
 1

	)

251 
	#MATH_ERREXCEPT
 2

	)

255 #ifdef 
__USE_MISC


259 
	m_IEEE_
 = -1,

260 
	m_SVID_
,

261 
	m_XOPEN_
,

262 
	m_POSIX_
,

263 
	m_ISOC_


264 } 
	t_LIB_VERSION_TYPE
;

269 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

273 #ifde‡
__USE_SVID


279 #ifde‡
__˝lu•lus


280 
	g__ex˚±i⁄


282 
	gex˚±i⁄


285 
	gty≥
;

286 *
	g«me
;

287 
	g¨g1
;

288 
	g¨g2
;

289 
	gªtvÆ
;

292 #ifde‡
__˝lu•lus


293 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

295 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

298 
	#X_TLOSS
 1.41484755040568800000e+16

	)

301 
	#DOMAIN
 1

	)

302 
	#SING
 2

	)

303 
	#OVERFLOW
 3

	)

304 
	#UNDERFLOW
 4

	)

305 
	#TLOSS
 5

	)

306 
	#PLOSS
 6

	)

309 
	#HUGE
 3.40282347e+38F

	)

313 #ifde‡
__USE_XOPEN


315 
	#MAXFLOAT
 3.40282347e+38F

	)

322 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


323 
	#M_E
 2.7182818284590452354

	)

324 
	#M_LOG2E
 1.4426950408889634074

	)

325 
	#M_LOG10E
 0.43429448190325182765

	)

326 
	#M_LN2
 0.69314718055994530942

	)

327 
	#M_LN10
 2.30258509299404568402

	)

328 
	#M_PI
 3.14159265358979323846

	)

329 
	#M_PI_2
 1.57079632679489661923

	)

330 
	#M_PI_4
 0.78539816339744830962

	)

331 
	#M_1_PI
 0.31830988618379067154

	)

332 
	#M_2_PI
 0.63661977236758134308

	)

333 
	#M_2_SQRTPI
 1.12837916709551257390

	)

334 
	#M_SQRT2
 1.41421356237309504880

	)

335 
	#M_SQRT1_2
 0.70710678118654752440

	)

341 #ifde‡
__USE_GNU


342 
	#M_El
 2.7182818284590452353602874713526625L

	)

343 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

344 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

345 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

346 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

347 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

348 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

349 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

350 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

351 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

352 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

353 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

354 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

361 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


362 
	#__NO_MATH_INLINES
 1

	)

365 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

372 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

373 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

374 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

375 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

376 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

377 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

381 #ifde‡
__USE_EXTERN_INLINES


382 
	~<bôs/m©hölöe.h
>

385 #ifde‡
__USE_ISOC99


389 #i‚de‡
isgª©î


390 
	#isgª©î
(
x
, 
y
) \

391 (
__exãnsi⁄__
 \

392 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

393 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

397 #i‚de‡
isgª©îequÆ


398 
	#isgª©îequÆ
(
x
, 
y
) \

399 (
__exãnsi⁄__
 \

400 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

401 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

405 #i‚de‡
i¶ess


406 
	#i¶ess
(
x
, 
y
) \

407 (
__exãnsi⁄__
 \

408 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

409 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

413 #i‚de‡
i¶es£quÆ


414 
	#i¶es£quÆ
(
x
, 
y
) \

415 (
__exãnsi⁄__
 \

416 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

417 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

421 #i‚de‡
i¶essgª©î


422 
	#i¶essgª©î
(
x
, 
y
) \

423 (
__exãnsi⁄__
 \

424 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

425 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

429 #i‚de‡
isun‹dîed


430 
	#isun‹dîed
(
u
, 
v
) \

431 (
__exãnsi⁄__
 \

432 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

433 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

438 
	g__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_IPV6
 = 41,

56 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

57 
	mIPPROTO_ROUTING
 = 43,

58 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

59 
	mIPPROTO_FRAGMENT
 = 44,

60 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

61 
	mIPPROTO_RSVP
 = 46,

62 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

63 
	mIPPROTO_GRE
 = 47,

64 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

65 
	mIPPROTO_ESP
 = 50,

66 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

67 
	mIPPROTO_AH
 = 51,

68 
	#IPPROTO_AH
 
IPPROTO_AH


	)

69 
	mIPPROTO_ICMPV6
 = 58,

70 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

71 
	mIPPROTO_NONE
 = 59,

72 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

73 
	mIPPROTO_DSTOPTS
 = 60,

74 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_ENCAP
 = 98,

78 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

79 
	mIPPROTO_PIM
 = 103,

80 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

81 
	mIPPROTO_COMP
 = 108,

82 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

83 
	mIPPROTO_SCTP
 = 132,

84 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

85 
	mIPPROTO_RAW
 = 255,

86 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

87 
	mIPPROTO_MAX


92 
uöt16_t
 
	tö_p‹t_t
;

97 
	mIPPORT_ECHO
 = 7,

98 
	mIPPORT_DISCARD
 = 9,

99 
	mIPPORT_SYSTAT
 = 11,

100 
	mIPPORT_DAYTIME
 = 13,

101 
	mIPPORT_NETSTAT
 = 15,

102 
	mIPPORT_FTP
 = 21,

103 
	mIPPORT_TELNET
 = 23,

104 
	mIPPORT_SMTP
 = 25,

105 
	mIPPORT_TIMESERVER
 = 37,

106 
	mIPPORT_NAMESERVER
 = 42,

107 
	mIPPORT_WHOIS
 = 43,

108 
	mIPPORT_MTP
 = 57,

110 
	mIPPORT_TFTP
 = 69,

111 
	mIPPORT_RJE
 = 77,

112 
	mIPPORT_FINGER
 = 79,

113 
	mIPPORT_TTYLINK
 = 87,

114 
	mIPPORT_SUPDUP
 = 95,

117 
	mIPPORT_EXECSERVER
 = 512,

118 
	mIPPORT_LOGINSERVER
 = 513,

119 
	mIPPORT_CMDSERVER
 = 514,

120 
	mIPPORT_EFSSERVER
 = 520,

123 
	mIPPORT_BIFFUDP
 = 512,

124 
	mIPPORT_WHOSERVER
 = 513,

125 
	mIPPORT_ROUTESERVER
 = 520,

128 
	mIPPORT_RESERVED
 = 1024,

131 
	mIPPORT_USERRESERVED
 = 5000

136 
uöt32_t
 
	tö_addr_t
;

137 
	sö_addr


139 
ö_addr_t
 
	ms_addr
;

148 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

149 
	#IN_CLASSA_NET
 0xff000000

	)

150 
	#IN_CLASSA_NSHIFT
 24

	)

151 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

152 
	#IN_CLASSA_MAX
 128

	)

154 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

155 
	#IN_CLASSB_NET
 0xffff0000

	)

156 
	#IN_CLASSB_NSHIFT
 16

	)

157 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

158 
	#IN_CLASSB_MAX
 65536

	)

160 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

161 
	#IN_CLASSC_NET
 0xffffff00

	)

162 
	#IN_CLASSC_NSHIFT
 8

	)

163 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

165 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

166 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

168 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

169 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

172 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

174 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

176 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#IN_LOOPBACKNET
 127

	)

181 #i‚de‡
INADDR_LOOPBACK


182 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

186 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

187 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

188 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

189 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

193 
	sö6_addr


197 
uöt8_t
 
	mu6_addr8
[16];

198 
uöt16_t
 
	mu6_addr16
[8];

199 
uöt32_t
 
	mu6_addr32
[4];

200 } 
	mö6_u
;

201 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

202 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

203 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

206 c⁄° 
ö6_addr
 
ö6addr_™y
;

207 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

208 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

209 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

211 
	#INET_ADDRSTRLEN
 16

	)

212 
	#INET6_ADDRSTRLEN
 46

	)

215 
	~<bôs/sockë.h
>

219 
	ssockaddr_ö


221 
__SOCKADDR_COMMON
 (
sö_
);

222 
ö_p‹t_t
 
	msö_p‹t
;

223 
ö_addr
 
	msö_addr
;

226 
	msö_zîo
[ (
sockaddr
) -

227 
__SOCKADDR_COMMON_SIZE
 -

228  (
ö_p‹t_t
) -

229  (
ö_addr
)];

233 
	ssockaddr_ö6


235 
__SOCKADDR_COMMON
 (
sö6_
);

236 
ö_p‹t_t
 
	msö6_p‹t
;

237 
uöt32_t
 
	msö6_Êowöfo
;

238 
ö6_addr
 
	msö6_addr
;

239 
uöt32_t
 
	msö6_sc›e_id
;

244 
	sù_mªq


247 
ö_addr
 
	mimr_mu…üddr
;

250 
ö_addr
 
	mimr_öãrÁ˚
;

253 
	sù_mªq_sour˚


256 
ö_addr
 
	mimr_mu…üddr
;

259 
ö_addr
 
	mimr_öãrÁ˚
;

262 
ö_addr
 
	mimr_sour˚addr
;

266 
	sùv6_mªq


269 
ö6_addr
 
	mùv6mr_mu…üddr
;

272 
	mùv6mr_öãrÁ˚
;

277 
	sgroup_ªq


280 
uöt32_t
 
	mgr_öãrÁ˚
;

283 
sockaddr_°‹age
 
	mgr_group
;

286 
	sgroup_sour˚_ªq


289 
uöt32_t
 
	mg§_öãrÁ˚
;

292 
sockaddr_°‹age
 
	mg§_group
;

295 
sockaddr_°‹age
 
	mg§_sour˚
;

300 
	sù_msfûãr


303 
ö_addr
 
	mimsf_mu…üddr
;

306 
ö_addr
 
	mimsf_öãrÁ˚
;

309 
uöt32_t
 
	mimsf_fmode
;

312 
uöt32_t
 
	mimsf_num§c
;

314 
ö_addr
 
	mimsf_¶i°
[1];

317 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

318 -  (
ö_addr
) \

319 + (
num§c
Ë*  (
ö_addr
))

	)

321 
	sgroup_fûãr


324 
uöt32_t
 
	mgf_öãrÁ˚
;

327 
sockaddr_°‹age
 
	mgf_group
;

330 
uöt32_t
 
	mgf_fmode
;

333 
uöt32_t
 
	mgf_num§c
;

335 
sockaddr_°‹age
 
	mgf_¶i°
[1];

338 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

339 -  (
sockaddr_°‹age
) \

340 + ((
num§c
) \

341 *  (
sockaddr_°‹age
)))

	)

345 
	~<bôs/ö.h
>

354 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

355 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

356 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

357 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

358 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

359 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

360 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

362 
	~<ídün.h
>

365 
	~<bôs/byãsw≠.h
>

367 #ifde‡
__OPTIMIZE__


371 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


374 
	#¡ohl
(
x
Ë(x)

	)

375 
	#¡ohs
(
x
Ë(x)

	)

376 
	#ht⁄l
(
x
Ë(x)

	)

377 
	#ht⁄s
(
x
Ë(x)

	)

379 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


380 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

381 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

382 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

383 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

388 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

389 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

390 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

391 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

392 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

394 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

395 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

396 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

397 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

398 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

400 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

402 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

403 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

404 =
	`ht⁄l
 (0x„800000))

	)

406 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

407 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

408 =
	`ht⁄l
 (0x„c00000))

	)

410 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

411 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

412 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

413 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

415 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

416 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

417 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

418 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

419 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

421 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

425 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

428 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

431 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

432 
__THROW
;

435 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

436 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

437 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

439 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

440 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

441 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

443 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

444 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

445 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

447 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

448 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

449 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

451 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

452 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

453 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

456 
	sö6_pktöfo


458 
ö6_addr
 
ùi6_addr
;

459 
ùi6_ifödex
;

463 #ifde‡
__USE_GNU


465 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
Ë
__THROW
;

466 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

467 
__ty≥
Ë
__THROW
;

468 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

469 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

470 
__∂usy
Ë
__THROW
;

471 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

472 
__mu…x
, 
__∂usy
Ë
__THROW
;

473 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

474 
uöt8_t
 **
__çåp
Ë
__THROW
;

475 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

476 
uöt8_t
 **
__çåp
, 
__ty≥
Ë
__THROW
;

482 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

483 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

484 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

485 
__THROW
;

488 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

489 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

490 
uöt32_t
 
__num§c
,

491 
__c⁄°
 
ö_addr
 *
__¶i°
)

492 
__THROW
;

496 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

497 
__c⁄°
 
sockaddr
 *
__group
,

498 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

499 
uöt32_t
 *
__num§c
,

500 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

503 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

504 
__c⁄°
 
sockaddr
 *
__group
,

505 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

506 
uöt32_t
 
__num§c
,

507 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

510 
__END_DECLS


	@/usr/include/pthread.h

19 #i‚de‡
_PTHREAD_H


20 
	#_PTHREAD_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	#__√ed_sig£t_t


	)

27 
	~<sig«l.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #ifde‡
__USE_UNIX98


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 
	#PTHREAD_MUTEX_INITIALIZER
 \

65 { { 0, 0, 0, 0, 0, 0 } }

	)

66 #ifde‡
__USE_GNU


67 #i‡
__WORDSIZE
 == 64

68 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

69 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0 } }

	)

70 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

71 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0 } }

	)

72 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

73 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0 } }

	)

75 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

76 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, 0 } }

	)

77 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

78 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, 0 } }

	)

79 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

80 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, 0 } }

	)

86 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


89 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

90 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

91 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

92 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


96 #i‡
__WORDSIZE
 == 64

97 
	#PTHREAD_RWLOCK_INITIALIZER
 \

98 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

100 
	#PTHREAD_RWLOCK_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

103 #ifde‡
__USE_GNU


104 #i‡
__WORDSIZE
 == 64

105 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

107 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

109 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

110 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, 0 } }

	)

119 
	mPTHREAD_INHERIT_SCHED
,

120 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

121 
	mPTHREAD_EXPLICIT_SCHED


122 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

129 
	mPTHREAD_SCOPE_SYSTEM
,

130 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

131 
	mPTHREAD_SCOPE_PROCESS


132 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

139 
	mPTHREAD_PROCESS_PRIVATE
,

140 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

141 
	mPTHREAD_PROCESS_SHARED


142 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

148 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

152 
	s_±hªad_˛ónup_buf„r


154 (*
	m__routöe
) (*);

155 *
	m__¨g
;

156 
	m__ˇn˚…y≥
;

157 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

163 
	mPTHREAD_CANCEL_ENABLE
,

164 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

165 
	mPTHREAD_CANCEL_DISABLE


166 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

170 
	mPTHREAD_CANCEL_DEFERRED
,

171 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

172 
	mPTHREAD_CANCEL_ASYNCHRONOUS


173 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

175 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

179 
	#PTHREAD_ONCE_INIT
 0

	)

182 #ifde‡
__USE_XOPEN2K


186 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

190 
__BEGIN_DECLS


195 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

196 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

197 *(*
__°¨t_routöe
) (*),

198 *
__ª°ri˘
 
__¨g
Ë
__THROW
;

204 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

212 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

214 #ifde‡
__USE_GNU


217 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

225 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

226 
__c⁄°
 
time•ec
 *
__ab°ime
);

233 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

237 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

240 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

248 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

251 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

254 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

255 *
__dëach°©e
Ë
__THROW
;

258 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

259 
__dëach°©e
Ë
__THROW
;

263 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

264 
size_t
 *
__gu¨dsize
Ë
__THROW
;

267 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

268 
size_t
 
__gu¨dsize
Ë
__THROW
;

272 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


273 
__©å
,

274 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

275 
__THROW
;

278 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

279 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


280 
__∑øm
Ë
__THROW
;

283 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


284 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

285 
__THROW
;

288 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

289 
__THROW
;

292 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


293 
__©å
, *
__ª°ri˘
 
__öhîô
)

294 
__THROW
;

297 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

298 
__öhîô
Ë
__THROW
;

302 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

303 *
__ª°ri˘
 
__sc›e
Ë
__THROW
;

306 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

307 
__THROW
;

310 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


311 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

312 
__THROW
 
__©åibuã_dïªˇãd__
;

318 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

319 *
__°ackaddr
)

320 
__THROW
 
__©åibuã_dïªˇãd__
;

323 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


324 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

325 
__THROW
;

330 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

331 
size_t
 
__°acksize
Ë
__THROW
;

333 #ifde‡
__USE_XOPEN2K


335 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

336 **
__ª°ri˘
 
__°ackaddr
,

337 
size_t
 *
__ª°ri˘
 
__°acksize
Ë
__THROW
;

342 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

343 
size_t
 
__°acksize
Ë
__THROW
;

346 #ifde‡
__USE_GNU


349 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

350 
size_t
 
__˝u£tsize
,

351 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

355 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

356 
size_t
 
__˝u£tsize
,

357 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

363 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
Ë
__THROW
;

371 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

372 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

373 
__THROW
;

376 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

377 *
__ª°ri˘
 
__pﬁicy
,

378 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

379 
__THROW
;

382 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

383 
__THROW
;

386 #ifde‡
__USE_UNIX98


388 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

391 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

394 #ifde‡
__USE_GNU


399 
	$±hªad_yõld
 (Ë
__THROW
;

404 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

405 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

408 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

409 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

422 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

423 (*
__öô_routöe
) ());

434 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

438 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

441 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

446 
	`±hªad_ã°ˇn˚l
 ();

455 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

456 
__mask_was_ßved
;

457 } 
__ˇn˚l_jmp_buf
[1];

458 *
__∑d
[4];

459 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

462 #i‚de‡
__˛ónup_f˘_©åibuã


463 
	#__˛ónup_f˘_©åibuã


	)

468 
	s__±hªad_˛ónup_‰ame


470 (*
__ˇn˚l_routöe
) (*);

471 *
__ˇn˚l_¨g
;

472 
__do_ô
;

473 
__ˇn˚l_ty≥
;

476 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


477 #ifde‡
__˝lu•lus


479 ˛as†
	c__±hªad_˛ónup_˛ass


481 (*
__ˇn˚l_routöe
) (*);

482 *
__ˇn˚l_¨g
;

483 
__do_ô
;

484 
__ˇn˚l_ty≥
;

486 
public
:

487 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

488 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	`__do_ô
 (1) { }

489 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

490 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

491 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

492 &
__ˇn˚l_ty≥
); 
	}
}

493 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

503 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

505 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

509 
	#±hªad_˛ónup_p›
(
execuã
) \

510 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

511 } 0)

	)

513 #ifde‡
__USE_GNU


517 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

519 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

520 
__˛‰ame
.
	`__de„r
 ()

	)

525 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

526 
__˛‰ame
.
	`__ª°‹e
 (); \

527 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

528 } 0)

	)

535 
__ölöe
 

536 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

538 i‡(
__‰ame
->
__do_ô
)

539 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

540 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

552 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

553 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

554 .
__do_ô
 = 1 };

	)

558 
	#±hªad_˛ónup_p›
(
execuã
) \

559 
__˛‰ame
.
__do_ô
 = (
execuã
); \

560 } 0)

	)

562 #ifde‡
__USE_GNU


566 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

569 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

570 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

571 .
__do_ô
 = 1 }; \

572 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

573 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

578 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

579 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

580 
__˛‰ame
.
__do_ô
 = (
execuã
); \

581 } 0)

	)

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

595 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

596 *
__ˇn˚l_¨g
 = (
¨g
); \

597 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

598 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

599 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

601 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

602 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

606 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

607 dÿ{

	)

608 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

609 
__˛ónup_f˘_©åibuã
;

613 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

616 i‡(
execuã
) \

617 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

618 } 0)

	)

619 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

620 
__˛ónup_f˘_©åibuã
;

622 #ifde‡
__USE_GNU


626 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

628 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

629 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

630 *
__ˇn˚l_¨g
 = (
¨g
); \

631 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

632 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

633 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

635 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

636 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

640 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

641 dÿ{

	)

642 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

643 
__˛ónup_f˘_©åibuã
;

648 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

650 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

651 i‡(
execuã
) \

652 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

653 
	}
} 0)

	)

654 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

660 
__˛ónup_f˘_©åibuã
 
	`__©åibuã
 ((
__n‹ëu∫__
))

661 #i‚de‡
SHARED


662 
	`__©åibuã
 ((
__wók__
))

668 
__jmp_buf_èg
;

669 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

675 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

676 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

677 
__THROW
;

680 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

683 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
_muãx
Ë
__THROW
;

686 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

688 #ifde‡
__USE_XOPEN2K


690 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

691 
__c⁄°
 
time•ec
 *
__ª°ri˘


692 
__ab°ime
Ë
__THROW
;

696 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

703 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

706 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

709 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

710 
__ª°ri˘
 
__©å
,

711 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

714 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

715 
__psh¨ed
Ë
__THROW
;

717 #ifde‡
__USE_UNIX98


719 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


720 
__©å
, *
__ª°ri˘
 
__köd
Ë
__THROW
;

725 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

726 
__THROW
;

730 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


735 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

736 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


737 
__©å
Ë
__THROW
;

740 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

743 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

746 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

748 #ifde‡
__USE_XOPEN2K


750 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

751 
__c⁄°
 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROW
;

756 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

759 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

761 #ifde‡
__USE_XOPEN2K


763 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

764 
__c⁄°
 
time•ec
 *
__ª°ri˘


765 
__ab°ime
Ë
__THROW
;

769 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

775 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

778 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

781 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

782 
__ª°ri˘
 
__©å
,

783 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

786 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

787 
__psh¨ed
Ë
__THROW
;

790 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__¥ef
Ë
__THROW
;

795 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

796 
__¥ef
Ë
__THROW
;

804 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

805 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


806 
__c⁄d_©å
Ë
__THROW
;

809 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

812 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

815 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

822 
	`±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

823 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
);

832 
	`±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

833 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

834 
__c⁄°
 
time•ec
 *
__ª°ri˘


835 
__ab°ime
);

840 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

843 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

846 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

847 
__ª°ri˘
 
__©å
,

848 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

851 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

852 
__psh¨ed
Ë
__THROW
;

854 #ifde‡
__USE_XOPEN2K


856 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

857 
__ª°ri˘
 
__©å
,

858 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

859 
__THROW
;

862 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

863 
__˛ockid_t
 
__˛ock_id
Ë
__THROW
;

868 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

874 
__THROW
;

877 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

880 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

883 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

886 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

893 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

894 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


895 
__©å
, 
__cou¡
Ë
__THROW
;

898 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

901 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

905 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

908 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

911 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

912 
__ª°ri˘
 
__©å
,

913 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

916 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

917 
__psh¨ed
Ë
__THROW
;

929 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

930 (*
__de°r_fun˘i⁄
Ë(*)Ë
__THROW
;

933 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

936 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

939 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

940 
__c⁄°
 *
__poöãr
Ë
__THROW
;

943 #ifde‡
__USE_XOPEN2K


945 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

946 
__˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

961 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

962 (*
__∑ª¡
) (),

963 (*
__chûd
Ë()Ë
__THROW
;

965 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

146 
	#°dö
 
°dö


	)

147 
	#°dout
 
°dout


	)

148 
	#°dîr
 
°dîr


	)

150 
__BEGIN_NAMESPACE_STD


152 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

155 
__END_NAMESPACE_STD


158 
__BEGIN_NAMESPACE_STD


163 #i‚de‡
__USE_FILE_OFFSET64


164 
FILE
 *
	`tmpfûe
 ();

166 #ifde‡
__REDIRECT


167 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

169 
	#tmpfûe
 
tmpfûe64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
FILE
 *
	`tmpfûe64
 ();

178 *
	$tm≤am
 (*
__s
Ë
__THROW
;

179 
__END_NAMESPACE_STD


181 #ifde‡
__USE_MISC


184 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

188 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


196 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

197 
__THROW
 
__©åibuã_mÆloc__
;

201 
__BEGIN_NAMESPACE_STD


206 
	`f˛o£
 (
FILE
 *
__°ªam
);

211 
	`fÊush
 (
FILE
 *
__°ªam
);

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


221 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

224 #ifde‡
__USE_GNU


231 
	`f˛o£Æl
 ();

235 
__BEGIN_NAMESPACE_STD


236 #i‚de‡
__USE_FILE_OFFSET64


241 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

242 
__c⁄°
 *
__ª°ri˘
 
__modes
);

247 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

248 
__c⁄°
 *
__ª°ri˘
 
__modes
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
);

251 #ifde‡
__REDIRECT


252 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

253 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

254 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

258 
	#f›í
 
f›í64


	)

259 
	#‰e›í
 
‰e›í64


	)

262 
__END_NAMESPACE_STD


263 #ifde‡
__USE_LARGEFILE64


264 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

265 
__c⁄°
 *
__ª°ri˘
 
__modes
);

266 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

267 
__c⁄°
 *
__ª°ri˘
 
__modes
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
);

271 #ifdef 
__USE_POSIX


273 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

276 #ifdef 
__USE_GNU


279 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

284 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

289 
FILE
 *
	$›í_mem°ªam
 (**
__ª°ri˘
 
__buÊoc
,

290 
size_t
 *
__ª°ri˘
 
__sizñoc
Ë
__THROW
;

294 
__BEGIN_NAMESPACE_STD


297 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

301 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

302 
__modes
, 
size_t
 
__n
Ë
__THROW
;

303 
__END_NAMESPACE_STD


305 #ifdef 
__USE_BSD


308 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
size_t
 
__size
Ë
__THROW
;

312 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

316 
__BEGIN_NAMESPACE_STD


321 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

322 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

327 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
	$•rötf
 (*
__ª°ri˘
 
__s
,

330 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

336 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

337 
_G_va_li°
 
__¨g
);

342 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

344 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

345 
_G_va_li°
 
__¨g
Ë
__THROW
;

346 
__END_NAMESPACE_STD


348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


349 
__BEGIN_NAMESPACE_C99


351 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

352 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

353 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

355 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

357 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

358 
__END_NAMESPACE_C99


361 #ifde‡
__USE_GNU


364 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

365 
_G_va_li°
 
__¨g
)

366 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

367 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

368 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

370 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

371 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

380 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

381 
_G_va_li°
 
__¨g
)

382 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

383 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

388 
__BEGIN_NAMESPACE_STD


393 
	`fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

394 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

399 
	`sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

401 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

402 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

403 
__END_NAMESPACE_STD


405 #ifdef 
__USE_ISOC99


406 
__BEGIN_NAMESPACE_C99


411 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

412 
_G_va_li°
 
__¨g
)

413 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

419 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0)));

423 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

424 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

425 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

426 
__END_NAMESPACE_C99


430 
__BEGIN_NAMESPACE_STD


435 
	`fgëc
 (
FILE
 *
__°ªam
);

436 
	`gëc
 (
FILE
 *
__°ªam
);

442 
	`gëch¨
 ();

443 
__END_NAMESPACE_STD


447 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

449 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


454 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

455 
	`gëch¨_u∆ocked
 ();

458 #ifde‡
__USE_MISC


465 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

469 
__BEGIN_NAMESPACE_STD


477 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

478 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putch¨
 (
__c
);

485 
__END_NAMESPACE_STD


489 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

491 #ifde‡
__USE_MISC


498 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

501 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


506 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 
	`putch¨_u∆ocked
 (
__c
);

511 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

512 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

514 
	`gëw
 (
FILE
 *
__°ªam
);

517 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

521 
__BEGIN_NAMESPACE_STD


526 *
	`fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
);

533 *
	`gës
 (*
__s
);

534 
__END_NAMESPACE_STD


536 #ifde‡
__USE_GNU


543 *
	`fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

544 
FILE
 *
__ª°ri˘
 
__°ªam
);

548 #ifdef 
__USE_GNU


559 
_IO_ssize_t
 
	`__gëdñim
 (**
__ª°ri˘
 
__löïå
,

560 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

561 
FILE
 *
__ª°ri˘
 
__°ªam
);

562 
_IO_ssize_t
 
	`gëdñim
 (**
__ª°ri˘
 
__löïå
,

563 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

564 
FILE
 *
__ª°ri˘
 
__°ªam
);

572 
_IO_ssize_t
 
	`gëlöe
 (**
__ª°ri˘
 
__löïå
,

573 
size_t
 *
__ª°ri˘
 
__n
,

574 
FILE
 *
__ª°ri˘
 
__°ªam
);

578 
__BEGIN_NAMESPACE_STD


583 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

589 
	`puts
 (
__c⁄°
 *
__s
);

596 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

603 
size_t
 
	`‰ód
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

604 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

609 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

610 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

611 
__END_NAMESPACE_STD


613 #ifde‡
__USE_GNU


620 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

621 
FILE
 *
__ª°ri˘
 
__°ªam
);

624 #ifde‡
__USE_MISC


631 
size_t
 
	`‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

632 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

633 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

634 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

638 
__BEGIN_NAMESPACE_STD


643 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

648 
	`·ñl
 (
FILE
 *
__°ªam
);

653 
	`ªwöd
 (
FILE
 *
__°ªam
);

654 
__END_NAMESPACE_STD


661 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


662 #i‚de‡
__USE_FILE_OFFSET64


667 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

672 
__off_t
 
	`·ñlo
 (
FILE
 *
__°ªam
);

674 #ifde‡
__REDIRECT


675 
	`__REDIRECT
 (
f£eko
,

676 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

677 
f£eko64
);

678 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

680 
	#f£eko
 
f£eko64


	)

681 
	#·ñlo
 
·ñlo64


	)

686 
__BEGIN_NAMESPACE_STD


687 #i‚de‡
__USE_FILE_OFFSET64


692 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

697 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

701 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

702 
	`__REDIRECT
 (
f£ços
,

703 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

705 
	#fgëpos
 
fgëpos64


	)

706 
	#f£ços
 
f£ços64


	)

709 
__END_NAMESPACE_STD


711 #ifde‡
__USE_LARGEFILE64


712 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

713 
__off64_t
 
	`·ñlo64
 (
FILE
 *
__°ªam
);

714 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

715 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

718 
__BEGIN_NAMESPACE_STD


720 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

722 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
;

724 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
;

725 
__END_NAMESPACE_STD


727 #ifde‡
__USE_MISC


729 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

730 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

731 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

735 
__BEGIN_NAMESPACE_STD


740 
	`≥º‹
 (
__c⁄°
 *
__s
);

741 
__END_NAMESPACE_STD


747 
	~<bôs/sys_îæi°.h
>

750 #ifdef 
__USE_POSIX


752 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
;

755 #ifde‡
__USE_MISC


757 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

761 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

762 
deföed
 
__USE_MISC
)

767 
FILE
 *
	`p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
);

773 
	`p˛o£
 (
FILE
 *
__°ªam
);

777 #ifdef 
__USE_POSIX


779 *
	$˘îmid
 (*
__s
Ë
__THROW
;

783 #ifde‡
__USE_XOPEN


785 *
	`cu£rid
 (*
__s
);

789 #ifdef 
__USE_GNU


790 
ob°ack
;

793 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

794 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

795 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

796 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

797 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

798 
_G_va_li°
 
__¨gs
)

799 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

803 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


807 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

811 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

814 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

817 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


821 
	#__√ed_gë›t


	)

822 
	~<gë›t.h
>

827 #ifde‡
__USE_EXTERN_INLINES


828 
	~<bôs/°dio.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


831 
	~<bôs/°dio2.h
>

834 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_C99


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

277 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

278 **
__ª°ri˘
 
__íd±r
, 
__group
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

281 **
__ª°ri˘
 
__íd±r
, 
__group
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

284 **
__ª°ri˘
 
__íd±r
,

285 
__group
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #i‚de‡
__°πﬁ_öã∫Æ_deföed


287 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

288 **
__ª°ri˘
 
__íd±r
,

289 
__ba£
, 
__group
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

293 #i‚de‡
__°πoul_öã∫Æ_deföed


294 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

295 **
__ª°ri˘
 
__íd±r
,

296 
__ba£
, 
__group
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	#__°πoul_öã∫Æ_deföed
 1

	)

300 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


301 #i‚de‡
__°πﬁl_öã∫Æ_deföed


302 
__exãnsi⁄__


303 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
__ba£
, 
__group
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

309 #i‚de‡
__°πouŒ_öã∫Æ_deföed


310 
__exãnsi⁄__


311 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

312 
__ª°ri˘
 
__≈å
,

313 **
__ª°ri˘
 
__íd±r
,

314 
__ba£
, 
__group
)

315 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

320 #ifde‡
__USE_EXTERN_INLINES


323 
__BEGIN_NAMESPACE_STD


324 
__ölöe
 

325 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

327  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

328 
	}
}

329 
__ölöe
 

330 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

331 
__ba£
))

333  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

334 
	}
}

335 
__ölöe
 

336 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

337 
__ba£
))

339  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

340 
	}
}

341 
__END_NAMESPACE_STD


343 #ifde‡
__USE_ISOC99


344 
__BEGIN_NAMESPACE_C99


345 
__ölöe
 

346 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

348  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

349 
	}
}

350 
__ölöe
 

351 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

353  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

354 
	}
}

355 
__END_NAMESPACE_C99


358 #ifde‡
__USE_BSD


359 
__exãnsi⁄__
 
__ölöe
 

360 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

361 
__ba£
))

363  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

364 
	}
}

365 
__exãnsi⁄__
 
__ölöe
 

366 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

367 
__ba£
))

369  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

370 
	}
}

373 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


374 
__BEGIN_NAMESPACE_C99


375 
__exãnsi⁄__
 
__ölöe
 

376 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

377 
__ba£
))

379  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

380 
	}
}

381 
__exãnsi⁄__
 
__ölöe
 

382 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

383 
__ba£
))

385  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

386 
	}
}

387 
__END_NAMESPACE_C99


390 
__BEGIN_NAMESPACE_STD


391 
__ölöe
 

392 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

394  
	`°πod
 (
__≈å
, (**Ë
NULL
);

395 
	}
}

396 
__ölöe
 

397 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

399  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

404  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__END_NAMESPACE_STD


408 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


409 
__BEGIN_NAMESPACE_C99


410 
__exãnsi⁄__
 
__ölöe
 

411 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

413  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

414 
	}
}

415 
__END_NAMESPACE_C99


420 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


424 *
	$l64a
 (
__n
Ë
__THROW
;

427 
	$a64l
 (
__c⁄°
 *
__s
)

428 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

432 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


433 
	~<sys/ty≥s.h
>

440 
	$øndom
 (Ë
__THROW
;

443 
	$§™dom
 (
__£ed
Ë
__THROW
;

449 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

450 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

454 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 #ifde‡
__USE_MISC


462 
	søndom_d©a


464 
öt32_t
 *
Âå
;

465 
öt32_t
 *
Ωå
;

466 
öt32_t
 *
°©e
;

467 
ønd_ty≥
;

468 
ønd_deg
;

469 
ønd_£p
;

470 
öt32_t
 *
íd_±r
;

473 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

474 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

477 
__THROW
 
	`__n⁄nuŒ
 ((2));

479 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

480 
size_t
 
__°©ñí
,

481 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

484 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

485 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

486 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 
__BEGIN_NAMESPACE_STD


493 
	$ønd
 (Ë
__THROW
;

495 
	$§™d
 (
__£ed
Ë
__THROW
;

496 
__END_NAMESPACE_STD


498 #ifde‡
__USE_POSIX


500 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

504 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


508 
	$dønd48
 (Ë
__THROW
;

509 
	`î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

512 
	$Ã™d48
 (Ë
__THROW
;

513 
	`ƒ™d48
 (
__xsubi
[3])

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$mønd48
 (Ë
__THROW
;

518 
	`jønd48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

523 *
	`£ed48
 (
__£ed16v
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

525 
	`lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

527 #ifde‡
__USE_MISC


531 
	sdønd48_d©a


533 
__x
[3];

534 
__ﬁd_x
[3];

535 
__c
;

536 
__öô
;

537 
__a
;

541 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

542 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

543 
	`î™d48_r
 (
__xsubi
[3],

544 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

545 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

549 *
__ª°ri˘
 
__ªsu…
)

550 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 
	`ƒ™d48_r
 (
__xsubi
[3],

552 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

553 *
__ª°ri˘
 
__ªsu…
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 
	`jønd48_r
 (
__xsubi
[3],

561 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

562 *
__ª°ri˘
 
__ªsu…
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

566 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

567 
__THROW
 
	`__n⁄nuŒ
 ((2));

569 
	`£ed48_r
 (
__£ed16v
[3],

570 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 
	`lc⁄g48_r
 (
__∑øm
[7],

573 
dønd48_d©a
 *
__buf„r
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


581 
	#__mÆloc_™d_ˇŒoc_deföed


	)

582 
__BEGIN_NAMESPACE_STD


584 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

586 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
;

588 
__END_NAMESPACE_STD


591 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


592 
__BEGIN_NAMESPACE_STD


595 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

597 
	$‰ì
 (*
__±r
Ë
__THROW
;

598 
__END_NAMESPACE_STD


600 #ifdef 
__USE_MISC


602 
	$c‰ì
 (*
__±r
Ë
__THROW
;

605 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


606 
	~<Æloˇ.h
>

609 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


611 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

614 #ifde‡
__USE_XOPEN2K


616 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

617 
__THROW
 
	`__n⁄nuŒ
 ((1));

620 
__BEGIN_NAMESPACE_STD


622 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

627 
__END_NAMESPACE_STD


629 #ifdef 
__USE_MISC


632 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

633 
__THROW
 
	`__n⁄nuŒ
 ((1));

636 
__BEGIN_NAMESPACE_STD


640 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 
__END_NAMESPACE_STD


643 #ifde‡
__USE_ISOC99


644 
__BEGIN_NAMESPACE_C99


647 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

648 
__END_NAMESPACE_C99


652 
__BEGIN_NAMESPACE_STD


654 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

655 
__END_NAMESPACE_STD


659 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

661 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


665 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


671 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

672 
__THROW
 
	`__n⁄nuŒ
 ((2));

675 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

678 #ifdef 
__USE_MISC


682 
	$˛óªnv
 (Ë
__THROW
;

686 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


691 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

701 #i‚de‡
__USE_FILE_OFFSET64


702 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

704 #ifde‡
__REDIRECT


705 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
Ë
	`__n⁄nuŒ
 ((1));

707 
	#mk°emp
 
mk°emp64


	)

710 #ifde‡
__USE_LARGEFILE64


711 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

715 #ifde‡
__USE_BSD


721 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

725 
__BEGIN_NAMESPACE_STD


730 
	`sy°em
 (
__c⁄°
 *
__comm™d
);

731 
__END_NAMESPACE_STD


734 #ifdef 
__USE_GNU


738 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


749 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

750 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
;

755 #i‚de‡
__COMPAR_FN_T


756 
	#__COMPAR_FN_T


	)

757 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

759 #ifdef 
__USE_GNU


760 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

764 
__BEGIN_NAMESPACE_STD


767 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

768 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

769 
	`__n⁄nuŒ
 ((1, 2, 5));

773 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

774 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

778 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

779 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

780 
__END_NAMESPACE_STD


782 #ifde‡
__USE_ISOC99


783 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

784 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

788 
__BEGIN_NAMESPACE_STD


792 
div_t
 
	$div
 (
__numî
, 
__díom
)

793 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

794 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

796 
__END_NAMESPACE_STD


798 #ifde‡
__USE_ISOC99


799 
__BEGIN_NAMESPACE_C99


800 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

801 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

803 
__END_NAMESPACE_C99


807 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


814 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

820 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

821 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

826 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3));

830 #ifde‡
__USE_MISC


832 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

835 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

836 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

838 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

839 
__THROW
 
	`__n⁄nuŒ
 ((3));

844 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

848 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

849 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

855 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

856 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

857 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

858 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

863 
__BEGIN_NAMESPACE_STD


866 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

870 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

877 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

878 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

880 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

881 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

882 
__THROW
;

883 
__END_NAMESPACE_STD


886 #ifde‡
__USE_SVID


891 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN_EXTENDED


902 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

903 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

904 **
__ª°ri˘
 
__vÆuï
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

909 #ifde‡
__USE_XOPEN


911 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

917 #ifde‡
__USE_XOPEN2K


919 
	`posix_›í±
 (
__oÊag
);

922 #ifde‡
__USE_XOPEN


927 
	$gø¡±
 (
__fd
Ë
__THROW
;

931 
	$u∆ock±
 (
__fd
Ë
__THROW
;

936 *
	$±¢ame
 (
__fd
Ë
__THROW
;

939 #ifde‡
__USE_GNU


943 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

944 
__THROW
 
	`__n⁄nuŒ
 ((2));

947 
	`gë±
 ();

950 #ifde‡
__USE_BSD


954 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

955 
__THROW
 
	`__n⁄nuŒ
 ((1));

959 #unde‡
__√ed_mÆloc_™d_ˇŒoc


961 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

288 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_BSD


292 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

296 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

300 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

307 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

312 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

316 #ifdef 
__USE_GNU


317 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

318 #ifde‡
__GNUC__


319 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

333 #ifdef 
__USE_GNU


336 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

337 
__loˇÀ_t
 
__loc
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

340 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

341 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

345 #ifdef 
__USE_BSD


348 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

349 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 #ifdef 
__USE_GNU


355 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

356 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

362 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

370 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

373 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

380 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

382 #i‚de‡
ba£«me


387 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

393 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

394 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


414 
	~<bôs/°rög.h
>

417 
	~<bôs/°rög2.h
>

420 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


422 
	~<bôs/°rög3.h
>

426 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


122 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

123 
__may_move
Ë
__THROW
;

130 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

131 
__THROW
;

135 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

136 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

141 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

144 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

146 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

35 
	~<bôs/sockë.h
>

37 #ifde‡
__USE_BSD


40 
	sosockaddr


42 
	mß_Ámûy
;

43 
	mß_d©a
[14];

51 
	mSHUT_RD
 = 0,

52 
	#SHUT_RD
 
SHUT_RD


	)

53 
	mSHUT_WR
,

54 
	#SHUT_WR
 
SHUT_WR


	)

55 
	mSHUT_RDWR


56 
	#SHUT_RDWR
 
SHUT_RDWR


	)

65 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


66 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

67 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

71 
	#__SOCKADDR_ALLTYPES
 \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

86 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

87 uni⁄ { 
	m__SOCKADDR_ALLTYPES


88 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

89 #unde‡
__SOCKADDR_ONETYPE


90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


100 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

106 
	`sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

107 
__fds
[2]Ë
__THROW
;

110 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

111 
__THROW
;

114 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

115 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

124 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

128 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

136 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

143 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

150 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

151 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

152 
sockÀn_t
 
__addr_Àn
);

161 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

162 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

163 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

171 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

172 
__Êags
);

179 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

185 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

186 *
__ª°ri˘
 
__›tvÆ
,

187 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

192 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

193 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

199 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

209 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

210 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

218 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

221 #ifde‡
__USE_XOPEN2K


223 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

227 #ifde‡
__USE_MISC


231 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

234 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_MISC


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #ifde‡
__USE_MISC


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

153 #ifdef 
__USE_POSIX199309


154 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

155 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

156 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

162 
	#S_ISUID
 
__S_ISUID


	)

163 
	#S_ISGID
 
__S_ISGID


	)

165 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


167 
	#S_ISVTX
 
__S_ISVTX


	)

170 
	#S_IRUSR
 
__S_IREAD


	)

171 
	#S_IWUSR
 
__S_IWRITE


	)

172 
	#S_IXUSR
 
__S_IEXEC


	)

174 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

176 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


177 
	#S_IREAD
 
S_IRUSR


	)

178 
	#S_IWRITE
 
S_IWUSR


	)

179 
	#S_IEXEC
 
S_IXUSR


	)

182 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

183 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

184 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

186 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

188 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

189 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

190 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

192 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

195 #ifdef 
__USE_BSD


197 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

198 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

199 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

201 
	#S_BLKSIZE
 512

	)

205 #i‚de‡
__USE_FILE_OFFSET64


207 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

208 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

212 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

216 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

217 
	`__n⁄nuŒ
 ((1, 2));

218 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

219 
	`__n⁄nuŒ
 ((2));

221 
	#°©
 
°©64


	)

222 
	#f°©
 
f°©64


	)

225 #ifde‡
__USE_LARGEFILE64


226 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

227 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

228 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


232 #i‚de‡
__USE_FILE_OFFSET64


235 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

236 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
l°©
,

240 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

242 
	`__n⁄nuŒ
 ((1, 2));

244 
	#l°©
 
l°©64


	)

247 #ifde‡
__USE_LARGEFILE64


248 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

249 
°©64
 *
__ª°ri˘
 
__buf
)

250 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

256 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

257 
__THROW
 
	`__n⁄nuŒ
 ((1));

259 #ifde‡
__USE_BSD


263 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


269 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

275 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

277 #ifdef 
__USE_GNU


280 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

284 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


291 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 #i‚de‡
_STAT_VER


316 
	#_STAT_VER
 0

	)

318 #i‚de‡
_MKNOD_VER


319 
	#_MKNOD_VER
 0

	)

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

325 
__THROW
 
	`__n⁄nuŒ
 ((3));

326 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

327 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

328 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

329 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

331 #ifde‡
__REDIRECT_NTH


332 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

333 
°©
 *
__°©_buf
), 
__fx°©64
)

334 
	`__n⁄nuŒ
 ((3));

335 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

336 
°©
 *
__°©_buf
), 
__x°©64
)

337 
	`__n⁄nuŒ
 ((2, 3));

338 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

339 
°©
 *
__°©_buf
), 
__lx°©64
)

340 
	`__n⁄nuŒ
 ((2, 3));

343 
	#__fx°©
 
__fx°©64


	)

344 
	#__x°©
 
__x°©64


	)

345 
	#__lx°©
 
__lx°©64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

351 
__THROW
 
	`__n⁄nuŒ
 ((3));

352 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

353 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

355 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

358 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

360 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

363 
__ölöe__
 

364 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

366  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

367 
	}
}

369 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


370 
__ölöe__
 

371 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

373  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

374 
	}
}

377 
__ölöe__
 

378 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

380  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

381 
	}
}

383 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


384 
__ölöe__
 

385 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

387  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

388 
	}
}

391 #i‡
deföed
 
__USE_LARGEFILE64
 \

392 && (! 
deföed
 
__USE_FILE_OFFSET64
 \

393 || (
deföed
 
__REDIRECT_NTH
 && deföed 
__OPTIMIZE__
))

394 
__ölöe__
 

395 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

397  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

398 
	}
}

400 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


401 
__ölöe__
 

402 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

404  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

405 
	}
}

408 
__ölöe__
 

409 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

411  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

412 
	}
}

417 
__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__GLIBC_HAVE_LONG_LONG


167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__GLIBC_HAVE_LONG_LONG


176 
__exãnsi⁄__
 
	tu_öt64_t
;

179 
	tªgi°î_t
;

184 
	#__ötN_t
(
N
, 
MODE
) \

185 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

186 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

187 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #i‚de‡
	t__öt8_t_deföed


190 
	t__öt8_t_deföed


	)

191 
	t__ötN_t
 (8, 
	t__QI__
);

192 
__ötN_t
 (16, 
__HI__
);

193 
__ötN_t
 (32, 
__SI__
);

194 
__ötN_t
 (64, 
__DI__
);

197 
__u_ötN_t
 (8, 
__QI__
);

198 
__u_ötN_t
 (16, 
__HI__
);

199 
__u_ötN_t
 (32, 
__SI__
);

200 
__u_ötN_t
 (64, 
__DI__
);

202 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

208 
	#__BIT_TYPES_DEFINED__
 1

	)

211 #ifdef 
__USE_BSD


213 
	~<ídün.h
>

216 
	~<sys/£À˘.h
>

219 
	~<sys/sysma¸os.h
>

223 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


224 
__blksize_t
 
	tblksize_t
;

225 
	#__blksize_t_deföed


	)

229 #i‚de‡
__USE_FILE_OFFSET64


230 #i‚de‡
__blk˙t_t_deföed


231 
__blk˙t_t
 
	tblk˙t_t
;

232 
	#__blk˙t_t_deföed


	)

234 #i‚de‡
__fsblk˙t_t_deföed


235 
__fsblk˙t_t
 
	tfsblk˙t_t
;

236 
	#__fsblk˙t_t_deföed


	)

238 #i‚de‡
__fsfû˙t_t_deföed


239 
__fsfû˙t_t
 
	tfsfû˙t_t
;

240 
	#__fsfû˙t_t_deföed


	)

243 #i‚de‡
__blk˙t_t_deföed


244 
__blk˙t64_t
 
	tblk˙t_t
;

245 
	#__blk˙t_t_deföed


	)

247 #i‚de‡
__fsblk˙t_t_deföed


248 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

249 
	#__fsblk˙t_t_deföed


	)

251 #i‚de‡
__fsfû˙t_t_deföed


252 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

253 
	#__fsfû˙t_t_deföed


	)

257 #ifde‡
__USE_LARGEFILE64


258 
__blk˙t64_t
 
	tblk˙t64_t
;

259 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

260 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

265 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


266 
	~<bôs/±hªadty≥s.h
>

269 
	g__END_DECLS


	@/usr/include/sys/wait.h

23 #i‚def 
_SYS_WAIT_H


24 
	#_SYS_WAIT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<sig«l.h
>

31 
	~<sys/ªsour˚.h
>

34 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


37 
	~<bôs/waôÊags.h
>

39 #ifdef 
__USE_BSD


44 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


45 
	#__WAIT_INT
(
°©us
) \

46 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

47 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

49 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

57 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


58 
	#__WAIT_STATUS
 *

	)

59 
	#__WAIT_STATUS_DEFN
 *

	)

64 
waô
 *
	m__u±r
;

65 *
	m__ùå
;

66 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

67 
	#__WAIT_STATUS_DEFN
 *

	)

72 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

73 
	#__WAIT_STATUS
 *

	)

74 
	#__WAIT_STATUS_DEFN
 *

	)

79 
	~<bôs/waô°©us.h
>

81 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

82 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

83 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

87 #ifde‡
__WIFCONTINUED


88 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

92 #ifdef 
__USE_BSD


93 
	#WCOREFLAG
 
__WCOREFLAG


	)

94 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

95 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
‘ë, sig)

	)

96 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
(sig)

	)

100 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


103 
	mP_ALL
,

104 
	mP_PID
,

105 
	mP_PGID


106 } 
	tidty≥_t
;

115 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

117 #ifdef 
__USE_BSD


119 
	#WAIT_ANY
 (-1Ë

	)

120 
	#WAIT_MYPGRP
 0

	)

138 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

140 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


141 
	#__√ed_sigöfo_t


	)

142 
	~<bôs/sigöfo.h
>

154 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

155 
__›ti⁄s
);

158 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


161 
	grußge
;

168 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 * 
__ußge
Ë
__THROW
;

172 #ifde‡
__USE_BSD


175 
rußge
;

178 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

179 
rußge
 *
__ußge
Ë
__THROW
;

183 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_UNIX98


60 
	#_XOPEN_VERSION
 500

	)

62 
	#_XOPEN_VERSION
 4

	)

66 
	#_XOPEN_XCU_VERSION
 4

	)

69 
	#_XOPEN_XPG2
 1

	)

70 
	#_XOPEN_XPG3
 1

	)

71 
	#_XOPEN_XPG4
 1

	)

74 
	#_XOPEN_UNIX
 1

	)

77 
	#_XOPEN_CRYPT
 1

	)

81 
	#_XOPEN_ENH_I18N
 1

	)

84 
	#_XOPEN_LEGACY
 1

	)

171 
	~<bôs/posix_›t.h
>

174 #ifde‡
__USE_UNIX98


175 
	~<bôs/ívú⁄míts.h
>

179 
	#STDIN_FILENO
 0

	)

180 
	#STDOUT_FILENO
 1

	)

181 
	#STDERR_FILENO
 2

	)

186 
	~<bôs/ty≥s.h
>

188 #i‚def 
__ssize_t_deföed


189 
__ssize_t
 
	tssize_t
;

190 
	#__ssize_t_deföed


	)

193 
	#__√ed_size_t


	)

194 
	#__√ed_NULL


	)

195 
	~<°ddef.h
>

197 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


200 #i‚de‡
__gid_t_deföed


201 
__gid_t
 
	tgid_t
;

202 
	#__gid_t_deföed


	)

205 #i‚de‡
__uid_t_deföed


206 
__uid_t
 
	tuid_t
;

207 
	#__uid_t_deföed


	)

210 #i‚de‡
__off_t_deföed


211 #i‚de‡
__USE_FILE_OFFSET64


212 
__off_t
 
	toff_t
;

214 
__off64_t
 
	toff_t
;

216 
	#__off_t_deföed


	)

218 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


219 
__off64_t
 
	toff64_t
;

220 
	#__off64_t_deföed


	)

223 #i‚de‡
__u£c⁄ds_t_deföed


224 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

225 
	#__u£c⁄ds_t_deföed


	)

228 #i‚de‡
__pid_t_deföed


229 
__pid_t
 
	tpid_t
;

230 
	#__pid_t_deföed


	)

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


235 #i‚de‡
__öçå_t_deföed


236 
__öçå_t
 
	töçå_t
;

237 
	#__öçå_t_deföed


	)

241 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


242 #i‚de‡
__sockÀn_t_deföed


243 
__sockÀn_t
 
	tsockÀn_t
;

244 
	#__sockÀn_t_deföed


	)

250 
	#R_OK
 4

	)

251 
	#W_OK
 2

	)

252 
	#X_OK
 1

	)

253 
	#F_OK
 0

	)

256 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__USE_GNU


261 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 #i‚def 
_STDIO_H


268 
	#SEEK_SET
 0

	)

269 
	#SEEK_CUR
 1

	)

270 
	#SEEK_END
 2

	)

273 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


275 
	#L_SET
 
SEEK_SET


	)

276 
	#L_INCR
 
SEEK_CUR


	)

277 
	#L_XTND
 
SEEK_END


	)

286 #i‚de‡
__USE_FILE_OFFSET64


287 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

289 #ifde‡
__REDIRECT_NTH


290 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

291 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

292 
l£ek64
);

294 
	#l£ek
 
l£ek64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

305 
	`˛o£
 (
__fd
);

312 
ssize_t
 
	`ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
);

318 
ssize_t
 
	`wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
);

320 #ifde‡
__USE_UNIX98


321 #i‚de‡
__USE_FILE_OFFSET64


328 
ssize_t
 
	`¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

329 
__off_t
 
__off£t
);

336 
ssize_t
 
	`pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

337 
__off_t
 
__off£t
);

339 #ifde‡
__REDIRECT


340 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

341 
__off64_t
 
__off£t
),

342 
¥ód64
);

343 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

344 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

345 
pwrôe64
);

347 
	#¥ód
 
¥ód64


	)

348 
	#pwrôe
 
pwrôe64


	)

352 #ifde‡
__USE_LARGEFILE64


356 
ssize_t
 
	`¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

357 
__off64_t
 
__off£t
);

360 
ssize_t
 
	`pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

361 
__off64_t
 
__off£t
);

369 
	`pùe
 (
__pùedes
[2]Ë
__THROW
;

378 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

390 
	`¶ìp
 (
__£c⁄ds
);

392 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


397 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

398 
__THROW
;

405 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

414 
	`∑u£
 ();

418 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

419 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


423 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
;

428 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

429 
__THROW
 
	`__n⁄nuŒ
 ((1));

434 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchdú
 (
__fd
Ë
__THROW
;

448 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
;

450 #ifdef 
__USE_GNU


454 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

457 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 *
	$gëwd
 (*
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

466 
	$dup
 (
__fd
Ë
__THROW
;

469 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

472 **
__ívú⁄
;

473 #ifde‡
__USE_GNU


474 **
ívú⁄
;

480 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

481 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

483 #ifde‡
__USE_GNU


486 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

487 
__THROW
;

492 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

493 
__THROW
 
	`__n⁄nuŒ
 ((1));

497 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

498 
__THROW
 
	`__n⁄nuŒ
 ((1));

502 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

503 
__THROW
 
	`__n⁄nuŒ
 ((1));

507 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

508 
__THROW
 
	`__n⁄nuŒ
 ((1));

513 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


519 
	$ni˚
 (
__öc
Ë
__THROW
;

524 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

530 
	~<bôs/c⁄‚ame.h
>

533 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

540 
	$sysc⁄f
 (
__«me
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

542 #ifdef 
__USE_POSIX2


544 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

549 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

552 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

556 #i‚de‡
__FAVOR_BSD


557 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

559 #ifde‡
__REDIRECT_NTH


560 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

562 
	#gëpgΩ
 
__gëpgid


	)

567 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

568 #ifde‡
__USE_XOPEN_EXTENDED


569 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

576 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

578 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


589 #i‚de‡
__FAVOR_BSD


593 
	$£çgΩ
 (Ë
__THROW
;

598 #ifde‡
__REDIRECT_NTH


599 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

601 
	#£çgΩ
 
£çgid


	)

610 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

612 #ifde‡
__USE_XOPEN_EXTENDED


614 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

618 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

621 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

624 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

627 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

632 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
;

634 #ifdef 
__USE_GNU


636 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

643 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

645 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


648 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


653 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

660 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

662 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


670 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

673 #ifde‡
__USE_GNU


676 
	`gëªsuid
 (
__uid_t
 *
__euid
, __uid_à*
__ruid
, __uid_à*
__suid
);

680 
	`gëªsgid
 (
__gid_t
 *
__egid
, __gid_à*
__rgid
, __gid_à*
__sgid
);

684 
	`£åesuid
 (
__uid_t
 
__euid
, __uid_à
__ruid
, __uid_à
__suid
);

688 
	`£åesgid
 (
__gid_t
 
__egid
, __gid_à
__rgid
, __gid_à
__sgid
);

695 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

697 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


702 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

708 *
	$ây«me
 (
__fd
Ë
__THROW
;

712 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

713 
__THROW
 
	`__n⁄nuŒ
 ((2));

717 
	$ißây
 (
__fd
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 \

720 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

723 
	$ây¶Ÿ
 (Ë
__THROW
;

728 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


733 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

734 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

739 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

740 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

744 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

747 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

751 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

754 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

761 *
	`gëlogö
 ();

762 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_UNIX98


769 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

772 #ifdef 
__USE_BSD


774 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifdef 
__USE_POSIX2


782 
	#__√ed_gë›t


	)

783 
	~<gë›t.h
>

787 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


791 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

798 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1));

803 
	$£tho°id
 (
__id
Ë
__THROW
;

809 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

818 
	$vh™gup
 (Ë
__THROW
;

821 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

830 
size_t
 
__off£t
, 
__sˇÀ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

837 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

841 *
	$gëu£rshñl
 (Ë
__THROW
;

842 
	$ídu£rshñl
 (Ë
__THROW
;

843 
	$£tu£rshñl
 (Ë
__THROW
;

849 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
;

853 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

856 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

864 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


869 
	`fsync
 (
__fd
);

873 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


876 
	`gëho°id
 ();

879 
	$sync
 (Ë
__THROW
;

884 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

889 
	$gëdèbÀsize
 (Ë
__THROW
;

893 #i‚de‡
__USE_FILE_OFFSET64


894 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 #ifde‡
__REDIRECT_NTH


898 
	`__REDIRECT_NTH
 (
åunˇã
,

899 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

900 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1));

902 
	#åunˇã
 
åunˇã64


	)

905 #ifde‡
__USE_LARGEFILE64


906 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

907 
__THROW
 
	`__n⁄nuŒ
 ((1));

912 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


915 #i‚de‡
__USE_FILE_OFFSET64


916 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
;

918 #ifde‡
__REDIRECT_NTH


919 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

920 
·runˇã64
);

922 
	#·runˇã
 
·runˇã64


	)

925 #ifde‡
__USE_LARGEFILE64


926 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
;

932 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


936 
	$brk
 (*
__addr
Ë
__THROW
;

942 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

946 #ifde‡
__USE_MISC


957 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

962 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


974 
	#F_ULOCK
 0

	)

975 
	#F_LOCK
 1

	)

976 
	#F_TLOCK
 2

	)

977 
	#F_TEST
 3

	)

979 #i‚de‡
__USE_FILE_OFFSET64


980 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

982 #ifde‡
__REDIRECT


983 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

984 
lockf64
);

986 
	#lockf
 
lockf64


	)

989 #ifde‡
__USE_LARGEFILE64


990 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

995 #ifde‡
__USE_GNU


1000 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1001 (
__exãnsi⁄__
 \

1002 ({ 
__ªsu…
; \

1003 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1004 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1005 
__ªsu…
; 
	}
}))

	)

1008 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1011 
	$fd©async
 (
__fûdes
Ë
__THROW
;

1017 #ifdef 
__USE_XOPEN


1019 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1031 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1032 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1038 #ifde‡
__USE_XOPEN


1040 *
	$˘îmid
 (*
__s
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/byteswap.h

20 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


24 #i‚de‡
_BITS_BYTESWAP_H


25 
	#_BITS_BYTESWAP_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

33 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

34 
	#__bsw≠_16
(
x
) \

35 (
__exãnsi⁄__
 \

36 ({ 
__v
, 
__x
 = (
x
); \

37 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

38 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

40 
	`__asm__
 ("rorw $8, %w0" \

41 : "Ù" (
__v
) \

42 : "0" (
__x
) \

44 
__v
; }))

	)

47 
	#__bsw≠_16
(
x
) \

48 (
__exãnsi⁄__
 \

49 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

54 
	#__bsw≠_c⁄°™t_32
(
x
) \

55 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

56 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

58 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

59 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

60 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

61 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

62 || 
deföed
 
	g__k6__
)

65 
	#__bsw≠_32
(
x
) \

66 (
__exãnsi⁄__
 \

67 ({ 
__v
, 
__x
 = (
x
); \

68 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

69 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

71 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

72 
__v
; }))

	)

74 
	#__bsw≠_32
(
x
) \

75 (
__exãnsi⁄__
 \

76 ({ 
__v
, 
__x
 = (
x
); \

77 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

78 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

80 
	`__asm__
 ("rorw $8, %w0;" \

83 : "Ù" (
__v
) \

84 : "0" (
__x
) \

86 
__v
; }))

	)

89 
	#__bsw≠_32
(
x
) \

90 (
__exãnsi⁄__
 \

91 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

95 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

107 #i‡
__WORDSIZE
 == 64

108 
	#__bsw≠_64
(
x
) \

109 (
__exãnsi⁄__
 \

110 ({ 
__v
, 
__x
 = (
x
); \

111 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

112 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

114 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

115 
__v
; }))

	)

117 
	#__bsw≠_64
(
x
) \

118 (
__exãnsi⁄__
 \

119 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

120 
__l
[2]; } 
__w
, 
__r
; \

121 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

122 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

125 
__w
.
__Œ
 = (
x
); \

126 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

127 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

129 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

514 
	m_CS_GNU_LIBC_VERSION
,

515 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

516 
	m_CS_GNU_LIBPTHREAD_VERSION
,

517 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

519 
	m_CS_LFS_CFLAGS
 = 1000,

520 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

521 
	m_CS_LFS_LDFLAGS
,

522 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

523 
	m_CS_LFS_LIBS
,

524 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

525 
	m_CS_LFS_LINTFLAGS
,

526 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

527 
	m_CS_LFS64_CFLAGS
,

528 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

529 
	m_CS_LFS64_LDFLAGS
,

530 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

531 
	m_CS_LFS64_LIBS
,

532 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

533 
	m_CS_LFS64_LINTFLAGS
,

534 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

536 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

537 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

538 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

539 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

540 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

541 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

542 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

543 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

544 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

545 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

546 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

547 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

548 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

549 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

550 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

551 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

552 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

553 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

554 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

555 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

556 
	m_CS_XBS5_LP64_OFF64_LIBS
,

557 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

558 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

559 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

560 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

561 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

562 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

563 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

564 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

565 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

566 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

567 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

569 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

570 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

571 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

572 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

573 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

574 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

575 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

576 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

577 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

578 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

579 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

580 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

581 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

582 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

583 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

584 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

585 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

586 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

587 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

588 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

589 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

590 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

591 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

592 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

593 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

594 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

595 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

596 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

597 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

598 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

599 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


600 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

32 #i‚de‡
ECANCELED


33 
	#ECANCELED
 125

	)

36 #i‚de‡
__ASSEMBLER__


38 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

40 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


42 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

47 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


51 
	#EDOM
 33

	)

52 
	#EILSEQ
 84

	)

53 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

30 
	#O_ACCMODE
 0003

	)

31 
	#O_RDONLY
 00

	)

32 
	#O_WRONLY
 01

	)

33 
	#O_RDWR
 02

	)

34 
	#O_CREAT
 0100

	)

35 
	#O_EXCL
 0200

	)

36 
	#O_NOCTTY
 0400

	)

37 
	#O_TRUNC
 01000

	)

38 
	#O_APPEND
 02000

	)

39 
	#O_NONBLOCK
 04000

	)

40 
	#O_NDELAY
 
O_NONBLOCK


	)

41 
	#O_SYNC
 010000

	)

42 
	#O_FSYNC
 
O_SYNC


	)

43 
	#O_ASYNC
 020000

	)

45 #ifde‡
__USE_GNU


46 
	#O_DIRECT
 040000

	)

47 
	#O_DIRECTORY
 0200000

	)

48 
	#O_NOFOLLOW
 0400000

	)

49 
	#O_NOATIME
 01000000

	)

55 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


56 
	#O_DSYNC
 
O_SYNC


	)

57 
	#O_RSYNC
 
O_SYNC


	)

60 #ifde‡
__USE_LARGEFILE64


61 #i‡
__WORDSIZE
 == 64

62 
	#O_LARGEFILE
 0

	)

64 
	#O_LARGEFILE
 0100000

	)

69 
	#F_DUPFD
 0

	)

70 
	#F_GETFD
 1

	)

71 
	#F_SETFD
 2

	)

72 
	#F_GETFL
 3

	)

73 
	#F_SETFL
 4

	)

74 #i‡
__WORDSIZE
 == 64

75 
	#F_GETLK
 5

	)

76 
	#F_SETLK
 6

	)

77 
	#F_SETLKW
 7

	)

79 
	#F_GETLK64
 5

	)

80 
	#F_SETLK64
 6

	)

81 
	#F_SETLKW64
 7

	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
	#F_GETLK
 5

	)

85 
	#F_SETLK
 6

	)

86 
	#F_SETLKW
 7

	)

88 
	#F_GETLK
 
F_GETLK64


	)

89 
	#F_SETLK
 
F_SETLK64


	)

90 
	#F_SETLKW
 
F_SETLKW64


	)

92 
	#F_GETLK64
 12

	)

93 
	#F_SETLK64
 13

	)

94 
	#F_SETLKW64
 14

	)

97 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


98 
	#F_SETOWN
 8

	)

99 
	#F_GETOWN
 9

	)

102 #ifde‡
__USE_GNU


103 
	#F_SETSIG
 10

	)

104 
	#F_GETSIG
 11

	)

107 #ifde‡
__USE_GNU


108 
	#F_SETLEASE
 1024

	)

109 
	#F_GETLEASE
 1025

	)

110 
	#F_NOTIFY
 1026

	)

114 
	#FD_CLOEXEC
 1

	)

117 
	#F_RDLCK
 0

	)

118 
	#F_WRLCK
 1

	)

119 
	#F_UNLCK
 2

	)

122 
	#F_EXLCK
 4

	)

123 
	#F_SHLCK
 8

	)

125 #ifde‡
__USE_BSD


127 
	#LOCK_SH
 1

	)

128 
	#LOCK_EX
 2

	)

129 
	#LOCK_NB
 4

	)

131 
	#LOCK_UN
 8

	)

134 #ifde‡
__USE_GNU


135 
	#LOCK_MAND
 32

	)

136 
	#LOCK_READ
 64

	)

137 
	#LOCK_WRITE
 128

	)

138 
	#LOCK_RW
 192

	)

141 #ifde‡
__USE_GNU


143 
	#DN_ACCESS
 0x00000001

	)

144 
	#DN_MODIFY
 0x00000002

	)

145 
	#DN_CREATE
 0x00000004

	)

146 
	#DN_DELETE
 0x00000008

	)

147 
	#DN_RENAME
 0x00000010

	)

148 
	#DN_ATTRIB
 0x00000020

	)

149 
	#DN_MULTISHOT
 0x80000000

	)

152 
	sÊock


154 
	ml_ty≥
;

155 
	ml_whí˚
;

156 #i‚de‡
__USE_FILE_OFFSET64


157 
__off_t
 
	ml_°¨t
;

158 
__off_t
 
	ml_Àn
;

160 
__off64_t
 
	ml_°¨t
;

161 
__off64_t
 
	ml_Àn
;

163 
__pid_t
 
	ml_pid
;

166 #ifde‡
__USE_LARGEFILE64


167 
	sÊock64


169 
	ml_ty≥
;

170 
	ml_whí˚
;

171 
__off64_t
 
	ml_°¨t
;

172 
__off64_t
 
	ml_Àn
;

173 
__pid_t
 
	ml_pid
;

179 #ifdef 
__USE_BSD


180 
	#FAPPEND
 
O_APPEND


	)

181 
	#FFSYNC
 
O_FSYNC


	)

182 
	#FASYNC
 
O_ASYNC


	)

183 
	#FNONBLOCK
 
O_NONBLOCK


	)

184 
	#FNDELAY
 
O_NDELAY


	)

188 #ifde‡
__USE_XOPEN2K


189 
	#POSIX_FADV_NORMAL
 0

	)

190 
	#POSIX_FADV_RANDOM
 1

	)

191 
	#POSIX_FADV_SEQUENTIAL
 2

	)

192 
	#POSIX_FADV_WILLNEED
 3

	)

193 
	#POSIX_FADV_DONTNEED
 4

	)

194 
	#POSIX_FADV_NOREUSE
 5

	)

197 
__BEGIN_DECLS


200 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

201 
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

54 
	#MCAST_EXCLUDE
 0

	)

55 
	#MCAST_INCLUDE
 1

	)

57 
	#IP_ROUTER_ALERT
 5

	)

58 
	#IP_PKTINFO
 8

	)

59 
	#IP_PKTOPTIONS
 9

	)

60 
	#IP_PMTUDISC
 10

	)

61 
	#IP_MTU_DISCOVER
 10

	)

62 
	#IP_RECVERR
 11

	)

63 
	#IP_RECVTTL
 12

	)

64 
	#IP_RECVTOS
 13

	)

68 
	#IP_PMTUDISC_DONT
 0

	)

69 
	#IP_PMTUDISC_WANT
 1

	)

70 
	#IP_PMTUDISC_DO
 2

	)

73 
	#SOL_IP
 0

	)

75 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

76 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

77 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 
	sù_›ts


84 
ö_addr
 
	mù_d°
;

85 
	mù_›ts
[40];

89 
	sù_mªqn


91 
ö_addr
 
	mimr_mu…üddr
;

92 
ö_addr
 
	mimr_addªss
;

93 
	mimr_ifödex
;

97 
	sö_pktöfo


99 
	mùi_ifödex
;

100 
ö_addr
 
	mùi_•ec_d°
;

101 
ö_addr
 
	mùi_addr
;

107 
	#IPV6_ADDRFORM
 1

	)

108 
	#IPV6_PKTINFO
 2

	)

109 
	#IPV6_HOPOPTS
 3

	)

110 
	#IPV6_DSTOPTS
 4

	)

111 
	#IPV6_RTHDR
 5

	)

112 
	#IPV6_PKTOPTIONS
 6

	)

113 
	#IPV6_CHECKSUM
 7

	)

114 
	#IPV6_HOPLIMIT
 8

	)

116 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

118 
	#IPV6_NEXTHOP
 9

	)

119 
	#IPV6_AUTHHDR
 10

	)

120 
	#IPV6_UNICAST_HOPS
 16

	)

121 
	#IPV6_MULTICAST_IF
 17

	)

122 
	#IPV6_MULTICAST_HOPS
 18

	)

123 
	#IPV6_MULTICAST_LOOP
 19

	)

124 
	#IPV6_JOIN_GROUP
 20

	)

125 
	#IPV6_LEAVE_GROUP
 21

	)

126 
	#IPV6_ROUTER_ALERT
 22

	)

127 
	#IPV6_MTU_DISCOVER
 23

	)

128 
	#IPV6_MTU
 24

	)

129 
	#IPV6_RECVERR
 25

	)

130 
	#IPV6_V6ONLY
 26

	)

131 
	#IPV6_JOIN_ANYCAST
 27

	)

132 
	#IPV6_LEAVE_ANYCAST
 28

	)

133 
	#IPV6_IPSEC_POLICY
 34

	)

134 
	#IPV6_XFRM_POLICY
 35

	)

137 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

138 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

139 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

140 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

143 
	#IPV6_PMTUDISC_DONT
 0

	)

144 
	#IPV6_PMTUDISC_WANT
 1

	)

145 
	#IPV6_PMTUDISC_DO
 2

	)

148 
	#SOL_IPV6
 41

	)

149 
	#SOL_ICMPV6
 58

	)

152 
	#IPV6_RTHDR_LOOSE
 0

	)

153 
	#IPV6_RTHDR_STRICT
 1

	)

155 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #ifde‡
__USE_ISOC99


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

356 
	g__END_NAMESPACE_C99


358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


360 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 #ifde‡
__˝lu•lus


26 
	#__MATH_INLINE
 
__ölöe


	)

28 
	#__MATH_INLINE
 
__ölöe


	)

32 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

35 
__MATH_INLINE
 

36 
__NTH
 (
	$__signbôf
 (
__x
))

38 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

39  
__u
.
__i
 < 0;

40 
	}
}

41 
__MATH_INLINE
 

42 
__NTH
 (
	$__signbô
 (
__x
))

44 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

45  
__u
.
__i
[1] < 0;

46 
	}
}

47 
__MATH_INLINE
 

48 
__NTH
 (
	$__signbôl
 (
__x
))

50 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

51  (
__u
.
__i
[2] & 0x8000) != 0;

52 
	}
}

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

70 
	#MS_ASYNC
 1

	)

71 
	#MS_SYNC
 4

	)

72 
	#MS_INVALIDATE
 2

	)

75 
	#MCL_CURRENT
 1

	)

76 
	#MCL_FUTURE
 2

	)

80 #ifde‡
__USE_GNU


81 
	#MREMAP_MAYMOVE
 1

	)

85 #ifde‡
__USE_BSD


86 
	#MADV_NORMAL
 0

	)

87 
	#MADV_RANDOM
 1

	)

88 
	#MADV_SEQUENTIAL
 2

	)

89 
	#MADV_WILLNEED
 3

	)

90 
	#MADV_DONTNEED
 4

	)

94 #ifde‡
__USE_XOPEN2K


95 
	#POSIX_MADV_NORMAL
 0

	)

96 
	#POSIX_MADV_RANDOM
 1

	)

97 
	#POSIX_MADV_SEQUENTIAL
 2

	)

98 
	#POSIX_MADV_WILLNEED
 3

	)

99 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
(""))

	)

31 #ñi‡
deföed__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_SHM
 1

	)

67 
	#_POSIX_THREADS
 200112L

	)

70 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

71 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

74 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

77 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

83 
	#_POSIX_SEMAPHORES
 200112L

	)

86 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

89 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

90 
	#_POSIX_ASYNC_IO
 1

	)

92 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

94 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

97 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

100 
	#_LFS_LARGEFILE
 1

	)

101 
	#_LFS64_LARGEFILE
 1

	)

102 
	#_LFS64_STDIO
 1

	)

105 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

108 
	#_POSIX_CPUTIME
 0

	)

111 
	#_POSIX_THREAD_CPUTIME
 0

	)

114 
	#_POSIX_REGEXP
 1

	)

117 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

120 
	#_POSIX_SHELL
 1

	)

123 
	#_POSIX_TIMEOUTS
 200112L

	)

126 
	#_POSIX_SPIN_LOCKS
 200112L

	)

129 
	#_POSIX_SPAWN
 200112L

	)

132 
	#_POSIX_TIMERS
 200112L

	)

135 
	#_POSIX_BARRIERS
 200112L

	)

138 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

141 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

144 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

147 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

150 
	#_POSIX_ADVISORY_INFO
 200112L

	)

153 
	#_POSIX_IPV6
 200112L

	)

156 
	#_POSIX_RAW_SOCKETS
 200112L

	)

159 
	#_POSIX2_CHAR_TERM
 200112L

	)

162 
	#_POSIX_SPORADIC_SERVER
 -1

	)

163 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

166 
	#_POSIX_TRACE
 -1

	)

167 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

168 
	#_POSIX_TRACE_INHERIT
 -1

	)

169 
	#_POSIX_TRACE_LOG
 -1

	)

172 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

175 
	#_POSIX_THREAD_PRIO_INHERIT
 -1

	)

176 
	#_POSIX_THREAD_PRIO_PROTECT
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

66 
	m__lock
;

67 
	m__cou¡
;

68 
	m__ow√r
;

69 #i‡
__WORDSIZE
 == 64

70 
	m__nu£rs
;

74 
	m__köd
;

75 #i‡
__WORDSIZE
 != 64

76 
	m__nu£rs
;

78 
	m__•ös
;

79 } 
	m__d©a
;

80 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

81 
	m__Æign
;

82 } 
	t±hªad_muãx_t
;

86 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

87 
	m__Æign
;

88 } 
	t±hªad_muãx©å_t
;

97 
	m__lock
;

98 
	m__fuãx
;

99 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

100 
__exãnsi⁄__
 
	m__wakeup_£q
;

101 
__exãnsi⁄__
 
	m__wokí_£q
;

102 *
	m__muãx
;

103 
	m__nwaôîs
;

104 
	m__brﬂdˇ°_£q
;

105 } 
	m__d©a
;

106 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

107 
__exãnsi⁄__
 
	m__Æign
;

108 } 
	t±hªad_c⁄d_t
;

112 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

113 
	m__Æign
;

114 } 
	t±hªad_c⁄d©å_t
;

118 
	t±hªad_key_t
;

122 
	t±hªad_⁄˚_t
;

125 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


130 #i‡
__WORDSIZE
 == 64

133 
	m__lock
;

134 
	m__ƒ_ªadîs
;

135 
	m__ªadîs_wakeup
;

136 
	m__wrôî_wakeup
;

137 
	m__ƒ_ªadîs_queued
;

138 
	m__ƒ_wrôîs_queued
;

139 
	m__wrôî
;

140 
	m__∑d1
;

141 
	m__∑d2
;

142 
	m__∑d3
;

145 
	m__Êags
;

146 } 
	m__d©a
;

150 
	m__lock
;

151 
	m__ƒ_ªadîs
;

152 
	m__ªadîs_wakeup
;

153 
	m__wrôî_wakeup
;

154 
	m__ƒ_ªadîs_queued
;

155 
	m__ƒ_wrôîs_queued
;

158 
	m__Êags
;

159 
	m__wrôî
;

160 } 
	m__d©a
;

162 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

163 
	m__Æign
;

164 } 
	t±hªad_rwlock_t
;

168 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

169 
	m__Æign
;

170 } 
	t±hªad_rwlock©å_t
;

174 #ifde‡
__USE_XOPEN2K


176 vﬁ©ûê
	t±hªad_•ölock_t
;

183 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

184 
	m__Æign
;

185 } 
	t±hªad_b¨rõr_t
;

189 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

190 
	m__Æign
;

191 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‡
__WORDSIZE
 == 64

33 #i‡
deföed
 
__USE_MISC
 || deföed 
_ASM


34 
	#JB_RBX
 0

	)

35 
	#JB_RBP
 1

	)

36 
	#JB_R12
 2

	)

37 
	#JB_R13
 3

	)

38 
	#JB_R14
 4

	)

39 
	#JB_R15
 5

	)

40 
	#JB_RSP
 6

	)

41 
	#JB_PC
 7

	)

42 
	#JB_SIZE
 (8*8)

	)

47 #i‡
deföed
 
__USE_MISC
 || deföed 
_ASM


48 
	#JB_BX
 0

	)

49 
	#JB_SI
 1

	)

50 
	#JB_DI
 2

	)

51 
	#JB_BP
 3

	)

52 
	#JB_SP
 4

	)

53 
	#JB_PC
 5

	)

54 
	#JB_SIZE
 24

	)

59 #i‚de‡
_ASM


61 #i‡
__WORDSIZE
 == 64

62 
	t__jmp_buf
[8];

64 
	t__jmp_buf
[6];

69 #i‡
__WORDSIZE
 == 64

70 
	#_JMPBUF_UNWINDS
(
jmpbuf
, 
addªss
) \

71 ((*Ë(
addªss
Ë< (*Ë(
jmpbuf
)[
JB_RSP
])

	)

73 
	#_JMPBUF_UNWINDS
(
jmpbuf
, 
addªss
) \

74 ((*Ë(
addªss
Ë< (*Ë(
jmpbuf
)[
JB_SP
])

	)

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‡!
deföed
 
_SYS_SOCKET_H
 && !deföed 
_NETINET_IN_H


27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<limôs.h
>

32 
	~<sys/ty≥s.h
>

35 #i‚de‡
__sockÀn_t_deföed


36 
__sockÀn_t
 
	tsockÀn_t
;

37 
	#__sockÀn_t_deföed


	)

41 
	e__sockë_ty≥


43 
	mSOCK_STREAM
 = 1,

45 
	#SOCK_STREAM
 
SOCK_STREAM


	)

46 
	mSOCK_DGRAM
 = 2,

48 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

49 
	mSOCK_RAW
 = 3,

50 
	#SOCK_RAW
 
SOCK_RAW


	)

51 
	mSOCK_RDM
 = 4,

52 
	#SOCK_RDM
 
SOCK_RDM


	)

53 
	mSOCK_SEQPACKET
 = 5,

55 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

56 
	mSOCK_PACKET
 = 10

59 
	#SOCK_PACKET
 
SOCK_PACKET


	)

63 
	#PF_UNSPEC
 0

	)

64 
	#PF_LOCAL
 1

	)

65 
	#PF_UNIX
 
PF_LOCAL


	)

66 
	#PF_FILE
 
PF_LOCAL


	)

67 
	#PF_INET
 2

	)

68 
	#PF_AX25
 3

	)

69 
	#PF_IPX
 4

	)

70 
	#PF_APPLETALK
 5

	)

71 
	#PF_NETROM
 6

	)

72 
	#PF_BRIDGE
 7

	)

73 
	#PF_ATMPVC
 8

	)

74 
	#PF_X25
 9

	)

75 
	#PF_INET6
 10

	)

76 
	#PF_ROSE
 11

	)

77 
	#PF_DEC√t
 12

	)

78 
	#PF_NETBEUI
 13

	)

79 
	#PF_SECURITY
 14

	)

80 
	#PF_KEY
 15

	)

81 
	#PF_NETLINK
 16

	)

82 
	#PF_ROUTE
 
PF_NETLINK


	)

83 
	#PF_PACKET
 17

	)

84 
	#PF_ASH
 18

	)

85 
	#PF_ECONET
 19

	)

86 
	#PF_ATMSVC
 20

	)

87 
	#PF_SNA
 22

	)

88 
	#PF_IRDA
 23

	)

89 
	#PF_PPPOX
 24

	)

90 
	#PF_WANPIPE
 25

	)

91 
	#PF_BLUETOOTH
 31

	)

92 
	#PF_MAX
 32

	)

95 
	#AF_UNSPEC
 
PF_UNSPEC


	)

96 
	#AF_LOCAL
 
PF_LOCAL


	)

97 
	#AF_UNIX
 
PF_UNIX


	)

98 
	#AF_FILE
 
PF_FILE


	)

99 
	#AF_INET
 
PF_INET


	)

100 
	#AF_AX25
 
PF_AX25


	)

101 
	#AF_IPX
 
PF_IPX


	)

102 
	#AF_APPLETALK
 
PF_APPLETALK


	)

103 
	#AF_NETROM
 
PF_NETROM


	)

104 
	#AF_BRIDGE
 
PF_BRIDGE


	)

105 
	#AF_ATMPVC
 
PF_ATMPVC


	)

106 
	#AF_X25
 
PF_X25


	)

107 
	#AF_INET6
 
PF_INET6


	)

108 
	#AF_ROSE
 
PF_ROSE


	)

109 
	#AF_DEC√t
 
PF_DEC√t


	)

110 
	#AF_NETBEUI
 
PF_NETBEUI


	)

111 
	#AF_SECURITY
 
PF_SECURITY


	)

112 
	#AF_KEY
 
PF_KEY


	)

113 
	#AF_NETLINK
 
PF_NETLINK


	)

114 
	#AF_ROUTE
 
PF_ROUTE


	)

115 
	#AF_PACKET
 
PF_PACKET


	)

116 
	#AF_ASH
 
PF_ASH


	)

117 
	#AF_ECONET
 
PF_ECONET


	)

118 
	#AF_ATMSVC
 
PF_ATMSVC


	)

119 
	#AF_SNA
 
PF_SNA


	)

120 
	#AF_IRDA
 
PF_IRDA


	)

121 
	#AF_PPPOX
 
PF_PPPOX


	)

122 
	#AF_WANPIPE
 
PF_WANPIPE


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_MAX
 
PF_MAX


	)

130 
	#SOL_RAW
 255

	)

131 
	#SOL_DECNET
 261

	)

132 
	#SOL_X25
 262

	)

133 
	#SOL_PACKET
 263

	)

134 
	#SOL_ATM
 264

	)

135 
	#SOL_AAL
 265

	)

136 
	#SOL_IRDA
 266

	)

139 
	#SOMAXCONN
 128

	)

142 
	~<bôs/sockaddr.h
>

145 
	ssockaddr


147 
__SOCKADDR_COMMON
 (
ß_
);

148 
	mß_d©a
[14];

154 #i‡
ULONG_MAX
 > 0xffffffff

155 
	#__ss_Æig¡y≥
 
__uöt64_t


	)

157 
	#__ss_Æig¡y≥
 
__uöt32_t


	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000

209 
	#MSG_MORE
 
MSG_MORE


	)

215 
	smsghdr


217 *
	mmsg_«me
;

218 
sockÀn_t
 
	mmsg_«mñí
;

220 
iovec
 *
	mmsg_iov
;

221 
size_t
 
	mmsg_iovÀn
;

223 *
	mmsg_c⁄åﬁ
;

224 
size_t
 
	mmsg_c⁄åﬁÀn
;

226 
	mmsg_Êags
;

230 
	scmsghdr


232 
size_t
 
	mcmsg_Àn
;

234 
	mcmsg_Àvñ
;

235 
	mcmsg_ty≥
;

236 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

237 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

242 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

243 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

245 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

247 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

248 
	#CMSG_FIRSTHDR
(
mhdr
) \

249 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

250 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë
NULL
)

	)

251 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

252 & (
size_t
Ë~( (size_tË- 1))

	)

253 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

254 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

255 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

257 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

258 
cmsghdr
 *
__cmsg
Ë
__THROW
;

259 #ifde‡
__USE_EXTERN_INLINES


260 #i‚de‡
_EXTERN_INLINE


261 
	#_EXTERN_INLINE
 
__ölöe


	)

263 
_EXTERN_INLINE
 
cmsghdr
 *

264 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

266 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

270 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

271 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

272 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


273 + 
__mhdr
->
msg_c⁄åﬁÀn
)

274 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

275 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

278  
__cmsg
;

279 
	}
}

286 
SCM_RIGHTS
 = 0x01

287 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

288 #ifde‡
__USE_BSD


289 , 
SCM_CREDENTIALS
 = 0x02

290 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

296 
	su¸ed


298 
pid_t
 
	mpid
;

299 
uid_t
 
	muid
;

300 
gid_t
 
	mgid
;

304 
	~<asm/sockë.h
>

308 
	slögî


310 
	ml_⁄off
;

311 
	ml_lögî
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

56 
__STDIO_INLINE
 

57 
	$gëch¨_u∆ocked
 ()

59  
	`_IO_gëc_u∆ocked
 (
°dö
);

60 
	}
}

65 
__STDIO_INLINE
 

66 
	$putch¨
 (
__c
)

68  
	`_IO_putc
 (
__c
, 
°dout
);

69 
	}
}

72 #ifde‡
__USE_MISC


74 
__STDIO_INLINE
 

75 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

77  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

78 
	}
}

82 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

91 
__STDIO_INLINE
 

92 
	$putch¨_u∆ocked
 (
__c
)

94  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

95 
	}
}

99 #ifdef 
__USE_GNU


101 
__STDIO_INLINE
 
_IO_ssize_t


102 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

104  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

105 
	}
}

109 #ifde‡
__USE_MISC


111 
__STDIO_INLINE
 

112 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

114  
	`_IO_„of_u∆ocked
 (
__°ªam
);

115 
	}
}

118 
__STDIO_INLINE
 

119 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

121  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

122 
	}
}

128 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


130 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

131 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

132 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

133 && (
size_t
Ë(
size
) != 0) \

134 ? ({ *
__±r
 = (*Ë(
±r
); \

135 
FILE
 *
__°ªam
 = (
°ªam
); \

136 
size_t
 
__˙t
; \

137 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

138 
__˙t
 > 0; --__cnt) \

140 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

141 i‡(
__c
 =
EOF
) \

143 *
__±r
++ = 
__c
; \

145 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

146 / (
size_t
Ë(
size
); }) \

147 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

148 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

150 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

151 (Ë(
n
), (
size_t
) 0) \

152 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

154 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

155 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

156 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

157 && (
size_t
Ë(
size
) != 0) \

158 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

159 
FILE
 *
__°ªam
 = (
°ªam
); \

160 
size_t
 
__˙t
; \

161 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

162 
__˙t
 > 0; --__cnt) \

163 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

165 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

166 / (
size_t
Ë(
size
); }) \

167 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

168 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

170 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

171 (Ë(
n
), (
size_t
) 0) \

172 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

176 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 
	#¥ötf
(...) \

65 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

66 
	#Ârötf
(
°ªam
, ...) \

67 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

68 
	#v¥ötf
(
f‹m©
, 
≠
) \

69 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

70 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

71 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

75 *
	`__gës_chk
 (*
__°r
, 
size_t
);

76 
	#gës
(
__°r
) \

77 ((
	`__bos
 (
__°r
Ë=(
size_t
) -1) \

78 ? (
gës
Ë(
__°r
Ë: 
	`__gës_chk
 (__°r, 
	`__bos
 (__°r)))

	)

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË(
c
); __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 (1, 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 (1, 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


26 #unde‡
mem˝y


27 #unde‡
memmove


28 #unde‡
mem£t


29 #unde‡
°rˇt


30 #unde‡
°r˝y


31 #unde‡
°∫ˇt


32 #unde‡
°∫˝y


33 #ifde‡
__USE_GNU


34 #unde‡
memp˝y


35 #unde‡
°p˝y


37 #ifde‡
__USE_BSD


38 #unde‡
bc›y


39 #unde‡
bzîo


43 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

44 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

45 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

46 : 
	`__mem˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

47 
__ölöe__
 *

48 
__©åibuã__
 ((
__Æways_ölöe__
))

49 
	$__mem˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
)

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

56 
	#memmove
(
de°
, 
§c
, 
Àn
) \

57 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

58 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

59 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
))

	)

60 
__ölöe__
 *

61 
__©åibuã__
 ((
__Æways_ölöe__
))

62 
	$__memmove_ichk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

64  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

65 
	}
}

68 #ifde‡
__USE_GNU


69 
	#memp˝y
(
de°
, 
§c
, 
Àn
) \

70 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

71 ? 
	`__buûtö___memp˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

72 : 
	`__memp˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

73 
__ölöe__
 *

74 
__©åibuã__
 ((
__Æways_ölöe__
))

75 
	$__memp˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

76 
size_t
 
__Àn
)

78  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

79 
	}
}

83 
	#mem£t
(
de°
, 
ch
, 
Àn
) \

84 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

85 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
ch
, 
Àn
, 
	`__bos0
 (dest)) \

86 : 
	`__mem£t_ichk
 (
de°
, 
ch
, 
Àn
))

	)

87 
__ölöe__
 *

88 
__©åibuã__
 ((
__Æways_ölöe__
))

89 
	$__mem£t_ichk
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
)

91  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 #ifde‡
__USE_BSD


95 
	#bc›y
(
§c
, 
de°
, 
Àn
) (() \

96 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

97 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

98 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
)))

	)

99 
	#bzîo
(
de°
, 
Àn
) (() \

100 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

101 ? 
	`__buûtö___mem£t_chk
 (
de°
, '\0', 
Àn
, 
	`__bos0
 (dest)) \

102 : 
	`__mem£t_ichk
 (
de°
, '\0', 
Àn
)))

	)

106 
	#°r˝y
(
de°
, 
§c
) \

107 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

108 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

109 : 
	`__°r˝y_ichk
 (
de°
, 
§c
))

	)

110 
__ölöe__
 *

111 
__©åibuã__
 ((
__Æways_ölöe__
))

112 
	$__°r˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

114  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

118 #ifde‡
__USE_GNU


119 
	#°p˝y
(
de°
, 
§c
) \

120 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

121 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

122 : 
	`__°p˝y_ichk
 (
de°
, 
§c
))

	)

123 
__ölöe__
 *

124 
__©åibuã__
 ((
__Æways_ölöe__
))

125 
	$__°p˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

127  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

128 
	}
}

132 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

133 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

134 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

135 : 
	`__°∫˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

136 
__ölöe__
 *

137 
__©åibuã__
 ((
__Æways_ölöe__
))

138 
	$__°∫˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

139 
size_t
 
__Àn
)

141  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

142 
	}
}

145 
	#°rˇt
(
de°
, 
§c
) \

146 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

147 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

148 : 
	`__°rˇt_ichk
 (
de°
, 
§c
))

	)

149 
__ölöe__
 *

150 
__©åibuã__
 ((
__Æways_ölöe__
))

151 
	$__°rˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

153  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

154 
	}
}

157 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

158 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

159 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

160 : 
	`__°∫ˇt_ichk
 (
de°
, 
§c
, 
Àn
))

	)

161 
__ölöe__
 *

162 
__©åibuã__
 ((
__Æways_ölöe__
))

163 
	$__°∫ˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

164 
size_t
 
__Àn
)

166  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

167 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	#__SQUAD_TYPE
 

	)

119 
	#__UQUAD_TYPE
 

	)

120 
	#__SWORD_TYPE
 

	)

121 
	#__UWORD_TYPE
 

	)

122 
	#__SLONG32_TYPE
 

	)

123 
	#__ULONG32_TYPE
 

	)

124 
	#__S64_TYPE
 

	)

125 
	#__U64_TYPE
 

	)

129 
	~<bôs/ty≥sizes.h
>

133 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

136 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

137 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

138 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

139 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

140 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

141 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

142 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

143 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

144 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

145 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

146 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

147 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

148 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

149 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

150 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

151 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

152 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

153 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

155 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

156 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

157 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

160 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

163 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

166 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

171 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

172 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

175 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

176 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

179 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

180 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

186 
__off64_t
 
	t__loff_t
;

187 
__quad_t
 *
	t__qaddr_t
;

188 *
	t__ˇddr_t
;

191 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

194 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

197 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WALL
 0x40000000

	)

36 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

90 #unde‡
__USE_ISOC99


91 #unde‡
__USE_POSIX


92 #unde‡
__USE_POSIX2


93 #unde‡
__USE_POSIX199309


94 #unde‡
__USE_POSIX199506


95 #unde‡
__USE_XOPEN


96 #unde‡
__USE_XOPEN_EXTENDED


97 #unde‡
__USE_UNIX98


98 #unde‡
__USE_XOPEN2K


99 #unde‡
__USE_LARGEFILE


100 #unde‡
__USE_LARGEFILE64


101 #unde‡
__USE_FILE_OFFSET64


102 #unde‡
__USE_BSD


103 #unde‡
__USE_SVID


104 #unde‡
__USE_MISC


105 #unde‡
__USE_GNU


106 #unde‡
__USE_REENTRANT


107 #unde‡
__USE_FORTIFY_LEVEL


108 #unde‡
__FAVOR_BSD


109 #unde‡
__KERNEL_STRICT_NAMES


113 #i‚de‡
_LOOSE_KERNEL_NAMES


114 
	#__KERNEL_STRICT_NAMES


	)

118 
	#__USE_ANSI
 1

	)

127 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


128 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

129 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

131 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

136 #i‡
deföed
 
_BSD_SOURCE
 && \

137 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

138 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

139 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

140 
	#__FAVOR_BSD
 1

	)

144 #ifde‡
_GNU_SOURCE


145 #unde‡
_ISOC99_SOURCE


146 
	#_ISOC99_SOURCE
 1

	)

147 #unde‡
_POSIX_SOURCE


148 
	#_POSIX_SOURCE
 1

	)

149 #unde‡
_POSIX_C_SOURCE


150 
	#_POSIX_C_SOURCE
 199506L

	)

151 #unde‡
_XOPEN_SOURCE


152 
	#_XOPEN_SOURCE
 600

	)

153 #unde‡
_XOPEN_SOURCE_EXTENDED


154 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

155 #unde‡
_LARGEFILE64_SOURCE


156 
	#_LARGEFILE64_SOURCE
 1

	)

157 #unde‡
_BSD_SOURCE


158 
	#_BSD_SOURCE
 1

	)

159 #unde‡
_SVID_SOURCE


160 
	#_SVID_SOURCE
 1

	)

165 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

166 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

167 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

168 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

169 
	#_BSD_SOURCE
 1

	)

170 
	#_SVID_SOURCE
 1

	)

177 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

178 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

179 
	#__USE_ISOC99
 1

	)

184 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

185 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

186 
	#_POSIX_SOURCE
 1

	)

187 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

188 
	#_POSIX_C_SOURCE
 2

	)

190 
	#_POSIX_C_SOURCE
 199506L

	)

194 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


195 
	#__USE_POSIX
 1

	)

198 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


199 
	#__USE_POSIX2
 1

	)

202 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

203 
	#__USE_POSIX199309
 1

	)

206 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

207 
	#__USE_POSIX199506
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

211 
	#__USE_XOPEN2K
 1

	)

214 #ifdef 
_XOPEN_SOURCE


215 
	#__USE_XOPEN
 1

	)

216 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

217 
	#__USE_XOPEN_EXTENDED
 1

	)

218 
	#__USE_UNIX98
 1

	)

219 #unde‡
_LARGEFILE_SOURCE


220 
	#_LARGEFILE_SOURCE
 1

	)

221 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

222 
	#__USE_XOPEN2K
 1

	)

223 #unde‡
__USE_ISOC99


224 
	#__USE_ISOC99
 1

	)

227 #ifde‡
_XOPEN_SOURCE_EXTENDED


228 
	#__USE_XOPEN_EXTENDED
 1

	)

233 #ifde‡
_LARGEFILE_SOURCE


234 
	#__USE_LARGEFILE
 1

	)

237 #ifde‡
_LARGEFILE64_SOURCE


238 
	#__USE_LARGEFILE64
 1

	)

241 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

242 
	#__USE_FILE_OFFSET64
 1

	)

245 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


246 
	#__USE_MISC
 1

	)

249 #ifdef 
_BSD_SOURCE


250 
	#__USE_BSD
 1

	)

253 #ifdef 
_SVID_SOURCE


254 
	#__USE_SVID
 1

	)

257 #ifdef 
_GNU_SOURCE


258 
	#__USE_GNU
 1

	)

261 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


262 
	#__USE_REENTRANT
 1

	)

265 #i‡
_FORTIFY_SOURCE
 > 0 && 
__GNUC_PREREQ
 (4, 1Ë&& 
__OPTIMIZE__
 > 0

266 #i‡
_FORTIFY_SOURCE
 == 1

267 
	#__USE_FORTIFY_LEVEL
 1

	)

268 #ñi‡
_FORTIFY_SOURCE
 > 1

269 
	#__USE_FORTIFY_LEVEL
 2

	)

274 
	#__STDC_IEC_559__
 1

	)

275 
	#__STDC_IEC_559_COMPLEX__
 1

	)

278 
	#__STDC_ISO_10646__
 200009L

	)

286 #unde‡
__GNU_LIBRARY__


287 
	#__GNU_LIBRARY__
 6

	)

291 
	#__GLIBC__
 2

	)

292 
	#__GLIBC_MINOR__
 3

	)

294 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

295 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

298 #i‡
deföed
 
__GNUC__
 \

299 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

300 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

301 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

302 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

306 #i‚de‡
__ASSEMBLER__


307 #i‚de‡
_SYS_CDEFS_H


308 
	~<sys/cdefs.h
>

313 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


314 
	#__USE_LARGEFILE
 1

	)

315 
	#__USE_LARGEFILE64
 1

	)

321 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

322 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


323 
	#__USE_EXTERN_INLINES
 1

	)

331 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

147 
	#_IO_SKIPWS
 01

	)

148 
	#_IO_LEFT
 02

	)

149 
	#_IO_RIGHT
 04

	)

150 
	#_IO_INTERNAL
 010

	)

151 
	#_IO_DEC
 020

	)

152 
	#_IO_OCT
 040

	)

153 
	#_IO_HEX
 0100

	)

154 
	#_IO_SHOWBASE
 0200

	)

155 
	#_IO_SHOWPOINT
 0400

	)

156 
	#_IO_UPPERCASE
 01000

	)

157 
	#_IO_SHOWPOS
 02000

	)

158 
	#_IO_SCIENTIFIC
 04000

	)

159 
	#_IO_FIXED
 010000

	)

160 
	#_IO_UNITBUF
 020000

	)

161 
	#_IO_STDIO
 040000

	)

162 
	#_IO_DONT_CLOSE
 0100000

	)

163 
	#_IO_BOOLALPHA
 0200000

	)

166 
_IO_jump_t
; 
	g_IO_FILE
;

169 #ifde‡
_IO_MTSAFE_IO


170 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

171 
	~<bôs/°dio-lock.h
>

176 
	t_IO_lock_t
;

182 
	s_IO_m¨kî
 {

183 
_IO_m¨kî
 *
	m_√xt
;

184 
_IO_FILE
 *
	m_sbuf
;

188 
	m_pos
;

190 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

191 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

192 
	mpublic
:

193 
°ªamm¨kî
(
°ªambuf
 *
sb
);

194 ~
°ªamm¨kî
();

195 
ßvög
(Ë{  
	m_•os
 == -2; }

196 
dñè
(
°ªamm¨kî
&);

197 
dñè
();

202 
	e__codecvt_ªsu…


204 
	m__codecvt_ok
,

205 
	m__codecvt_∑πül
,

206 
	m__codecvt_îr‹
,

207 
	m__codecvt_noc⁄v


210 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


213 
	s_IO_codecvt


215 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

216 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

217 
	m__mb°©e_t
 *,

218 c⁄° 
	mwch¨_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 **, *,

222 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *, *,

225 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

226 
	m__mb°©e_t
 *,

228 c⁄° **, 
	mwch¨_t
 *,

229 
	mwch¨_t
 *, wchar_t **);

230 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

231 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

233 c⁄° *, c⁄° *, 
	m_IO_size_t
);

234 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

236 
_IO_ic⁄v_t
 
	m__cd_ö
;

237 
_IO_ic⁄v_t
 
	m__cd_out
;

241 
	s_IO_wide_d©a


243 
wch¨_t
 *
	m_IO_ªad_±r
;

244 
wch¨_t
 *
	m_IO_ªad_íd
;

245 
wch¨_t
 *
	m_IO_ªad_ba£
;

246 
wch¨_t
 *
	m_IO_wrôe_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_±r
;

248 
wch¨_t
 *
	m_IO_wrôe_íd
;

249 
wch¨_t
 *
	m_IO_buf_ba£
;

250 
wch¨_t
 *
	m_IO_buf_íd
;

252 
wch¨_t
 *
	m_IO_ßve_ba£
;

253 
wch¨_t
 *
	m_IO_backup_ba£
;

255 
wch¨_t
 *
	m_IO_ßve_íd
;

257 
__mb°©e_t
 
	m_IO_°©e
;

258 
__mb°©e_t
 
	m_IO_œ°_°©e
;

259 
_IO_codecvt
 
	m_codecvt
;

261 
wch¨_t
 
	m_sh‹tbuf
[1];

263 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

267 
	s_IO_FILE
 {

268 
	m_Êags
;

269 
	#_IO_fûe_Êags
 
_Êags


	)

273 * 
	m_IO_ªad_±r
;

274 * 
	m_IO_ªad_íd
;

275 * 
	m_IO_ªad_ba£
;

276 * 
	m_IO_wrôe_ba£
;

277 * 
	m_IO_wrôe_±r
;

278 * 
	m_IO_wrôe_íd
;

279 * 
	m_IO_buf_ba£
;

280 * 
	m_IO_buf_íd
;

282 *
	m_IO_ßve_ba£
;

283 *
	m_IO_backup_ba£
;

284 *
	m_IO_ßve_íd
;

286 
_IO_m¨kî
 *
	m_m¨kîs
;

288 
_IO_FILE
 *
	m_chaö
;

290 
	m_fûío
;

292 
	m_blksize
;

294 
	m_Êags2
;

296 
_IO_off_t
 
	m_ﬁd_off£t
;

298 
	#__HAVE_COLUMN


	)

300 
	m_cur_cﬁumn
;

301 sig√d 
	m_vèbÀ_off£t
;

302 
	m_sh‹tbuf
[1];

306 
_IO_lock_t
 *
	m_lock
;

307 #ifde‡
_IO_USE_OLD_IO_FILE


310 
	s_IO_FILE_com∂ëe


312 
_IO_FILE
 
	m_fûe
;

314 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

315 
_IO_off64_t
 
	m_off£t
;

316 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


318 
_IO_codecvt
 *
	m_codecvt
;

319 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 *
	m__∑d1
;

322 *
	m__∑d2
;

324 
	m_mode
;

326 
	m_unu£d2
[15 *  () - 2 *  (*)];

330 #i‚de‡
__˝lu•lus


331 
_IO_FILE
 
	t_IO_FILE
;

334 
	g_IO_FILE_∂us
;

336 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

337 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

338 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

339 #i‚de‡
_LIBC


340 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

341 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

342 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

344 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

345 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

346 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

354 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

362 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

363 
	tsize_t
 
	t__n
);

371 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

374 
	t__io_˛o£_‚
 (*
	t__cookõ
);

377 #ifde‡
_GNU_SOURCE


379 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

380 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

381 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

382 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

387 
__io_ªad_‚
 *
	mªad
;

388 
__io_wrôe_‚
 *
	mwrôe
;

389 
__io_£ek_‚
 *
	m£ek
;

390 
__io_˛o£_‚
 *
	m˛o£
;

391 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

392 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

394 
	g_IO_cookõ_fûe
;

397 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

398 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

402 #ifde‡
__˝lu•lus


406 
__undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

407 
__uÊow
 (
_IO_FILE
 *Ë
__THROW
;

408 
__ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

409 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *Ë
__THROW
;

410 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *Ë
__THROW
;

411 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

413 #i‡ 
__GNUC__
 >= 3

414 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (ex¥,Ñes)

	)

416 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

419 
	#_IO_gëc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

421 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

422 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

423 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

424 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

425 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

426 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

428 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

429 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

431 
	#_IO_gëwc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

434 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

435 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

436 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

437 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

438 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

439 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

441 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

442 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

444 
_IO_gëc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

446 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

449 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

452 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

453 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

455 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

456 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

459 #ifde‡
_IO_MTSAFE_IO


460 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

461 
	#_IO_Êockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

463 
	#_IO_fu∆ockfûe
(
_Â
) \

464 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

466 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

467 
	#_IO_Êockfûe
(
_Â
Ë

	)

468 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

469 
	#_IO_·rylockfûe
(
_Â
Ë

	)

470 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

471 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

474 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

475 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

476 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

477 
_IO_va_li°
Ë
__THROW
;

478 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_tË
__THROW
;

479 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_tË
__THROW
;

481 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

482 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

484 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

486 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


487 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

488 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

489 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

490 #i‡
__GNUC__
 >= 2

493 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


494 
	~<shlib-com∑t.h
>

495 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

496 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

497 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

498 c⁄° 
_IO_°dö_u£d
;

499 
wók_exã∫
 (
_IO_°dö_u£d
);

502 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


503 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

507 
	#_IO_fwide
(
__Â
, 
__mode
) \

508 ({ 
__ªsu…
 = (
__mode
); \

509 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

511 i‡((
__Â
)->
_mode
 == 0) \

513 (
__Â
)->
_mode
 = -1; \

514 
__ªsu…
 = (
__Â
)->
_mode
; \

516 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

517 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

519 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

520 
__ªsu…
; })

	)

523 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

524 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

525 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

526 
_IO_va_li°
Ë
__THROW
;

527 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_tË
__THROW
;

528 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

531 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë¯## 
U


	)

301 
	#UINT16_C
(
c
Ë¯## 
U


	)

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

118 
	stime•ec


120 
__time_t
 
tv_£c
;

121 
tv_n£c
;

125 #unde‡
__√ed_time•ec


128 #ifdef 
_TIME_H


129 
__BEGIN_NAMESPACE_STD


131 
	stm


133 
tm_£c
;

134 
tm_mö
;

135 
tm_hour
;

136 
tm_mday
;

137 
tm_m⁄
;

138 
tm_yór
;

139 
tm_wday
;

140 
tm_yday
;

141 
tm_isd°
;

143 #ifdef 
__USE_BSD


144 
tm_gmtoff
;

145 
__c⁄°
 *
tm_z⁄e
;

147 
__tm_gmtoff
;

148 
__c⁄°
 *
__tm_z⁄e
;

151 
__END_NAMESPACE_STD


152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


153 
	$__USING_NAMESPACE_STD
(
tm
)

157 #ifde‡
__USE_POSIX199309


159 
	sôimî•ec


161 
time•ec
 
ô_öãrvÆ
;

162 
time•ec
 
ô_vÆue
;

166 
sigevít
;

170 #ifde‡
__USE_XOPEN2K


171 #i‚de‡
__pid_t_deföed


172 
__pid_t
 
	tpid_t
;

173 
	#__pid_t_deföed


	)

178 
__BEGIN_NAMESPACE_STD


181 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

184 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

187 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

188 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

191 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

197 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

198 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

199 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN


205 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

207 
__THROW
;

210 #ifde‡
__USE_GNU


213 
	~<xloˇÀ.h
>

215 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

216 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

217 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

221 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

222 
__loˇÀ_t
 
__loc
Ë
__THROW
;

226 
__BEGIN_NAMESPACE_STD


229 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

233 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

234 
__END_NAMESPACE_STD


236 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


239 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

240 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

244 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

245 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
__BEGIN_NAMESPACE_STD


251 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

254 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

255 
__END_NAMESPACE_STD


257 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


262 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

263 *
__ª°ri˘
 
__buf
Ë
__THROW
;

266 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

272 *
__tz«me
[2];

273 
__daylight
;

274 
__timez⁄e
;

277 #ifdef 
__USE_POSIX


279 *
tz«me
[2];

283 
	$tz£t
 (Ë
__THROW
;

286 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


287 
daylight
;

288 
timez⁄e
;

291 #ifde‡
__USE_SVID


294 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

300 
	#__i¶óp
(
yór
) \

301 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

304 #ifde‡
__USE_MISC


309 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

312 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

315 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

319 #ifde‡
__USE_POSIX199309


324 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

325 
time•ec
 *
__ªmaöög
);

329 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

332 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

335 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

336 
__THROW
;

338 #ifde‡
__USE_XOPEN2K


343 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

344 
__c⁄°
 
time•ec
 *
__ªq
,

345 
time•ec
 *
__ªm
);

348 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

353 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

354 
sigevít
 *
__ª°ri˘
 
__evp
,

355 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

358 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

361 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

362 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

363 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

366 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

367 
__THROW
;

370 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

374 #ifde‡
__USE_XOPEN_EXTENDED


386 
gëd©e_îr
;

395 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

398 #ifde‡
__USE_GNU


409 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

410 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

413 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctl.h

5 #i‚de‡
__i386STUB__IOCTL_H__


6 
	#__i386STUB__IOCTL_H__


	)

8 #ifde‡
__x86_64__


9 
	~<asm-x86_64/io˘l.h
>

11 
	~<asm-i386/io˘l.h
>

	@/usr/include/asm/socket.h

5 #i‚de‡
__i386STUB__SOCKET_H__


6 
	#__i386STUB__SOCKET_H__


	)

8 #ifde‡
__x86_64__


9 
	~<asm-x86_64/sockë.h
>

11 
	~<asm-i386/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

165 
	#__√ed_timevÆ


	)

166 
	~<bôs/time.h
>

169 
	srußge


172 
timevÆ
 
	mru_utime
;

174 
timevÆ
 
	mru_°ime
;

176 
	mru_maxrss
;

179 
	mru_ixrss
;

181 
	mru_idrss
;

183 
	mru_i§ss
;

186 
	mru_möÊt
;

188 
	mru_majÊt
;

190 
	mru_nsw≠
;

193 
	mru_öblock
;

195 
	mru_oublock
;

197 
	mru_msg¢d
;

199 
	mru_msgrcv
;

201 
	mru_nsig«ls
;

205 
	mru_nvcsw
;

208 
	mru_nivcsw
;

212 
	#PRIO_MIN
 -20

	)

213 
	#PRIO_MAX
 20

	)

217 
	e__¥i‹ôy_which


219 
	mPRIO_PROCESS
 = 0,

220 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

221 
	mPRIO_PGRP
 = 1,

222 
	#PRIO_PGRP
 
PRIO_PGRP


	)

223 
	mPRIO_USER
 = 2

224 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_MISC


35 
	#CSIGNAL
 0x000000f‡

	)

36 
	#CLONE_VM
 0x00000100

	)

37 
	#CLONE_FS
 0x00000200

	)

38 
	#CLONE_FILES
 0x00000400

	)

39 
	#CLONE_SIGHAND
 0x00000800

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

43 
	#CLONE_PARENT
 0x00008000

	)

45 
	#CLONE_THREAD
 0x00010000

	)

46 
	#CLONE_NEWNS
 0x00020000

	)

47 
	#CLONE_SYSVSEM
 0x00040000

	)

48 
	#CLONE_SETTLS
 0x00080000

	)

49 
	#CLONE_PARENT_SETTID
 0x00100000

	)

51 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

53 
	#CLONE_DETACHED
 0x00400000

	)

54 
	#CLONE_UNTRACED
 0x00800000

	)

56 
	#CLONE_CHILD_SETTID
 0x01000000

	)

58 
	#CLONE_STOPPED
 0x02000000

	)

62 
	ssched_∑øm


64 
	m__sched_¥i‹ôy
;

67 
	g__BEGIN_DECLS


70 #ifde‡
__USE_MISC


71 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

72 
__Êags
, *
__¨g
Ë
__THROW
;

75 
__END_DECLS


79 #i‡!
deföed
 
__deföed_sched∑øm
 \

80 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

81 
	#__deföed_sched∑øm
 1

	)

83 
	s__sched_∑øm


85 
__sched_¥i‹ôy
;

87 #unde‡
__√ed_sched∑øm


91 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


92 
	#__˝u_£t_t_deföed


	)

94 
	#__CPU_SETSIZE
 1024

	)

95 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

98 
	t__˝u_mask
;

101 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

102 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

107 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

108 } 
	t˝u_£t_t
;

111 
	#__CPU_ZERO
(
˝u£ç
) \

113 
__i
; \

114 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

115 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

116 
__¨r
->
__bôs
[
__i
] = 0; \

117 
	}
} 0)

	)

118 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

119 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

120 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

121 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

122 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

123 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 
	ssigc⁄ãxt


75 
	mgs
, 
	m__gsh
;

76 
	mfs
, 
	m__fsh
;

77 
	mes
, 
	m__esh
;

78 
	mds
, 
	m__dsh
;

79 
	medi
;

80 
	mesi
;

81 
	mebp
;

82 
	me•
;

83 
	mebx
;

84 
	medx
;

85 
	mecx
;

86 
	móx
;

87 
	må≠no
;

88 
	mîr
;

89 
	meù
;

90 
	mcs
, 
	m__csh
;

91 
	meÊags
;

92 
	me•_©_sig«l
;

93 
	mss
, 
	m__ssh
;

94 
_Â°©e
 * 
	mÂ°©e
;

95 
	mﬁdmask
;

96 
	m¸2
;

101 
	s_Â°©e


104 
__uöt16_t
 
	mcwd
;

105 
__uöt16_t
 
	mswd
;

106 
__uöt16_t
 
	m·w
;

107 
__uöt16_t
 
	mf›
;

108 
__uöt64_t
 
	mrù
;

109 
__uöt64_t
 
	mrdp
;

110 
__uöt32_t
 
	mmxc§
;

111 
__uöt32_t
 
	mmx¸_mask
;

112 
_Âxªg
 
	m_°
[8];

113 
_xmmªg
 
	m_xmm
[16];

114 
__uöt32_t
 
	m∑ddög
[24];

117 
	ssigc⁄ãxt


119 
	mr8
;

120 
	mr9
;

121 
	mr10
;

122 
	mr11
;

123 
	mr12
;

124 
	mr13
;

125 
	mr14
;

126 
	mr15
;

127 
	mrdi
;

128 
	mrsi
;

129 
	mrbp
;

130 
	mrbx
;

131 
	mrdx
;

132 
	møx
;

133 
	mrcx
;

134 
	mr•
;

135 
	mrù
;

136 
	meÊags
;

137 
	mcs
;

138 
	mgs
;

139 
	mfs
;

140 
	m__∑d0
;

141 
	mîr
;

142 
	må≠no
;

143 
	mﬁdmask
;

144 
	m¸2
;

145 
_Â°©e
 * 
	mÂ°©e
;

146 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

99 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

101 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‚de‡
_SYS_UIO_H


24 
	~<sys/ty≥s.h
>

38 
	#UIO_MAXIOV
 1024

	)

42 
	siovec


44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

129 #ifde‡
__USE_ISOC99


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 
LONG_LONG_MIN


	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
LONG_LONG_MAX


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 
ULONG_LONG_MAX


	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

38 
	#EDEADLK
 35

	)

40 
	#ENAMETOOLONG
 36

	)

41 
	#ENOLCK
 37

	)

42 
	#ENOSYS
 38

	)

43 
	#ENOTEMPTY
 39

	)

44 
	#ELOOP
 40

	)

45 
	#EWOULDBLOCK
 
EAGAIN


	)

46 
	#ENOMSG
 42

	)

47 
	#EIDRM
 43

	)

48 
	#ECHRNG
 44

	)

49 
	#EL2NSYNC
 45

	)

50 
	#EL3HLT
 46

	)

51 
	#EL3RST
 47

	)

52 
	#ELNRNG
 48

	)

53 
	#EUNATCH
 49

	)

54 
	#ENOCSI
 50

	)

55 
	#EL2HLT
 51

	)

56 
	#EBADE
 52

	)

57 
	#EBADR
 53

	)

58 
	#EXFULL
 54

	)

59 
	#ENOANO
 55

	)

60 
	#EBADRQC
 56

	)

61 
	#EBADSLT
 57

	)

63 
	#EDEADLOCK
 
EDEADLK


	)

65 
	#EBFONT
 59

	)

66 
	#ENOSTR
 60

	)

67 
	#ENODATA
 61

	)

68 
	#ETIME
 62

	)

69 
	#ENOSR
 63

	)

70 
	#ENONET
 64

	)

71 
	#ENOPKG
 65

	)

72 
	#EREMOTE
 66

	)

73 
	#ENOLINK
 67

	)

74 
	#EADV
 68

	)

75 
	#ESRMNT
 69

	)

76 
	#ECOMM
 70

	)

77 
	#EPROTO
 71

	)

78 
	#EMULTIHOP
 72

	)

79 
	#EDOTDOT
 73

	)

80 
	#EBADMSG
 74

	)

81 
	#EOVERFLOW
 75

	)

82 
	#ENOTUNIQ
 76

	)

83 
	#EBADFD
 77

	)

84 
	#EREMCHG
 78

	)

85 
	#ELIBACC
 79

	)

86 
	#ELIBBAD
 80

	)

87 
	#ELIBSCN
 81

	)

88 
	#ELIBMAX
 82

	)

89 
	#ELIBEXEC
 83

	)

90 
	#EILSEQ
 84

	)

91 
	#ERESTART
 85

	)

92 
	#ESTRPIPE
 86

	)

93 
	#EUSERS
 87

	)

94 
	#ENOTSOCK
 88

	)

95 
	#EDESTADDRREQ
 89

	)

96 
	#EMSGSIZE
 90

	)

97 
	#EPROTOTYPE
 91

	)

98 
	#ENOPROTOOPT
 92

	)

99 
	#EPROTONOSUPPORT
 93

	)

100 
	#ESOCKTNOSUPPORT
 94

	)

101 
	#EOPNOTSUPP
 95

	)

102 
	#EPFNOSUPPORT
 96

	)

103 
	#EAFNOSUPPORT
 97

	)

104 
	#EADDRINUSE
 98

	)

105 
	#EADDRNOTAVAIL
 99

	)

106 
	#ENETDOWN
 100

	)

107 
	#ENETUNREACH
 101

	)

108 
	#ENETRESET
 102

	)

109 
	#ECONNABORTED
 103

	)

110 
	#ECONNRESET
 104

	)

111 
	#ENOBUFS
 105

	)

112 
	#EISCONN
 106

	)

113 
	#ENOTCONN
 107

	)

114 
	#ESHUTDOWN
 108

	)

115 
	#ETOOMANYREFS
 109

	)

116 
	#ETIMEDOUT
 110

	)

117 
	#ECONNREFUSED
 111

	)

118 
	#EHOSTDOWN
 112

	)

119 
	#EHOSTUNREACH
 113

	)

120 
	#EALREADY
 114

	)

121 
	#EINPROGRESS
 115

	)

122 
	#ESTALE
 116

	)

123 
	#EUCLEAN
 117

	)

124 
	#ENOTNAM
 118

	)

125 
	#ENAVAIL
 119

	)

126 
	#EISNAM
 120

	)

127 
	#EREMOTEIO
 121

	)

128 
	#EDQUOT
 122

	)

130 
	#ENOMEDIUM
 123

	)

131 
	#EMEDIUMTYPE
 124

	)

132 
	#ECANCELED
 125

	)

133 
	#ENOKEY
 126

	)

134 
	#EKEYEXPIRED
 127

	)

135 
	#EKEYREVOKED
 128

	)

136 
	#EKEYREJECTED
 129

	)

139 
	~<asm/î∫o.h
>

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


45 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

46 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

47 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

49 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

50 
	#__THROW
 
	`throw
 ()

	)

51 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

53 
	#__THROW


	)

54 
	#__NTH
(
f˘
Ë
	)
fct

60 
	#__ölöe


	)

62 
	#__THROW


	)

63 
	#__NTH
(
f˘
Ë
	)
fct

65 
	#__c⁄°
 c⁄°

	)

66 
	#__sig√d
 sig√d

	)

67 
	#__vﬁ©ûe
 vﬁ©ûe

	)

73 
	#__P
(
¨gs
Ë
	)
args

74 
	#__PMT
(
¨gs
Ë
	)
args

79 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

80 
	#__STRING
(
x
Ë#x

	)

83 
	#__±r_t
 *

	)

84 
	#__l⁄g_doubÀ_t
 

	)

88 #ifdef 
__˝lu•lus


89 
	#__BEGIN_DECLS
 "C" {

	)

90 
	#__END_DECLS
 }

	)

92 
	#__BEGIN_DECLS


	)

93 
	#__END_DECLS


	)

102 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


103 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

104 
	#__END_NAMESPACE_STD
 }

	)

105 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

106 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

107 
	#__END_NAMESPACE_C99
 }

	)

108 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

113 
	#__BEGIN_NAMESPACE_STD


	)

114 
	#__END_NAMESPACE_STD


	)

115 
	#__USING_NAMESPACE_STD
(
«me
)

	)

116 
	#__BEGIN_NAMESPACE_C99


	)

117 
	#__END_NAMESPACE_C99


	)

118 
	#__USING_NAMESPACE_C99
(
«me
)

	)

123 #i‚de‡
__BOUNDED_POINTERS__


124 
	#__bounded


	)

125 
	#__unbounded


	)

126 
	#__±rvÆue


	)

131 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

132 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

136 #i‡
__GNUC_PREREQ
 (2,97)

138 
	#__Êex¨r
 []

	)

140 #ifde‡
__GNUC__


141 
	#__Êex¨r
 [0]

	)

143 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

144 
	#__Êex¨r
 []

	)

147 
	#__Êex¨r
 [1]

	)

163 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

165 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

166 #ifde‡
__˝lu•lus


167 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

168 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

170 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

171 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

173 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

174 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

187 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

188 
	#__©åibuã__
(
xyz
Ë

	)

194 #i‡
__GNUC_PREREQ
 (2,96)

195 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

197 
	#__©åibuã_mÆloc__


	)

203 #i‡
__GNUC_PREREQ
 (2,96)

204 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

206 
	#__©åibuã_puª__


	)

212 #i‡
__GNUC_PREREQ
 (3,1)

213 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

214 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

216 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

217 
	#__©åibuã_noölöe__


	)

221 #i‡
__GNUC_PREREQ
 (3,2)

222 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

224 
	#__©åibuã_dïªˇãd__


	)

233 #i‡
__GNUC_PREREQ
 (2,8)

234 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

243 #i‡
__GNUC_PREREQ
 (2,97)

244 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

245 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

247 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

252 #i‡
__GNUC_PREREQ
 (3,3)

253 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

255 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡!
__GNUC_PREREQ
 (2,8)

263 
	#__exãnsi⁄__


	)

267 #i‡!
__GNUC_PREREQ
 (2,92)

268 
	#__ª°ri˘


	)

274 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


275 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

277 #ifde‡
__GNUC__


278 
	#__ª°ri˘_¨r


	)

280 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

281 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

284 
	#__ª°ri˘_¨r


	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm-i386/ioctl.h

6 #i‚de‡
_ASMI386_IOCTL_H


7 
	#_ASMI386_IOCTL_H


	)

27 
	#_IOC_NRBITS
 8

	)

28 
	#_IOC_TYPEBITS
 8

	)

29 
	#_IOC_SIZEBITS
 14

	)

30 
	#_IOC_DIRBITS
 2

	)

32 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

33 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

34 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

35 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

37 
	#_IOC_NRSHIFT
 0

	)

38 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

39 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

40 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

45 
	#_IOC_NONE
 0U

	)

46 
	#_IOC_WRITE
 1U

	)

47 
	#_IOC_READ
 2U

	)

49 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

50 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

51 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

52 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

53 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

57 
	#_IOC_TYPECHECK
(
t
Ë—)

	)

60 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

61 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

62 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

63 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

64 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

65 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

66 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

69 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

70 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

71 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

72 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

76 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

77 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

78 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

79 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

80 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-i386/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

48 
	#SO_PEERSEC
 31

	)

51 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

53 
	#SOCK_STREAM
 1

	)

54 
	#SOCK_DGRAM
 2

	)

55 
	#SOCK_RAW
 3

	)

56 
	#SOCK_RDM
 4

	)

57 
	#SOCK_SEQPACKET
 5

	)

58 
	#SOCK_PACKET
 10

	)

63 
	#SOCK_MAX
 (
SOCK_PACKET
+1)

	)

	@/usr/include/asm-x86_64/ioctl.h

6 #i‚de‡
_ASMX8664_IOCTL_H


7 
	#_ASMX8664_IOCTL_H


	)

27 
	#_IOC_NRBITS
 8

	)

28 
	#_IOC_TYPEBITS
 8

	)

29 
	#_IOC_SIZEBITS
 14

	)

30 
	#_IOC_DIRBITS
 2

	)

32 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

33 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

34 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

35 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

37 
	#_IOC_NRSHIFT
 0

	)

38 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

39 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

40 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

45 
	#_IOC_NONE
 0U

	)

46 
	#_IOC_WRITE
 1U

	)

47 
	#_IOC_READ
 2U

	)

49 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

50 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

51 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

52 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

53 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

56 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

57 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

58 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

59 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

62 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

63 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

64 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

65 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

69 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

70 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

71 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

72 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

73 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-x86_64/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

48 
	#SO_PEERSEC
 31

	)

51 #i‡!
deföed
(
__GLIBC__
) || (__GLIBC__ < 2)

53 
	#SOCK_STREAM
 1

	)

54 
	#SOCK_DGRAM
 2

	)

55 
	#SOCK_RAW
 3

	)

56 
	#SOCK_RDM
 4

	)

57 
	#SOCK_SEQPACKET
 5

	)

58 
	#SOCK_PACKET
 10

	)

63 
	#SOCK_MAX
 (
SOCK_PACKET
+1)

	)

	@/usr/include/asm/errno.h

5 #i‚de‡
__i386STUB__ERRNO_H__


6 
	#__i386STUB__ERRNO_H__


	)

8 #ifde‡
__x86_64__


9 
	~<asm-x86_64/î∫o.h
>

11 
	~<asm-i386/î∫o.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTF
(
NAME
Ë
__libc_±hªad_fun˘i⁄s
.
±r_
##
	)
NAME

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
	`PTF
(
FUNC
Ë!
NULL
 ? PTF(FUNCË
ARGS
 : 
ELSE
)

	)

157 
	#PTF
(
NAME
Ë
	)
NAME

158 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

159 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

165 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

166 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

168 
	#__libc_lock_öô
(
NAME
) \

169 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

171 
	#__libc_rwlock_öô
(
NAME
) \

172 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

176 
	#__libc_lock_öô_ªcursive
(
NAME
) \

177 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

179 
	#__libc_lock_öô_ªcursive
(
NAME
) \

181 i‡(
__±hªad_muãx_öô
 !
NULL
) \

183 
±hªad_muãx©å_t
 
__©å
; \

184 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

185 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

186 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

187 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

189 } 0)

	)

192 
	#__πld_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

207 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

208 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

210 
	#__libc_lock_föi
(
NAME
) \

211 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

213 
	#__libc_rwlock_föi
(
NAME
) \

214 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

217 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

218 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

220 
	#__libc_lock_föi_ªcursive
(
NAME
) \

221 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

225 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

226 
	#__libc_lock_lock
(
NAME
) \

227 ({ 
	`Œl_lock
 (
NAME
); 0; })

	)

229 
	#__libc_lock_lock
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

232 
	#__libc_rwlock_rdlock
(
NAME
) \

233 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

234 
	#__libc_rwlock_wæock
(
NAME
) \

235 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

238 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

239 
	#__libc_lock_lock_ªcursive
(
NAME
) \

241 *
£lf
 = 
THREAD_SELF
; \

242 i‡((
NAME
).
ow√r
 !
£lf
) \

244 
	`Œl_lock
 ((
NAME
).
lock
); \

245 (
NAME
).
ow√r
 = 
£lf
; \

247 ++(
NAME
).
˙t
; \

248 } 0)

	)

250 
	#__libc_lock_lock_ªcursive
(
NAME
) \

251 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

255 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

256 
	#__libc_lock_åylock
(
NAME
) \

257 
	`Œl_åylock
 (
NAME
)

	)

259 
	#__libc_lock_åylock
(
NAME
) \

260 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

262 
	#__libc_rwlock_åyrdlock
(
NAME
) \

263 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

264 
	#__libc_rwlock_åywæock
(
NAME
) \

265 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

268 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

269 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

271 
ªsu…
 = 0; \

272 *
£lf
 = 
THREAD_SELF
; \

273 i‡((
NAME
).
ow√r
 !
£lf
) \

275 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

277 (
NAME
).
ow√r
 = 
£lf
; \

278 (
NAME
).
˙t
 = 1; \

281 
ªsu…
 = 
EBUSY
; \

284 ++(
NAME
).
˙t
; \

285 
ªsu…
; \

286 })

	)

288 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

289 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

292 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

293 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 
	#__libc_lock_u∆ock
(
NAME
) \

298 
	`Œl_u∆ock
 (
NAME
)

	)

300 
	#__libc_lock_u∆ock
(
NAME
) \

301 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

303 
	#__libc_rwlock_u∆ock
(
NAME
) \

304 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

307 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

309 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

311 i‡(--(
NAME
).
˙t
 == 0) \

313 (
NAME
).
ow√r
 = 
NULL
; \

314 
	`Œl_u∆ock
 ((
NAME
).
lock
); \

316 } 0)

	)

318 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

319 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


323 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

324 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

326 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

327 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

329 
	#__πld_lock_lock_ªcursive
(
NAME
) \

330 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

332 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

333 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

335 
	#__πld_lock_lock_ªcursive
(
NAME
) \

336 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

338 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

339 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

343 #i‡
PTHREAD_ONCE_INIT
 == 0

346 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

347 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

349 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

350 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

354 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

356 i‡(
	`PTF
(
__±hªad_⁄˚
Ë!
NULL
) \

357 
	`PTF
(
__±hªad_⁄˚
Ë(&(
ONCE_CONTROL
), 
INIT_FUNCTION
); \

358 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

359 
	`INIT_FUNCTION
 (); \

360 (
ONCE_CONTROL
) |= 2; \

362 } 0)

	)

369 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

370 (*
routöe
Ë(*), *
¨g
);

371 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

372 
execuã
);

373 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

374 (*
routöe
Ë(*), *
¨g
);

375 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

376 
execuã
);

379 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

380 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

381 
_avaû
; \

382 i‡(
DOIT
) { \

383 
_avaû
 = 
	`PTF
(
_±hªad_˛ónup_push_de„r
Ë!
NULL
; \

384 i‡(
_avaû
) { \

385 
	`PTF
(
_±hªad_˛ónup_push_de„r
Ë(&
_buf„r
, 
FCT
, 
ARG
); \

387 
_buf„r
.
__routöe
 = (
FCT
); \

388 
_buf„r
.
__¨g
 = (
ARG
); \

391 
_avaû
 = 0; \

392 }

	)

395 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

396 i‡(
_avaû
) { \

397 
	`PTF
(
_±hªad_˛ónup_p›_ª°‹e
Ë(&
_buf„r
, 
DOIT
); \

398 } i‡(
DOIT
) \

399 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

400 
	}

	)
}

403 
	#__libc_˛ónup_íd
(
DOIT
) \

404 i‡(
_avaû
) { \

405 
	`PTF
(
_±hªad_˛ónup_p›_ª°‹e
Ë(&
_buf„r
, 
DOIT
); \

406 } i‡(
DOIT
) \

407 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

411 
__ölöe
 

412 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

414 i‡(
f
->
__do_ô
)

415 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

416 
	}
}

418 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

420 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

421 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

422 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

423 .
__do_ô
 = 1 };

	)

425 
	#__libc_˛ónup_p›
(
execuã
) \

426 
__˛‰ame
.
__do_ô
 = (
execuã
); \

427 } 0)

	)

431 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

432 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

435 
	#__libc_gë•ecific
(
KEY
) \

436 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

439 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

440 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

446 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

447 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

448 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

449 (*
__∑ª¡
) (),

450 (*
__chûd
) (),

451 *
__dso_h™dÀ
);

456 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

457 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

459 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

461 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

463 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

465 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

467 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

469 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

471 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

472 
__köd
);

474 #ifde‡
__USE_UNIX98


475 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

476 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

478 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

480 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

482 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

484 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

486 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

488 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

491 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

492 (*
__de°r_fun˘i⁄
) (*));

494 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

495 
__c⁄°
 *
__poöãr
);

497 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

499 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

500 (*
__öô_routöe
) ());

502 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

503 (*
__∑ª¡
) (),

504 (*
__chûd
) ());

510 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


511 #ifde‡
wók_exã∫


512 #i‡
_LIBC


513 
	~<bp-sym.h
>

515 
	#BP_SYM
 (
sym
Ë
	)
sym

517 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

518 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

519 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

520 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

521 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

522 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

523 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

524 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

525 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

526 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

527 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

528 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

529 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

530 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

531 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

532 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

533 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

536 
	$wók_exã∫
 (
__±hªad_öôülize
)

537 
	$wók_exã∫
 (
__±hªad_©f‹k
)

538 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

542 #¥agm®
wók
 
__±hªad_muãx_öô


543 #¥agm®
wók
 
__±hªad_muãx_de°roy


544 #¥agm®
wók
 
__±hªad_muãx_lock


545 #¥agm®
wók
 
__±hªad_muãx_åylock


546 #¥agm®
wók
 
__±hªad_muãx_u∆ock


547 #¥agm®
wók
 
__±hªad_muãx©å_öô


548 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


549 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


550 #¥agm®
wók
 
__±hªad_rwlock_de°roy


551 #¥agm®
wók
 
__±hªad_rwlock_rdlock


552 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


553 #¥agm®
wók
 
__±hªad_rwlock_wæock


554 #¥agm®
wók
 
__±hªad_rwlock_åywæock


555 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


556 #¥agm®
wók
 
__±hªad_key_¸óã


557 #¥agm®
wók
 
__±hªad_£t•ecific


558 #¥agm®
wók
 
__±hªad_gë•ecific


559 #¥agm®
wók
 
__±hªad_⁄˚


560 #¥agm®
wók
 
__±hªad_öôülize


561 #¥agm®
wók
 
__±hªad_©f‹k


562 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


563 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


564 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


323 
__ölöe
 
size_t


324 
	`__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

325 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

326 {  (
__ps
 !
NULL


327 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

330 
__BEGIN_NAMESPACE_C99


333 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

334 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

335 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

339 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

340 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

341 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

342 
__END_NAMESPACE_C99


345 #ifdef 
__USE_GNU


348 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

349 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

350 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

354 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

355 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

356 
size_t
 
__nwc
, size_à
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

362 #ifde‡
__USE_XOPEN


364 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

368 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

372 
__BEGIN_NAMESPACE_C99


375 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

376 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

378 #ifde‡
__USE_ISOC99


380 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

381 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

382 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

383 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

389 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

390 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

394 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

395 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

396 
__THROW
;

398 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

401 
__exãnsi⁄__


402 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

403 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

404 
__THROW
;

408 
__exãnsi⁄__


409 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

410 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

411 
__ba£
Ë
__THROW
;

413 
__END_NAMESPACE_C99


415 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


418 
__exãnsi⁄__


419 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

420 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

421 
__THROW
;

425 
__exãnsi⁄__


426 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

427 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

428 
__ba£
Ë
__THROW
;

431 #ifde‡
__USE_GNU


445 
	~<xloˇÀ.h
>

449 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

450 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

451 
__loˇÀ_t
 
__loc
Ë
__THROW
;

453 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

455 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

457 
__exãnsi⁄__


458 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

459 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

460 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

462 
__exãnsi⁄__


463 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

464 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

465 
__ba£
, 
__loˇÀ_t
 
__loc
)

466 
__THROW
;

468 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

470 
__THROW
;

472 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

473 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

474 
__THROW
;

476 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__loˇÀ_t
 
__loc
Ë
__THROW
;

484 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

485 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

486 
__THROW
;

487 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

489 
__THROW
;

490 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__group
Ë
__THROW
;

494 #i‚de‡
__wc°ﬁ_öã∫Æ_deföed


495 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

496 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

497 
__ba£
, 
__group
Ë
__THROW
;

498 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

500 #i‚de‡
__wc°oul_öã∫Æ_deföed


501 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

502 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

503 
__ba£
, 
__group
Ë
__THROW
;

504 
	#__wc°oul_öã∫Æ_deföed
 1

	)

506 #i‚de‡
__wc°ﬁl_öã∫Æ_deföed


507 
__exãnsi⁄__


508 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__ba£
, 
__group
Ë
__THROW
;

511 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

513 #i‚de‡
__wc°ouŒ_öã∫Æ_deföed


514 
__exãnsi⁄__


515 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

516 
__ª°ri˘
 
__≈å
,

517 
wch¨_t
 **

518 
__ª°ri˘
 
__íd±r
,

519 
__ba£
,

520 
__group
Ë
__THROW
;

521 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

525 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

527 
__BEGIN_NAMESPACE_C99


529 
__ölöe
 

530 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

532 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

533 
__ölöe
 

534 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

536 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

537 
__ölöe
 

538 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

540 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

541 
__END_NAMESPACE_C99


543 #ifde‡
__USE_GNU


544 
__ölöe
 

545 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

546 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

547 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

548 
__ölöe
 

549 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

551 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

554 
__exãnsi⁄__


555 
__ölöe
 

556 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__exãnsi⁄__


560 
__ölöe
 

561 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

562 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

563 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

568 #ifdef 
__USE_GNU


571 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

575 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

576 
__THROW
;

581 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_C99


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 
__END_NAMESPACE_C99


650 #ifde‡
__USE_ISOC99


651 
__BEGIN_NAMESPACE_C99


657 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
)

665 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
)

669 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
)

672 
__THROW
 ;

674 
__END_NAMESPACE_C99


678 
__BEGIN_NAMESPACE_C99


683 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

684 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

690 
wöt_t
 
	`gëwch¨
 ();

697 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

698 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

704 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

712 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

713 
__FILE
 *
__ª°ri˘
 
__°ªam
);

719 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

720 
__FILE
 *
__ª°ri˘
 
__°ªam
);

727 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

728 
__END_NAMESPACE_C99


731 #ifde‡
__USE_GNU


739 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

740 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

748 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

756 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

775 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

776 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
__BEGIN_NAMESPACE_C99


793 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

794 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

795 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

796 
__END_NAMESPACE_C99


798 #ifde‡
__USE_GNU


799 
	~<xloˇÀ.h
>

803 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

804 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

805 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

806 
__loˇÀ_t
 
__loc
Ë
__THROW
;

815 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


816 
	#__√ed_iswxxx


	)

817 
	~<w˘y≥.h
>

820 
__END_DECLS


	@/usr/include/asm-i386/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 #i‚de‡
_LINUX_ERRNO_H


5 
	~<löux/î∫o.h
>

	@/usr/include/asm-x86_64/errno.h

1 #i‚de‡
_X8664_ERRNO_H


2 
	#_X8664_ERRNO_H


	)

4 #i‚de‡
_LINUX_ERRNO_H


5 
	~<löux/î∫o.h
>

	@/usr/include/asm/sockios.h

5 #i‚de‡
__i386STUB__SOCKIOS_H__


6 
	#__i386STUB__SOCKIOS_H__


	)

8 #ifde‡
__x86_64__


9 
	~<asm-x86_64/sockios.h
>

11 
	~<asm-i386/sockios.h
>

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

36 
	~<löux/limôs.h
>

39 #ifde‡
__undef_NR_OPEN


40 #unde‡
NR_OPEN


41 #unde‡
__undef_NR_OPEN


44 #ifde‡
__undef_LINK_MAX


45 #unde‡
LINK_MAX


46 #unde‡
__undef_LINK_MAX


49 #ifde‡
__undef_OPEN_MAX


50 #unde‡
OPEN_MAX


51 #unde‡
__undef_OPEN_MAX


55 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

57 
	#PTHREAD_KEYS_MAX
 1024

	)

60 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

62 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

65 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

67 #unde‡
PTHREAD_THREADS_MAX


71 
	#AIO_PRIO_DELTA_MAX
 20

	)

74 
	#PTHREAD_STACK_MIN
 16384

	)

77 
	#DELAYTIMER_MAX
 2147483647

	)

80 
	#TTY_NAME_MAX
 32

	)

83 
	#LOGIN_NAME_MAX
 256

	)

86 
	#HOST_NAME_MAX
 64

	)

89 
	#MQ_PRIO_MAX
 32768

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

47 
__END_NAMESPACE_C99


52 #i‚de‡
WEOF


53 
	#WEOF
 (0xffffffffu)

	)

56 #unde‡
__√ed_iswxxx


61 #i‚de‡
__iswxxx_deföed


62 
	#__iswxxx_deföed
 1

	)

64 
__BEGIN_NAMESPACE_C99


67 
	tw˘y≥_t
;

68 
__END_NAMESPACE_C99


70 #i‚de‡
_ISwbô


75 
	~<ídün.h
>

76 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


77 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

79 
	#_ISwbô
(
bô
) \

80 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

81 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

82 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

83 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

88 
__ISwuµî
 = 0,

89 
__ISwlowî
 = 1,

90 
__ISwÆpha
 = 2,

91 
__ISwdigô
 = 3,

92 
__ISwxdigô
 = 4,

93 
__ISw•a˚
 = 5,

94 
__ISw¥öt
 = 6,

95 
__ISwgøph
 = 7,

96 
__ISwbœnk
 = 8,

97 
__ISw˙ål
 = 9,

98 
__ISwpun˘
 = 10,

99 
__ISwÆnum
 = 11,

101 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

102 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

103 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

104 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

105 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

106 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

107 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

108 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

109 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

110 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

111 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

112 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

117 
__BEGIN_DECLS


119 
__BEGIN_NAMESPACE_C99


126 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

132 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

139 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

143 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

148 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

161 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

166 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

176 #ifde‡
__USE_ISOC99


177 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

186 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

190 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

191 
__END_NAMESPACE_C99


198 
__BEGIN_NAMESPACE_C99


201 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

202 
__END_NAMESPACE_C99


203 #ifde‡
__USE_GNU


204 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

207 
__BEGIN_NAMESPACE_C99


209 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

213 
__END_NAMESPACE_C99


215 
__END_DECLS


222 #ifde‡
_WCTYPE_H


228 
__BEGIN_DECLS


230 
__BEGIN_NAMESPACE_C99


233 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

236 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

237 
__END_NAMESPACE_C99


239 #ifde‡
__USE_GNU


241 
	~<xloˇÀ.h
>

245 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

251 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

254 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

258 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

262 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

267 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

290 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

295 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

299 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

300 
__THROW
;

304 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

305 
__THROW
;

313 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

316 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

320 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

321 
__THROW
;

324 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

325 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

329 
__END_DECLS


	@/usr/include/asm-i386/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/asm-x86_64/sockios.h

1 #i‚de‡
__ARCH_X8664_SOCKIOS__


2 
	#__ARCH_X8664_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

16 
	#XATTR_NAME_MAX
 255

	)

17 
	#XATTR_SIZE_MAX
 65536

	)

18 
	#XATTR_LIST_MAX
 65536

	)

20 
	#RTSIG_MAX
 32

	)

	@
1
.
1
/usr/include
133
3130
chunk.h
common.h
convert.c
convert.h
file_server.c
file_server.h
job.c
job.h
machine.c
machine.h
main.c
minimad.c
mp3_play.c
mp3_play.h
msr_api.h
sound.h
status.h
temp.h
typedefs.h
version.h
voice.c
voice.h
voice_i386.c
voice_test.c
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/soundcard.h
/usr/include/mad.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/soundcard.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/siginfo.h
/usr/include/bits/socket.h
/usr/include/bits/stat.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/limits.h
/usr/include/linux/errno.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/asm-i386/ioctl.h
/usr/include/asm-i386/socket.h
/usr/include/asm-x86_64/ioctl.h
/usr/include/asm-x86_64/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/xopen_lim.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/asm-i386/errno.h
/usr/include/asm-x86_64/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/local_lim.h
/usr/include/wctype.h
/usr/include/asm-i386/sockios.h
/usr/include/asm-x86_64/sockios.h
/usr/include/linux/limits.h
